import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import * as moment from 'moment';
import { InvoiceService } from '../services/invoice.service';
import { Subscription } from 'rxjs';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { PricingInfoService } from '../services/pricing-info.service';
// import { classArray } from '../app.constant';
import { classArray } from '../app.constant';
import { increasePercentForAR } from '../app.constant';
import { ChatService } from '../services/chat.service';
// import * as io from 'socket.io-client';
import  html2canvas from "html2canvas";
import  jsPDF from 'jspdf';

import { WebSocketService } from '../services/web-socket.service';
// import { runInThisContext } from 'vm';
import { NgxSpinnerService } from "ngx-spinner";
import { ExcelService } from '../services/excel.service';
import { LoggerService } from '../services/logger.service';
import { CustomerService } from '../services/customer.service';
// import  Swal from 'sweetalert2';
import swal from 'sweetalert2';

import * as XLSX from 'xlsx';
import { DatePipe } from '@angular/common';
import Swal from 'sweetalert2';
const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
const EXCEL_EXTENSION = '.xlsx';
declare var $: any;
// declare var html2canvas: any;

@Component({
  selector: 'app-carrieranalytics',
  templateUrl: './carrieranalytics.component.html',
  styleUrls: ['./carrieranalytics.component.css']
})
export class CarrieranalyticsComponent implements OnInit {
  @ViewChild('trafficFlowTable') table:any = ElementRef;

  workbookForm: FormGroup = new FormGroup({});
  editworkbookForm: FormGroup = new FormGroup({});
  accessorialFormAP: FormGroup = new FormGroup({});
  accessorialFormAR: FormGroup = new FormGroup({});
  ruleForm: FormGroup = new FormGroup({});
  classArray = classArray;
  apData:any = [];
  arData:any = [];
  exportArray:any = [];
  carrierAp:any = [];
  viewAssessorialArray:any;
  count = 0;
  public showTableValues = false;
  public loader = false;
  public invoiceDetails:any = {};
  public inboundArray:any = [];
  public outboundArray:any = [];
  public thirdPartyArray:any = [];
  public totalInvoiceAmt:any = [];
  public totalRateForForte:any = [];
  public companyInformation;
  public discountsValue:any;
  public displayNoInVoice = false;
  public reddawayState:any;
  public showErrorMessageRuleAlreadyExist = false;
  getAdmissionByIdSubscription:any =  Subscription;
  fedexApResponse: any;
  fedexARResponse: any;
  yrcApResponse: any;
  yrcArResponse: any;
  reddawayARResponse: any;
  reddawayApResponse: any;
  carrierArray = ['YRC', 'FEDEX ECONOMY', 'FEDEX PRIORITY', 'REDDAWAY'];
  parseSetMasterData:any;
  localStorageArData:any;
  weightForCal: any = 0;
  userData: any;
  showEdit = false;
  public increasedValueForAR = Number(increasePercentForAR);
  finalRateCharge: any = 0;
  arrayData: any;
  resultForYRCArray: any;
  resultForReddawayArray: any;
  itemArray: any;
  indexForArray: any;
  selectedItems: any;
  resultArray:any = [];
  initialYrcARDiscount = 0;
  resultForPriorityArray:any = [];
  disableAnalyticsButton: any = false;
  allShipmentsRateArray: any =[];
  showErrorMessageForClass: any =  false;
  assessorialArray:any = [];
  totalForteRateArray:any = [];
  totalInvoiceAmountArray:any = [];
  totalGpChargeArray:any = [];
  totalApChargeArray:any = [];
  messagesArr:any = [];
  editArAccess = false;
  editApAccess = false;
  invalidInputData:any = [];
  enableTable = false;
  trafficDataSubscriber: any =Subscription;
  notificationSubscriber :any = Subscription;
  notesEnter: any;
  public finalDirections:any = [];
  public array:any = [];
  public specificStateFrom:any = [];
  public specificStateTo:any = [];
  public specificCityFrom:any = [];
  public specificCityTo:any = [];
  // public increasedValueForAR = Number(increasePercentForAR);
  public fakArray:any = [];
  public finalFakArray:any = [];
  public finalFakClass:any = [];
  public fakArrayValues:any = [];
  public finalArray:any = [];
  // public finalAssessorial = [];
  // public resultArray = [];
  arrayValues:any = [];
  public showTableDetail = false;
  public accessDeniedMsg = false;
  fullArray:any = [];
  finalApAssess = 0;
  finalArAssess = 0;
  editAPDiscountValue = false;
  editARDiscountValue = false
  assessorialNames = [
    // { 'id': 1, 'itemName': 'LiftGate Service', 'name': 'LG', 'Yrccost': '8.80', 'Fedexcost': '72.06' },
    // { 'id': 2, 'itemName': 'Residential Delivery', 'name': 'RD', 'Yrccost': '11', 'Fedexcost': '76' },
    // { 'id': 3, 'itemName': 'Limited Access Delivery', 'name': 'LA', 'Yrccost': '0', 'Fedexcost': '76' },
    // { 'id': 4, 'itemName': 'Inside Delivery', 'name': 'ID', 'Yrccost': '11.85', 'Fedexcost': '6.98', 'FedexcostAR': '11.40' },
    // { 'id': 5, 'itemName': 'Notify', 'name': 'NTFY', 'Yrccost': '0', 'Fedexcost': '0' },
    // { 'id': 6, 'itemName': 'High Cost', 'name': 'HC', 'Yrccost': '0', 'Fedexcost': '0' },
    // { 'id': 7, 'itemName': 'Single Shipment', 'name': 'SS', 'Yrccost': '0', 'Fedexcost': '0' },
    // { 'id': 8, 'itemName': 'Delivery Appointment Required', 'name': 'DAR', 'Yrccost': '0', 'Fedexcost': '0' }
    { 'id': 1, 'itemName': 'LiftGate PickUp', 'name': 'LGP', 'Yrccost': '8.80', 'Fedexcost': '72.06' },
    { 'id': 2, 'itemName': 'Residential PickUp', 'name': 'RDP', 'Yrccost': '11', 'Fedexcost': '76' },
    { 'id': 3, 'itemName': 'Limited Access PickUp', 'name': 'LAP', 'Yrccost': '0', 'Fedexcost': '76' },
    { 'id': 4, 'itemName': 'Inside Delivery', 'name': 'ID', 'Yrccost': '11.85', 'Fedexcost': '6.98', 'FedexcostAR': '11.40' },
    { 'id': 5, 'itemName': 'Notify', 'name': 'NTFY', 'Yrccost': '0', 'Fedexcost': '0' },
    { 'id': 6, 'itemName': 'High Cost', 'name': 'HC', 'Yrccost': '0', 'Fedexcost': '0' },
    { 'id': 0, 'itemName': 'Single Shipment', 'name':'SS', 'Yrccost': '0', 'Fedexcost': '0' },
    { 'id': 7, 'itemName': 'Delivery Appointment Required', 'name': 'DAR','Yrccost': '0', 'Fedexcost':'0'},
    {'id':8, 'itemName':'HazMat', 'Yrccost': '0',  'name': 'HT','Fedexcost':'0'},
    { 'id': 10, 'itemName': 'LiftGate Delivery','name': 'LGD', 'Yrccost': '8.80', 'Fedexcost': '72.06' },
    { 'id': 11, 'itemName': 'Residential Delivery', 'name': 'RDD', 'Yrccost': '11', 'Fedexcost': '76' },
    { 'id': 12, 'itemName': 'Limited Access Delivery',  'name': 'LAD','Yrccost': '0', 'Fedexcost': '76' },
  ];
  viewApArAccess:any = [
    { 'name': 'LiftGate PickUp', 'shortname': 'LGP', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Residential Delivery', 'shortname': 'RDD', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Limited Access Delivery', 'shortname': 'LAD', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Inside Delivery', 'shortname': 'ID', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Notify', 'shortname': 'NTFY', 'apCost': 0, 'arCost': 0 },
    { 'name': 'High Cost', 'shortname': 'HC', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Single Shipment', 'shortname': 'SS', 'apCost': 0, 'arCost': 0 },
    { 'name': 'Delivery Appointment Required', 'shortname': 'DAR', 'apCost': 0, 'arCost': '0' },
    { 'name': 'HazMat', 'shortname': 'HT', 'apCost': 0, 'arCost': '0' },
    { 'name': 'LiftGate Delivery', 'shortname': 'LGD', 'apCost': 0, 'arCost': '0' },
    { 'name': 'Residential PickUp', 'shortname': 'RDP', 'apCost': 0, 'arCost': '0' },
    { 'name': 'Limited Access PickUp', 'shortname': 'LAP', 'apCost': 0, 'arCost': '0' },
  ];
  public assessorialNamesRule = ['LiftGate PickUp', 'Residential Delivery', 'Limited Access Delivery',
    'Notify', 'Inside Delivery', 'Single Shipment', 'Delivery Appointment Required', 'HazMat', 'LiftGate Delivery',
    'Residential PickUp','Limited Access PickUp'];
  public westStates = ['AZ', 'CA', 'CO', 'ID', 'MT', 'NV', 'OR', 'UT', 'WA', 'WY', 'EI', 'WI'];
  public eastStates = ['AL', 'AR', 'CT', 'DC', 'DE', 'FL', 'GA', 'IA', 'IL', 'IN', 'KY', 'KS',
    'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'NC', 'ND', 'NE',
    'NJ', 'NY', 'OH', 'OK', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'VA', 'VT', 'WI', 'WV'];
  public states = ['AZ', 'CA', 'CO', 'ID', 'MT', 'NV', 'OR', 'UT', 'WA', 'WY', 'EI', 'WI', 'AL',
    'AR', 'CT', 'DC', 'DE', 'FL', 'GA', 'IA', 'IL', 'IN', 'KY', 'KS',
    'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'NC', 'ND', 'NE',
    'NJ', 'NY', 'NM', 'NH', 'OH', 'OK', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'VA', 'VT', 'WI', 'WV'];
  public reddawayRuleStates = ['AZ', 'CA', 'CO', 'ID', 'MT', 'NV', 'OR', 'UT', 'WA', 'WY'];
  companyDetails: any;
  zipCodeErrorResponseForDestination: any = false;
  zipcodeResponse: any;
  zipcodeResponseDestination: any;
  zipcodeResponseOrigin: any;
  accessToken: any;
  loginDetails: any;
  parseArSetMasterData: any;
  editValue = false;
  fuelSurCharge: any;
  editArValue = false;
  totalFuelChargeArray:any = [];
  selectedAnalyticsCodeData: any;
  totalArChargeArray:any = [];
  socketData: any;
  socket: any;
  socketDataSubscriber: any = Subscription;
  trafficdataFlowSubscription: any = Subscription;
  editAPAcc: any = false;
  editARAcc: any = false;
  socketDataBoolean = false;
  processingLoader = false;
  completedLoader = false;
  apEditValue = false;
  arAccessEditValue = false;
  ApAssessorialsArray:any = [];
  showTableForViewAssessorials = false;
  ArAssessorialsArray:any = [];
  showApCost: any=false;
  showArCost: any = false;
  trafficDataEnable: any;
  trafficDataSavedData: any;
  newValues: any;
  editOption = false;
  enableYrcEdit = false;
  editYrcIndex: any;
  responseLength: any =0;
  fullLength: any;
  selectedValues: any =0;
  updatedValues: any;
  editYrcType: any;
  enableReadOnly = false;
  savinganalyticsCode: any;
  showEditAnalyticsCode = false;
  emptyTable:any = []
  public showFieldsFrom = false;
  public showFieldsTo = false;
  public showFakValues = false;
  public showRulesDetail = false;
  public showFAKTable = false;
  public addNewRuleMode = false;
  public showUseZipCodes = false;
  public showStateFrom = false;
  public showStateTo = false;
  public showDetailTable = false;
  public HideDetailsForEdit = false;
  public showErrorMessageSpecificStateFrom = false;
  public showErrorMessageSpecificStateTo = false;
  public showDiscountErrorMessage = false;
  public enableFakAdd = false;
  public showErrorMessage = false;
  public showErrorMessageToRange = false;
  public showFak = false;
  public directionsArray = ['REGIONAL', 'INTER REGIONAL', 'INTERSTATE', 'INTRASTATE', 'SPECIAL RULES', 'REGIONAL DIRECT INTRASTATE', 'REGIONAL DIRECT INTERSTATE', 'REGIONAL INDIRECT'];
  public showAssessorials = false;
  enableAssessorialAdd = false;
  showRule = false;
  applyRuleValue = false;
  assessorialArrayRule:any = [];
  finalAssessorial:any = [];
  public fakData:any;
  public showErrorMessageOnAddRules = false;
  public showErrorMessageOnSameRule = false;
  public getZipcodeValues:any;
  ruleAppliedArray:any = [];
  data :any= [];
  companyResponse: any;
  beforefinalArray:any = [];
  differenceValue = 0;
  showAddRule = false;
  rulesForBusiness:any = [];
  editMode = false;
  editRuleIndex: any;
  temporaryArray:any = [];
  temporaryArray1:any = [];
  filteredRulesArray:any = [];
  companyRulesArray:any = [];
  viewFakArray:any = [];
  showViewFAKValues = false;
  filteredLength: any =0;
  enabletempId:any = [];
  yrcFormValues: any;
  fedexEconomyValues: any;
  fedexPriorityValues: any;
  reddawayValues: any;
  exportInboundArray:any = [];
  exportOutboundArray:any = [];
  exportThirdPartyArray:any = [];
  selectAllValue: any;
  serviceNotAvailableArray:any = [];
  showContract = false;
showCreateContract = false;
fxfeApArray:any = [];
fxfeArArray:any = [];
fxfpApArray:any = [];
fxfpArArray:any = [];
yrcApArray:any = [];
yrcArArray:any = [];
reddawayApArray:any = [];
reddawayArArray:any = [];
fedexRowspan = 0;
priorityrowspan = 0;
yrcrowspan = 0;
reddawayrowspan = 0;
  existingCompanyRules:any = [];
  existingRulesChanged:any = [];
  editAPIndex: any;
  editARIndex: any;
  editableArDiscountValue: any;
  territoryArray:any = [];
  additionalPricingArray:any = [];
  contractAccessorialsArray:any = [];
  specialRulesAccessorialArray: any;
  showSecondAddress = false;
  showFirstAddress = false;
  displayShipmentName: any;
  shippingManagerName: any;
  billtoAddress : any = '';
  stringvalue: any = [];
  shippingManagerPost: any;
  firstDate: any;
  secondDate: any;
  showeditContract = true;
  contractAddrss: any;
  passingArray:any;
  costplusFactor = '';
  costplusToggle = false;
  costplusValueEnabled = false; 
  yrcCostplusFactor = '';
  costplusArray: any =[];
  editAPAMC = false;
  editARAMC = false;
  selectedCarrier:any;
  initialYRCApAMC: any;
  initialYRCArAMC: any;
  initialYRCApDiscount: any;
  initialEconomyApAMC: any = 0;
  initialEconomyArAMC:any =0;
  initialEconomyApDiscount:any = 0;
  initialEconomyArDiscount:any = 0;
  initialPriorityApAMC:any = 0;
  initialPriorityArAMC:any =0;
  initialPriorityApDiscount:any =0;
  initialPriorityArDiscouunt:any =0;
  initialReddawayApAMC:any = 0;
  initialReddawayArAMC:any =0;
  initialReddawayApDiscount:any =0;
  initailReddawayArDiscount:any=0;
  billadd1: any;
  billadd2: any;
  billadd3: any;
  billadd4: any;
  constructor(private router: Router,
    private route: ActivatedRoute,
    private invoiceService: InvoiceService,
    private fb: FormBuilder,
    private toastr: ToastrService,
    private datePipe: DatePipe,
    private pricingInfoService: PricingInfoService,
    private chat: ChatService,
    private wsService: WebSocketService,
    private spinner: NgxSpinnerService,
    private excelService: ExcelService,
    private customerService: CustomerService) {
    // this.invoiceDetails = this.invoiceService.getInvoiceDetails();
    this.companyInformation = this.invoiceService.getCompanyInformation1();
    this.accessorialFormAP = this.accessorialFormbuild();
    this.accessorialFormAR = this.accessorialFormbuild();
    console.log('Constructor');
    console.log(this.companyInformation);

  }
  ngOnInit() {
    console.log('Ngonit');
    window.scroll(0, 0);
    // // let notes = "Carrier:yrc↵type:534534↵Additional: ap:25,↵wefert↵";
    // // let newValueNote ;
    // // if (notes.includes('↵')) {
    // //   // let splitted = notes.split()
    // //   newValueNote = notes.replace(/↵/g, '\n');
    // //   console.log(newValueNote);
    // // }
    this.notesEnter = '';
    // console.log(this.notesEnter);
    this.selectAllValue = true;
    this.accessToken = localStorage.getItem('accessToken');
    let details:any = localStorage.getItem(('SalesRepName'));
    this.loginDetails = JSON.parse(details);
    console.log('this.loginDetails', this.loginDetails);
    this.buildForm();
    this.buildRuleForm();
    this.getCompanyExistingRules();
    

    if (this.loginDetails.type === 'administrator') {
      this.showContract = false;
      this.showCreateContract = true;
    } else {
      this.showContract = false;
            this.showCreateContract = false;

    }
    this.socketDataSubscriber = this.invoiceService.socketdataObservable.subscribe((res:any) => {
      this.socketData = res;
    });
    console.log('socketdata', this.socketData);
    this.trafficDataSubscriber = this.invoiceService.trafficDataObservable.subscribe((response) => {
      this.trafficDataEnable = response;
      console.log(this.trafficDataEnable);
      // this.invoiceService.trafficDataEnableSubject.unsubscribe();
    });



    if (this.socketData !== undefined && this.socketData !== null && this.socketData !== '') {
      console.log('SockeT On');
      // this.invoiceInformation();
    } else {
      this.fetchCompanyInvoice();
    }

    // //  this.invoiceDetails = null;
    // this.invoiceInformation();
    setTimeout(() => {
      $('#APAmc').focus();
    }, 1000);
    
  }

  buildRuleForm() {
    this.ruleForm = this.fb.group({
      carrierType: ['', Validators.required],
      category: ['', Validators.required],
      directions: ['', Validators.required],
      specificZipFlag: ['', Validators.required],
      fromCityState: ['', Validators.required],
      toCityState: ['', Validators.required],
      minimumCharge: ['', Validators.required],
      assessorialName: ['', Validators.required],
      charge: ['', Validators.required],
      discount: ['', Validators.required],
      presentFakValue: ['', Validators.required],
      fakRangeFrom: ['', Validators.required],
      fakRangeTo: ['', Validators.required],
      fakValue: ['', Validators.required],
      specialRule: ['', Validators.required],

    })
  }
  getBusisnessRule() {
    this.router.navigate(['/promoteRule']);
  }
  checkForAssessorials(name:any, charge:any) {
    if (name !== '' && charge !== '') {
      this.enableAssessorialAdd = true;
    } else {
      this.enableAssessorialAdd = false;
    }
  }

  chooseDirections(direction:any, form:any) {
    console.log('directions', direction, form);
    // this.finalDirections = [];
    if (direction === 'SPECIAL RULES') {
      this.finalDirections.push(direction);
      this.showFieldsFrom = true;
      this.showFieldsTo = true;
      this.showUseZipCodes = false;
      this.ruleForm.patchValue({ specialRule: 'true' });
      this.ruleForm.patchValue({ specificZipFlag: 'false' });
    } else if (direction === 'INTRASTATE') {
      this.finalDirections.push(direction);
      this.showFieldsFrom = true;
      this.showFieldsTo = false;
      this.showStateFrom = false;
      this.showUseZipCodes = false;
      this.ruleForm.patchValue({ specialRule: 'true' });
      this.ruleForm.patchValue({ specificZipFlag: 'true' });
    } else if (form.carrierType === 'REDDAWAY' && direction === 'REGIONAL DIRECT INTRASTATE') {
      console.log('form1');
      this.finalDirections.push(direction);
      this.showUseZipCodes = true;
      this.ruleForm.patchValue({ specialRule: 'false' });
    } else if (form.carrierType === 'REDDAWAY' && direction === 'REGIONAL DIRECT INTERSTATE') {
      console.log('form2');
      this.finalDirections.push(direction);
      this.showUseZipCodes = true;
      this.ruleForm.patchValue({ specialRule: 'false' });
    } else {
      this.finalDirections.push(direction);
      console.log('directions', this.finalDirections);
      this.showFieldsFrom = false;
      this.showFieldsTo = false;
      this.showUseZipCodes = false;
      this.ruleForm.patchValue({ specialRule: 'false' });
      this.ruleForm.patchValue({ specificZipFlag: 'false' });
    }
  }
  addAssessorials(customerForm:any) {
    const value = customerForm;
    const assessorials = { assessorialName: value.assessorialName, charge: value.charge };
    this.assessorialArrayRule.push(assessorials);
    console.log('this.add ', this.assessorialArray);
    this.showAssessorials = true;
    this.ruleForm.patchValue({ assessorialName: '', charge: '' });
  }

  checkUseZipCodes(flag:any, form:any) {
    console.log('1223', flag, form);
    if (flag === 'true' && form.directions === 'REGIONAL DIRECT INTRASTATE') {
      console.log('122345');
      this.showFieldsFrom = true;
      this.showFieldsTo = false;
    } else if (flag === 'true' && form.directions === 'REGIONAL DIRECT INTERSTATE') {
      console.log('1223456');
      this.showFieldsFrom = true;
      this.showFieldsTo = true;
    } else {
      console.log('1223456 else');
      this.showFieldsFrom = false;
      this.showFieldsTo = false;
    }
  }

  checkDiscount(discount:any) {
    if (discount > 100) {
      this.showDiscountErrorMessage = true;
      this.ruleForm.patchValue({ discount: '' });
    } else {
      this.showDiscountErrorMessage = false;
    }
  }

  checkFak(fakValues:any) {
    if (fakValues.value === 'Yes') {
      this.enableFakAdd = false;
      this.showFakValues = true;
      this.showErrorMessage = false;
      this.showErrorMessageToRange = false;
    } else if (fakValues.value === 'No') {
      this.showFakValues = false;
    } else {
      this.showFakValues = false;
      this.showFak = false;
    }


  }
  checkFakRangeFrom(fromRange:any) {
    this.resultArray = [];
    if (this.fakArray.length > 0) {
      for (let f = 0; f < this.fakArray.length; f++) {
        if (this.fakArray[f].fakRangeTo !== '') {
          if (Number(fromRange) >= Number(this.fakArray[f].fakRangeFrom) && Number(fromRange) <= Number(this.fakArray[f].fakRangeTo)) {
            this.showErrorMessage = true;
            break;
          } else {
            this.showErrorMessage = false;
          }
        } if (this.fakArray[f].fakRangeTo === '') {
          if (fromRange >= this.fakArray[f].fakRangeFrom) {
            this.showErrorMessage = true;
          } else {
            this.showErrorMessage = false;
          }
        }
      }
    }
    this.resultArray = this.classArray.filter(array => array > fromRange);
  }

  checkFakValues(from:any, to:any, value:any) {
    if (from !== '' && to === '' && value !== '') {
      this.enableFakAdd = true;
    } else if (from !== '' && value !== '' && to === '') {
      this.enableFakAdd = true;
    } else if (from === '' && to === '' && value === '') {
      this.enableFakAdd = false;
    } else if (from === '' && to === '' && value !== '') {
      this.enableFakAdd = false;
    } else if (from !== '' && to !== '' && value !== '') {
      this.enableFakAdd = true;
    } else {
      this.enableFakAdd = false;
    }
  }

  fakAdd(customerForm:any) {
    const value = customerForm;
    this.fakData = { fakRangeFrom: value.fakRangeFrom, fakRangeTo: value.fakRangeTo, fakValue: value.fakValue };
    this.fakArray.push(this.fakData);
    if (this.fakArray.length > 0) {
      this.showFAKTable = true;
      this.enableFakAdd = false;
    } else {
      this.showFAKTable = false;
    }
    this.resultArray = [];
    this.ruleForm.patchValue({ fakRangeFrom: '', fakRangeTo: '', fakValue: '' });
  }

  checkFakRangeTo(toRange:any) {
    if (this.fakArray.length > 0) {
      for (let f = 0; f < this.fakArray.length; f++) {
        if (this.fakArray[f].fakRangeTo !== '') {
          if (Number(toRange) === Number(this.fakArray[f].fakRangeFrom) &&
            Number(toRange) === Number(this.fakArray[f].fakRangeTo)) {
            this.showErrorMessageToRange = true;
            break;
          } else {
            this.showErrorMessageToRange = false;
          }
          if (Number(toRange) >= Number(this.fakArray[f].fakRangeFrom) &&
            Number(toRange) <= Number(this.fakArray[f].fakRangeTo)) {
            this.showErrorMessageToRange = true;
            break;
          } else {
            this.showErrorMessageToRange = false;
          }
        } if (this.fakArray[f].fakRangeTo === '') {
          if (Number(toRange) === Number(this.fakArray[f].fakRangeFrom)) {
            this.showErrorMessageToRange = true;
          } else {
            this.showErrorMessageToRange = false;
          }
        }
      }
    }
  }
  deleteFakValue(fakArray:any, index:any) {
    this.fakArray.splice(index, 1);
    if (this.fakArray.length === 0) {
      this.showFakValues = false;
      this.showFAKTable = false;
      this.ruleForm.patchValue({ presentFakValue: 'No' });
      this.showErrorMessage = true;
    } else {
      this.showFAKTable = true;
    }
  }



  getValidTimeZone(date:any) {
    if (date !== undefined) {
      if (date.toString().endsWith('Z')) {
        return new Date(date.trim().split('Z')[0]);
      } else {
        return date;
      }
    }
  }
  editItemArray(value:any, index:any,id:any, type:any) {
    // this.workbookForm.patchValue({
      this.showEdit = true;
    this.editYrcIndex = index;
    if (type === 'outbound') {
      for (let i = 0; i < this.outboundArray.length; i++) {
        this.outboundArray[index].showEdit = true;
        this.outboundArray[index].showEditInput = true;

        if (this.invoiceDetails['carrier'] === 'YRC') {
          this.outboundArray[index].yrcshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
          this.outboundArray[index].economyshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
          this.outboundArray[index].priorityshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
          this.outboundArray[index].reddawayshowEdit = true;
        }
      }
      console.log(this.outboundArray);
    } else if (type === 'inbound') {
      for (let i = 0; i < this.inboundArray.length; i++) {
        this.inboundArray[index].showEdit = true;
        this.inboundArray[index].showEditInput = true;

        if (this.invoiceDetails['carrier'] === 'YRC') {
          this.inboundArray[index].yrcshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
          this.inboundArray[index].economyshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
          this.inboundArray[index].priorityshowEdit = true;
        } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
          this.inboundArray[index].reddawayshowEdit = true;
        }
      }
      console.log(this.inboundArray);
    } else if (type === 'thirdparty') {
      // for (let i = 0; i < this.thirdPartyArray.length; i++) {
        this.thirdPartyArray.forEach((ele:any,ind:any) => {
          if (ind === this.editYrcIndex) {
  this.thirdPartyArray[ind].showEdit = true;
        this.thirdPartyArray[ind].showEditInput = true;
          } else {
              this.thirdPartyArray[ind].showEdit = false;
        this.thirdPartyArray[ind].showEditInput = false;
          }

        //     if (this.invoiceDetails['carrier'] === 'YRC') {
        //   this.thirdPartyArray[this.editYrcIndex].yrcshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
        //   this.thirdPartyArray[this.editYrcIndex].economyshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
        //   this.thirdPartyArray[this.editYrcIndex].priorityshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        //   this.thirdPartyArray[this.editYrcIndex].reddawayshowEdit = true;
        // } 
        
        })
        // this.thirdPartyArray[index].showEdit = true;
        // this.thirdPartyArray[index].showEditInput = true;

        // if (this.invoiceDetails['carrier'] === 'YRC') {
        //   this.thirdPartyArray[index].yrcshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
        //   this.thirdPartyArray[index].economyshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
        //   this.thirdPartyArray[index].priorityshowEdit = true;
        // } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        //   this.thirdPartyArray[index].reddawayshowEdit = true;
        // }
      // }
      console.log(this.thirdPartyArray);
    }

    // if (type === 'thirdparty') {
    //   this.thirdPartyArray[index].showEdit = true;
    //   // this.thirdPartyArray[index].editedDiscounted =true;
    //   this.editableArDiscountValue = value.finalARDiscount;
    // } else if (type === 'inbound') {
    //   this.inboundArray[index].showEdit = true;
    //   // this.thirdPartyArray[index].editedDiscounted =true;
      // this.editableArDiscountValue = value.finalARDiscount;
    // } else if (type === 'outbound') {
    //   this.outboundArray[index].showEdit = true;
    // }

    // this.enableYrcEdit = true;
    // this.editYrcType = type;
    // this.editworkbookForm.patchValue({
    //   carrier: this.invoiceDetails['carrier'],
    //   apDiscount: value.finalAPDiscount,
    //   arDiscount: value.finalARDiscount,
    //   typeOfInvoice: value.typeOfInvoice
    //   // });
    // });
    this.editableArDiscountValue = ''
    console.log('before');
    setTimeout(() => {
      console.log('after')
      $('#editARDiscount').focus();

    }, 1000);


  }

  editDiscountByRow(event:any, id:any, i:any, type:any, invoice:any) {
    console.log(event, id, i, type, invoice);
    console.log(this.editableArDiscountValue);
    // if (event.keyCode === 13) {
    // setTimeout(() => {
    if (type === 'thirdparty') {
      if (this.editableArDiscountValue !== '') {

        this.thirdPartyArray[i].finalARDiscount = this.editableArDiscountValue;
        this.thirdPartyArray[i].showEditInput = false;

        this.invoiceDetails['values'].forEach((res:any, index:any) => {
          if (res.id === id) {
            if (this.invoiceDetails['carrier'] === 'YRC') {
              res.yrcchangedArDiscount = this.editableArDiscountValue;
              res.yrcshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
              res.ecochangedArDiscount = this.editableArDiscountValue;
              res.economyshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
              res.prichangedArDiscount = this.editableArDiscountValue;
              res.priorityshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
              res.redchangedArDiscount = this.editableArDiscountValue;
              res.reddawayshowEdit = true;
            }
            res.showEdit = false;
            //  if (this.invoiceDetails['carrier']=== 'YRC') {
            res.editedDiscounted = true;

            //  }
            //  res.editedDiscounted =true;
          }
          if (index === this.invoiceDetails['values'].length - 1) {

            this.tableVables();
          }
        });
      } else {
        this.thirdPartyArray[i].showEditInput = false;
        this.thirdPartyArray[i].showEdit = false
        this.tableVables();

      }
      console.log(this.invoiceDetails['values']);

    } else if (type === 'inbound') {
      if (this.editableArDiscountValue !== '') {

        this.inboundArray[i].finalARDiscount = this.editableArDiscountValue;
        this.inboundArray[i].showEditInput = false;

        this.invoiceDetails['values'].forEach((res:any, index:any) => {
          if (res.id === id) {
            if (this.invoiceDetails['carrier'] === 'YRC') {
              res.yrcchangedArDiscount = this.editableArDiscountValue;
              res.yrcshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
              res.ecochangedArDiscount = this.editableArDiscountValue;
              res.economyshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
              res.prichangedArDiscount = this.editableArDiscountValue;
              res.priorityshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
              res.redchangedArDiscount = this.editableArDiscountValue;
              res.reddawayshowEdit = true;
            }
            res.showEdit = false;
            res.editedDiscounted = true;
          }
          if (index === this.invoiceDetails['values'].length - 1) {
            this.tableVables();
          }
        });
      } else {
        this.inboundArray[i].showEditInput = false;
        this.inboundArray[i].showEdit = false;
        this.tableVables();

      }
      console.log(this.invoiceDetails['values']);

    } else if (type === 'outbound') {
      if (this.editableArDiscountValue !== '') {

        this.outboundArray[i].finalARDiscount = this.editableArDiscountValue;
        this.outboundArray[i].showEditInput = false;

        this.invoiceDetails['values'].forEach((res:any, index:any) => {
          if (res.id === id) {
            if (this.invoiceDetails['carrier'] === 'YRC') {
              res.yrcchangedArDiscount = this.editableArDiscountValue;
              res.yrcshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
              res.ecochangedArDiscount = this.editableArDiscountValue;
              res.economyshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
              res.prichangedArDiscount = this.editableArDiscountValue;
              res.priorityshowEdit = true;
            } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
              res.redchangedArDiscount = this.editableArDiscountValue;
              res.reddawayshowEdit = true;
            }
            res.showEdit = false;
            res.editedDiscounted = true;
          }
          if (index === this.invoiceDetails['values'].length - 1) {
            this.tableVables();
          }
        });
      } else {
        this.outboundArray[i].showEditInput = false;
        this.outboundArray[i].showEdit = false;
        this.tableVables();


      }
      console.log(this.invoiceDetails['values']);

    }
    // }, 5000);

    // }


  }

  editDiscountByRow1(event:any, id:any, i:any, type:any, invoice:any) {
    console.log(event, id, i, type, invoice);
    if (event.keyCode === 13 || event.keyCode === 40 || event.keyCode === 38) {
      // setTimeout(() => {

        if (type === 'thirdparty') {
          if (this.editableArDiscountValue !== '') {
    
            this.thirdPartyArray[i].finalARDiscount = this.editableArDiscountValue;
            this.thirdPartyArray[i].showEditInput = false;
    
            this.invoiceDetails['values'].forEach((res:any, index:any) => {
              if (res.id === id) {
                if (this.invoiceDetails['carrier'] === 'YRC') {
                  res.yrcchangedArDiscount = this.editableArDiscountValue;
                  res.yrcshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
                  res.ecochangedArDiscount = this.editableArDiscountValue;
                  res.economyshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
                  res.prichangedArDiscount = this.editableArDiscountValue;
                  res.priorityshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                  res.redchangedArDiscount = this.editableArDiscountValue;
                  res.reddawayshowEdit = true;
                }
                res.showEdit = false;
                //  if (this.invoiceDetails['carrier']=== 'YRC') {
                res.editedDiscounted = true;
    
                //  }
                //  res.editedDiscounted =true;
              }
              if (index === this.invoiceDetails['values'].length - 1) {
    
                this.tableVables();
              }
            });
          } else {
            this.thirdPartyArray[i].showEditInput = false;
            this.thirdPartyArray[i].showEdit = false
            this.tableVables();
    
          }
          console.log(this.invoiceDetails['values']);
    
        } else if (type === 'inbound') {
          if (this.editableArDiscountValue !== '') {
    
            this.inboundArray[i].finalARDiscount = this.editableArDiscountValue;
            this.inboundArray[i].showEditInput = false;
    
            this.invoiceDetails['values'].forEach((res:any, index:any) => {
              if (res.id === id) {
                if (this.invoiceDetails['carrier'] === 'YRC') {
                  res.yrcchangedArDiscount = this.editableArDiscountValue;
                  res.yrcshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
                  res.ecochangedArDiscount = this.editableArDiscountValue;
                  res.economyshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
                  res.prichangedArDiscount = this.editableArDiscountValue;
                  res.priorityshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                  res.redchangedArDiscount = this.editableArDiscountValue;
                  res.reddawayshowEdit = true;
                }
                res.showEdit = false;
                res.editedDiscounted = true;
              }
              if (index === this.invoiceDetails['values'].length - 1) {
                this.tableVables();
              }
            });
          } else {
            this.inboundArray[i].showEditInput = false;
            this.inboundArray[i].showEdit = false;
            this.tableVables();
    
          }
          console.log(this.invoiceDetails['values']);
    
        } else if (type === 'outbound') {
          if (this.editableArDiscountValue !== '') {
    
            this.outboundArray[i].finalARDiscount = this.editableArDiscountValue;
            this.outboundArray[i].showEditInput = false;
    
            this.invoiceDetails['values'].forEach((res:any, index:any) => {
              if (res.id === id) {
                if (this.invoiceDetails['carrier'] === 'YRC') {
                  res.yrcchangedArDiscount = this.editableArDiscountValue;
                  res.yrcshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
                  res.ecochangedArDiscount = this.editableArDiscountValue;
                  res.economyshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
                  res.prichangedArDiscount = this.editableArDiscountValue;
                  res.priorityshowEdit = true;
                } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                  res.redchangedArDiscount = this.editableArDiscountValue;
                  res.reddawayshowEdit = true;
                }
                res.showEdit = false;
                res.editedDiscounted = true;
              }
              if (index === this.invoiceDetails['values'].length - 1) {
                this.tableVables();
              }
            });
          } else {
            this.outboundArray[i].showEditInput = false;
            this.outboundArray[i].showEdit = false;
            this.tableVables();
    
    
          }
          console.log(this.invoiceDetails['values']);
    
        }
      // }, 5000);

    }


  }
  accessorialFormbuild() {
    return this.fb.group({
      accessorials: [''],
      cost: [''],
      min: [''],
      max: ['']
    });
  }

  fetchCompanyInvoice() {
    if (this.companyInformation !== null && this.companyInformation !== undefined) {

      this.selectedAnalyticsCodeData = this.invoiceService.getSelectedAnalyticsCode();
      console.log('this.itemArray If', this.selectedAnalyticsCodeData);
      this.getCompanyRules();     
      const setApMasterData:any = localStorage.getItem('aptableData');
      this.parseSetMasterData = JSON.parse(setApMasterData);
      const setArMasterData:any = localStorage.getItem('artableData');
      this.parseArSetMasterData = JSON.parse(setArMasterData);
      if (this.selectedAnalyticsCodeData !== undefined && this.selectedAnalyticsCodeData.filterValue !== '') {
        // this.loader = true;
        this.getRules1();
        this.trafficdataFlowSubscription = this.invoiceService.trafficDataEnableObservable.subscribe((response) => {
          this.trafficDataSavedData = response;
          console.log('traffic', this.trafficDataSavedData);
          this.trafficDataSavedData.carrier = this.selectedAnalyticsCodeData.carrierValue;

        });
        this.invoiceService.getSelectedCodeInvoice(this.selectedAnalyticsCodeData).subscribe((res:any) => {
          console.log(res);
        });
        if (this.trafficDataSavedData.carrier === 'FXFP' || this.trafficDataSavedData.carrier === 'FEDEX_FREIGHT_PRIORITY') {
          this.invoiceDetails['carrier'] = 'FEDEX PRIORITY';

        } else if (this.trafficDataSavedData.carrier === 'FXFE' || this.trafficDataSavedData.carrier === 'FEDEX_FREIGHT_ECONOMY') {
          this.invoiceDetails['carrier'] = 'FEDEX ECONOMY';
        } else if (this.trafficDataSavedData.carrier === 'YRC') {
          this.invoiceDetails['carrier'] = 'YRC';
        } else if (this.trafficDataSavedData.carrier === 'REDDAWAY') {
          this.invoiceDetails['carrier'] = 'REDDAWAY';
        }

        this.invoiceDetails['values'] = this.trafficDataSavedData.values;
        // this.loader = false;

        console.log('this.invoiceDetails', this.invoiceDetails);
 
        if (this.invoiceDetails['values'].length > 0) {
          for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
            // let object = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
            // console.log('objrcy', object.yrcAp);
            // console.log('objrcy1', object);

            // this.invoiceDetails['values'][i].rateResponse = object;
            // if (object.yrcAp === undefined) {
              let x:any;
              this.pricingInfoService.getCityState(this.invoiceDetails['values'][i].originZip).subscribe(response => {
                x = response;
                if (x.length > 0) {
                  console.log('1',x)
                  this.invoiceDetails['values'][i].originCity =  x[0].city;
  
                 
                }
              });
            // }
            // if (element.destinationCity === undefined) {
              let y:any;
            this.pricingInfoService.getCityState(this.invoiceDetails['values'][i].destinationZip).subscribe(response => {
              y = response;
              if (y.length > 0) {
                console.log('2',y)
  
                this.invoiceDetails['values'][i].destinationCity =  y[0].city
               
              }
            });
            console.log('jefrin', x, y);
            this.invoiceDetails['values'][i].notes = this.selectedAnalyticsCodeData.notes;
            this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
            if (this.selectedAnalyticsCodeData.costPlus !== null &&  this.selectedAnalyticsCodeData.costPlus !== undefined) {
              this.costplusValueEnabled = true;
              // this.costplusToggle = true;
              this.selectedAnalyticsCodeData.costPlus.forEach((dat:any) => {
                if (dat.carrier === 'YRC') {
                  this.invoiceDetails['values'][i].yrcCostplusFactor = dat.factor;
                  this.costplusFactor = this.invoiceDetails['values'][i].yrcCostplusFactor

                }
                if (dat.carrier === 'REDDAWAY') {
                  this.invoiceDetails['values'][i].reddawayCostplusFactor = dat.factor;
                  this.costplusFactor = this.invoiceDetails['values'][i].reddawayCostplusFactor
                }
                if (dat.carrier === 'FEDEX PRIORITY') {
                  this.invoiceDetails['values'][i].priorityCostplusFactor = dat.factor;
                  this.costplusFactor = this.invoiceDetails['values'][i].priorityCostplusFactor
                }
                if (dat.carrier === 'FEDEX ECONOMY') {
                  this.invoiceDetails['values'][i].economyCostplusFactor = dat.factor;
                  this.costplusFactor = this.invoiceDetails['values'][i].economyCostplusFactor
                }
                if (this.selectedAnalyticsCodeData.carrierValue === 'YRC') {
                  this.costplusFactor = this.invoiceDetails['values'][i].yrcCostplusFactor
                } else if (this.selectedAnalyticsCodeData.carrierValue === 'REDDAWAY') {
                  this.costplusFactor = this.invoiceDetails['values'][i].reddawayCostplusFactor
                } else if (this.selectedAnalyticsCodeData.carrierValue === 'FEDEX PRIORITY') {
                  this.costplusFactor = this.invoiceDetails['values'][i].priorityCostplusFactor
                } else if (this.selectedAnalyticsCodeData.carrierValue === 'FEDEX ECONOMY') {
                  this.costplusFactor = this.invoiceDetails['values'][i].economyCostplusFactor
                }
              });
              console.log(this.costplusFactor);
              if (this.costplusFactor !== undefined && this.costplusFactor !== '' && this.costplusFactor !== null) {
                   this.costplusToggle = true;
              } else {
                this.costplusToggle = false;
              }
            } else {
              console.log('company', this.companyInformation);
              if (this.companyInformation.costPlus === true) {
                this.companyInformation.costPlusFactor.forEach((dat:any) =>{

              if (dat.carrier === 'YRC') {
                this.invoiceDetails['values'][i].yrcCostplusFactor = dat.factor;
                this.costplusFactor = this.invoiceDetails['values'][i].yrcCostplusFactor

              }
              if (dat.carrier === 'REDDAWAY') {
                this.invoiceDetails['values'][i].reddawayCostplusFactor = dat.factor;
                this.costplusFactor = this.invoiceDetails['values'][i].reddawayCostplusFactor
              }
              if (dat.carrier === 'FEDEX PRIORITY') {
                this.invoiceDetails['values'][i].priorityCostplusFactor = dat.factor;
                this.costplusFactor = this.invoiceDetails['values'][i].priorityCostplusFactor
              }
              if (dat.carrier === 'FEDEX ECONOMY') {
                this.invoiceDetails['values'][i].economyCostplusFactor = dat.factor;
                this.costplusFactor = this.invoiceDetails['values'][i].economyCostplusFactor
              }               
          })
        }
            }
            let parsedRules; 
            // = JSON.parse(this.invoiceDetails['values'][i].rules);

            if (typeof this.invoiceDetails['values'][i].rules === 'string') {
              parsedRules = JSON.parse(this.invoiceDetails['values'][i].rules);
            } else {
              parsedRules = this.invoiceDetails['values'][i].rules
            }
            console.log('parsed', parsedRules);
            const ruleValue = this.invoiceDetails['values'][i];
            if (parsedRules.yrcRules !== undefined) {
              this.invoiceDetails['values'][i].yrcRules = parsedRules.yrcRules;
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].yrcRules
            }  else {
              this.invoiceDetails['values'][i].yrcRules = {'ap':[],'ar':[]};
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].yrcRules
            }
            if (parsedRules.economyRules !== undefined) {
              this.invoiceDetails['values'][i].economyRules = parsedRules.economyRules
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].economyRules

            } else {
              this.invoiceDetails['values'][i].economyRules = {'ap':[],'ar':[]};
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].economyRules
            }
            if (parsedRules.priorityRules !== undefined) {
              this.invoiceDetails['values'][i].priorityRules = parsedRules.priorityRules;
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].priorityRules

            } else {
              this.invoiceDetails['values'][i].priorityRules = {'ap':[],'ar':[]};
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].priorityRules
            }
            if (parsedRules.reddawayRules !== undefined) {
              this.invoiceDetails['values'][i].reddawayRules = parsedRules.reddawayRules;
              this.invoiceDetails['values'][i].rules = this.invoiceDetails['values'][i].reddawayRules

            }
            if (this.invoiceDetails['values'][i].rateResponse.yrcAp === undefined && this.invoiceDetails['values'][i].rateResponse.fedexEcoAp === undefined &&
              this.invoiceDetails['values'][i].rateResponse.fedexPriAp === undefined && this.invoiceDetails['values'][i].rateResponse.reddawayAp === undefined) {
              this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);

            }
            if (typeof this.invoiceDetails['values'][i].forteResponse === 'string') {
              this.invoiceDetails['values'][i].forteResponse = JSON.parse(this.invoiceDetails['values'][i].forteResponse);
            }
            this.invoiceDetails['values'][i].yrcRate = this.invoiceDetails['values'][i].forteResponse.yrcRate;
            this.invoiceDetails['values'][i].fxfpRate = this.invoiceDetails['values'][i].forteResponse.fxfpRate;
            this.invoiceDetails['values'][i].fxfeRate = this.invoiceDetails['values'][i].forteResponse.fxfeRate;
            this.invoiceDetails['values'][i].reddawayRate = this.invoiceDetails['values'][i].forteResponse.reddawayRate;
            this.invoiceDetails['values'][i].yrcSelected = this.invoiceDetails['values'][i].forteResponse.yrcSelected;
            this.invoiceDetails['values'][i].prioritySelected = this.invoiceDetails['values'][i].forteResponse.prioritySelected;
            this.invoiceDetails['values'][i].economySelected = this.invoiceDetails['values'][i].forteResponse.economySelected;
            this.invoiceDetails['values'][i].reddawaySelected = this.invoiceDetails['values'][i].forteResponse.reddawaySelected;

            if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
              this.invoiceDetails['values'][i].fxfpRate = this.invoiceDetails['values'][i].forteResponse.fxfpRate;
              this.invoiceDetails['values'][i].isPriority = this.invoiceDetails['values'][i].selected;
this.fedexPriorityValues = this.invoiceDetails['values'][i].fxfpRate
              console.log('this.invoiceDetails', this.invoiceDetails['values'][i].fxfpRate);
              if (this.fedexPriorityValues === undefined) {
                // this.apData = this.yrcFormValues.yrcaparray
                // this.arData = this.yrcFormValues.yrcararray
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === "FEDEX PRIORITY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === "FEDEX PRIORITY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else {
              if (this.fedexPriorityValues.priaparray !== undefined && this.fedexPriorityValues.priararray !== undefined) {
                 this.apData = this.fedexPriorityValues.priaparray
                this.arData = this.fedexPriorityValues.priararray 
                } else {
                  this.parseSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                    if (data.companyName === "FEDEX PRIORITY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.apData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  });
                  this.parseArSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                    if (data.companyName === "FEDEX PRIORITY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.arData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  })
        
                  // this.apData.forEach((acc:any) => {
                  //   if(acc.name === this.yrcFormValues.apAssessorialName) {
                  //     acc.cost = this.yrcFormValues.apCost;
                  //     acc.min = this.yrcFormValues.apMin;
                  //     acc.max = this.yrcFormValues.apMax;
                  //   }
                  // });
                }
           

                console.log('Ap Assesss', this.apData)

              }
              this.invoiceDetails['values'][i].fedexPriAccessApArray = this.apData;
              this.invoiceDetails['values'][i].fedexPriAccessArArray = this.arData;

            }
            // if (this.invoiceDetails['values'][i].fxfpRate !== null) {
            //   console.log('this.invoiceDetails', this.invoiceDetails['values'][i]);
            //   this.invoiceDetails['values'][i].fxfpRate = JSON.parse(this.invoiceDetails['values'][i].fxfpRate);
            //   console.log('this.invoiceDetails', this.invoiceDetails['values'][i].fxfpRate);

            // }


            if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
              this.invoiceDetails['values'][i].fxfeRate = this.invoiceDetails['values'][i].forteResponse.fxfeRate;
              this.invoiceDetails['values'][i].isEconomy = this.invoiceDetails['values'][i].selected;
              this.fedexEconomyValues = this.invoiceDetails['values'][i].fxfeRate
 if (this.fedexEconomyValues === undefined) {
                // this.apData = this.yrcFormValues.yrcaparray
                // this.arData = this.yrcFormValues.yrcararray
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === "FEDEX ECONOMY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === "FEDEX ECONOMY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else {
                this.editApAccess =  this.fedexEconomyValues.apAccess;
                this.editArAccess = this.fedexEconomyValues.arAccess;
              if (this.fedexEconomyValues.ecoaparray !== undefined && this.fedexEconomyValues.ecoararray !== undefined) {
                 this.apData = this.fedexEconomyValues.ecoaparray
                this.arData = this.fedexEconomyValues.ecoararray 
                } else {
                  this.parseSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                    if (data.companyName === "FEDEX ECONOMY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.apData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  });
                  this.parseArSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                    if (data.companyName === "FEDEX ECONOMY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.arData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  })
        
                  // this.apData.forEach((acc:any) => {
                  //   if(acc.name === this.yrcFormValues.apAssessorialName) {
                  //     acc.cost = this.yrcFormValues.apCost;
                  //     acc.min = this.yrcFormValues.apMin;
                  //     acc.max = this.yrcFormValues.apMax;
                  //   }
                  // });
                }
           

                console.log('Ap Assesss', this.apData)

              }
              this.invoiceDetails['values'][i].fedexEcoAccessApArray = this.apData;
              this.invoiceDetails['values'][i].fedexEcoAccessArArray = this.arData;
            }
            if (this.invoiceDetails['carrier'] === 'YRC') {
              this.invoiceDetails['values'][i].yrcRate = this.invoiceDetails['values'][i].forteResponse.yrcRate;
              this.invoiceDetails['values'][i].isYrc = this.invoiceDetails['values'][i].selected;
              this.yrcFormValues = this.invoiceDetails['values'][i].yrcRate;
              if (this.yrcFormValues === undefined) {
                // this.apData = this.yrcFormValues.yrcaparray
                // this.arData = this.yrcFormValues.yrcararray
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === "YRC") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === "YRC") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else {
              if (this.yrcFormValues.yrcaparray !== undefined && this.yrcFormValues.yrcararray !== undefined) {
                 this.apData = this.yrcFormValues.yrcaparray
                this.arData = this.yrcFormValues.yrcararray 
                } else {
                  this.parseSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                    if (data.companyName === "YRC") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.apData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  });
                  this.parseArSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                    if (data.companyName === "YRC") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.arData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  })
        
                  this.apData.forEach((acc:any) => {
                    if(acc.name === this.yrcFormValues.apAssessorialName) {
                      acc.cost = this.yrcFormValues.apCost;
                      acc.min = this.yrcFormValues.apMin;
                      acc.max = this.yrcFormValues.apMax;
                    }
                  });
                }
           

                console.log('Ap Assesss', this.apData)

              }
              this.invoiceDetails['values'][i].yrcAccessApArray = this.apData;
              this.invoiceDetails['values'][i].yrcAccessArArray = this.arData;
            }
            if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
              this.invoiceDetails['values'][i].reddawayRate = this.invoiceDetails['values'][i].forteResponse.reddawayRate;
              this.invoiceDetails['values'][i].isReddaway = this.invoiceDetails['values'][i].selected;
              this.reddawayValues = this.invoiceDetails['values'][i].reddawayRate;
              if (this.reddawayValues === undefined) {
                // this.apData = this.yrcFormValues.yrcaparray
                // this.arData = this.yrcFormValues.yrcararray
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === "REDDAWAY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === "REDDAWAY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else {
              if (this.reddawayValues.redaparray !== undefined && this.reddawayValues.redaparray !== undefined) {
                 this.apData = this.reddawayValues.redaparray
                this.arData = this.reddawayValues.redararray
                } else {
                  this.parseSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                    if (data.companyName === "REDDAWAY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.apData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  });
                  this.parseArSetMasterData.forEach((data:any) => {
                    console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                    if (data.companyName === "REDDAWAY") {
                      data.assessorial = JSON.parse(data.assessorials);
                      this.arData = data.assessorial;
                    }
                    console.log('Ap Assesss', this.apData)
                  })
        
                  // this.apData.forEach((acc:any) => {
                  //   if(acc.name === this.yrcFormValues.apAssessorialName) {
                  //     acc.cost = this.yrcFormValues.apCost;
                  //     acc.min = this.yrcFormValues.apMin;
                  //     acc.max = this.yrcFormValues.apMax;
                  //   }
                  // });
                }
           

                console.log('Ap Assesss', this.apData)

              }
              this.invoiceDetails['values'][i].reddawayAccessApArray = this.apData;
              this.invoiceDetails['values'][i].reddawayAccessArArray = this.arData;
            }
            console.log('this.invoiceDetails', this.invoiceDetails['values'][i]);

            let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
            this.invoiceDetails['values'][i].shipmentDate = newDate;
            this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
            if (this.invoiceDetails['values'][i].forteResponse.yrcshowEdit !== undefined) {
              this.invoiceDetails['values'][i].yrcshowEdit = this.invoiceDetails['values'][i].forteResponse.yrcshowEdit;
            } else {
              this.invoiceDetails['values'][i].yrcshowEdit = false;
            }
            if (this.invoiceDetails['values'][i].forteResponse.economyshowEdit !== undefined) {
              this.invoiceDetails['values'][i].economyshowEdit = this.invoiceDetails['values'][i].forteResponse.economyshowEdit;

            } else {
              this.invoiceDetails['values'][i].economyshowEdit = false;
            }
            if (this.invoiceDetails['values'][i].forteResponse.priorityshowEdit !== undefined) {
              this.invoiceDetails['values'][i].priorityshowEdit = this.invoiceDetails['values'][i].forteResponse.priorityshowEdit;

            } else {
              this.invoiceDetails['values'][i].priorityshowEdit = false;
            }
            if (this.invoiceDetails['values'][i].forteResponse.reddawayshowEdit !== undefined) {
              this.invoiceDetails['values'][i].reddawayshowEdit = this.invoiceDetails['values'][i].forteResponse.reddawayshowEdit;

            } else {
              this.invoiceDetails['values'][i].reddawayshowEdit = false;
            }
            if (this.invoiceDetails['values'][i].yrcRate.yrcArDiscount !== undefined) { 
              this.invoiceDetails['values'][i].yrcchangedArDiscount = this.invoiceDetails['values'][i].yrcRate.yrcArDiscount;
            }
            if (this.invoiceDetails['values'][i].fxfeRate.ecoArDiscount !== undefined) { 
              this.invoiceDetails['values'][i].ecochangedArDiscount = this.invoiceDetails['values'][i].fxfeRate.ecoArDiscount;
            }
            if (this.invoiceDetails['values'][i].fxfpRate.priArDiscount !== undefined) { 
              this.invoiceDetails['values'][i].prichangedArDiscount = this.invoiceDetails['values'][i].fxfpRate.priArDiscount;
            }if (this.invoiceDetails['values'][i].reddawayRate.redArDiscount !== undefined) { 
              this.invoiceDetails['values'][i].redchangedArDiscount = this.invoiceDetails['values'][i].reddawayRate.ecoArDiscount;
            }

            // this.invoiceDetails['values'][i].selected = true;
            this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);

          }

          this.itemArray = this.invoiceDetails;


          this.tableVables();

        } else {
          this.itemArray = [];
        }
        // })
      } else if (this.trafficDataEnable !== undefined) {
        console.log(this.trafficDataEnable);
        this.getRules();

        // this.invoiceDetails['carrier'] = this.trafficDataEnable.carrier;
        if (this.trafficDataEnable.carrier === 'FXFP' || this.trafficDataEnable.carrier === 'FEDEX_FREIGHT_PRIORITY') {
          this.invoiceDetails['carrier'] = 'FEDEX PRIORITY';

        } else if (this.trafficDataEnable.carrier === 'FXFE' || this.trafficDataEnable.carrier === 'FEDEX_FREIGHT_ECONOMY') {
          this.invoiceDetails['carrier'] = 'FEDEX ECONOMY';
        } else if (this.trafficDataEnable.carrier === 'YRC') {
          this.invoiceDetails['carrier'] = 'YRC';
        } else if (this.trafficDataEnable.carrier === 'REDDAWAY') {
          this.invoiceDetails['carrier'] = 'REDDAWAY';
        }
        this.parseSetMasterData.forEach((data:any) => {
          console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
          if (data.companyName === this.invoiceDetails['carrier']) {
            data.assessorial = JSON.parse(data.assessorials);
            this.apData = data.assessorial;
          }
          console.log('Ap Assesss', this.apData)
        })
        this.parseArSetMasterData.forEach((data:any) => {
          console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
          if (data.companyName === this.invoiceDetails['carrier']) {
            data.assessorial = JSON.parse(data.assessorials);
            this.arData = data.assessorial;
          }
          console.log('Ap Assesss', this.apData)
        })
        this.invoiceDetails['values'] = this.trafficDataEnable.values;
        this.invalidInputData = this.trafficDataEnable.invalidData;
        if (this.invoiceDetails['values'].length > 0) {
          this.socketDataBoolean = false;
          for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
            console.log('company', this.companyInformation);
            if (this.companyInformation.costPlus === true) {
              this.costplusValueEnabled = true;
              this.costplusToggle = true;
              this.companyInformation.costPlusFactor.forEach((dat:any) =>{

            if (dat.carrier === 'YRC') {
              this.invoiceDetails['values'][i].yrcCostplusFactor = dat.factor;
              this.costplusFactor = this.invoiceDetails['values'][i].yrcCostplusFactor

            }
            if (dat.carrier === 'REDDAWAY') {
              this.invoiceDetails['values'][i].reddawayCostplusFactor = dat.factor;
              this.costplusFactor = this.invoiceDetails['values'][i].reddawayCostplusFactor
            }
            if (dat.carrier === 'FEDEX PRIORITY') {
              this.invoiceDetails['values'][i].priorityCostplusFactor = dat.factor;
              this.costplusFactor = this.invoiceDetails['values'][i].priorityCostplusFactor
            }
            if (dat.carrier === 'FEDEX ECONOMY') {
              this.invoiceDetails['values'][i].economyCostplusFactor = dat.factor;
              this.costplusFactor = this.invoiceDetails['values'][i].economyCostplusFactor
            }               
        })
      }
          // if (element.originCity === undefined) {
            let x:any;
            this.pricingInfoService.getCityState(this.invoiceDetails['values'][i].originZip).subscribe(response => {
              x = response;
              if (x.length > 0) {
                console.log('1',x)
                this.invoiceDetails['values'][i].originCity =  x[0].city;

               
              }
            });
          // }
          // if (element.destinationCity === undefined) {
            let y:any;
          this.pricingInfoService.getCityState(this.invoiceDetails['values'][i].destinationZip).subscribe(response => {
            y = response;
            if (y.length > 0) {
              console.log('2',y)

              this.invoiceDetails['values'][i].destinationCity =  y[0].city
             
            }
          });
          console.log('jefrin', x, y);
          
        // }
            // this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
            // let object = JSON.parse(this.invoiceDetails['values'][i].rateResponse);

            // this.invoiceDetails['values'][i].rateResponse = object;
            if (this.invoiceDetails['values'][i].rateResponse !== undefined) {
              this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);

            }
            console.log(this.invoiceDetails['values'][i].rateResponse);
            let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
            this.invoiceDetails['values'][i].shipmentDate = newDate;
            this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
            this.invoiceDetails['values'][i].selected = true;
            this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
            if (this.invoiceDetails['carrier'] === 'YRC') {
              this.invoiceDetails['values'][i].yrcSelected = true;
              this.invoiceDetails['values'][i].yrcshowEdit = false;
              this.invoiceDetails['values'][i].yrcAccessApArray = this.apData;
              this.invoiceDetails['values'][i].yrcAccessArArray = this.arData;

            } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
              this.invoiceDetails['values'][i].prioritySelected = true;
              this.invoiceDetails['values'][i].economyshowEdit = false;

              this.invoiceDetails['values'][i].fedexPriAccessApArray = this.apData;
              this.invoiceDetails['values'][i].fedexPriAccessArArray = this.arData;
            } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
              this.invoiceDetails['values'][i].economySelected = true;
              this.invoiceDetails['values'][i].priorityshowEdit = false;

              this.invoiceDetails['values'][i].fedexEcoAccessApArray = this.apData;
              this.invoiceDetails['values'][i].fedexEcoAccessArArray = this.arData;
            } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
              this.invoiceDetails['values'][i].reddawaySelected = true;
              this.invoiceDetails['values'][i].reddawayshowEdit = false;

              this.invoiceDetails['values'][i].reddawayAccessApArray = this.apData;
              this.invoiceDetails['values'][i].reddawayAccessArArray = this.arData;
            }
            this.invoiceDetails['values'][i].yrcSelected = true;
            this.invoiceDetails['values'][i].prioritySelected = true;
            this.invoiceDetails['values'][i].economySelected = true;
            this.invoiceDetails['values'][i].reddawaySelected = true;
            this.invoiceDetails['values'][i].yrcshowEdit = false;
            this.invoiceDetails['values'][i].economyshowEdit = false;
            this.invoiceDetails['values'][i].priorityshowEdit = false;
            this.invoiceDetails['values'][i].reddawayshowEdit = false;

          }
          this.itemArray = this.invoiceDetails;
          console.log(this.invoiceDetails['values']);
          this.tableVables();

        } else {
          this.itemArray = [];
        }
      
      }
      

    }
  }

  getCompanyRules() {

  }
  ngOnDestroy() {
    console.log('destroy');
    if (this.socketData !== null && this.socketData !== undefined && this.socketData !== '') {
      this.wsService.disconnectSocket();
      this.socketData = null;
      this.socketDataSubscriber.unsubscribe();
      console.log(this.socketData, this.socketDataSubscriber);
      this.unSubscribe(this.socketDataSubscriber);
    }
    let passingObject = undefined;
    this.invoiceService.setAnalyticsCode(passingObject);

  }

  unSubscribe(subscription: Subscription) {
    if (subscription !== null && subscription !== undefined) {
      subscription.unsubscribe();
    }
  }

  buildForm() {
    this.workbookForm = this.fb.group({
      carrier: [''],
      apAmc: [''],
      arAmc: [''],
      apDiscount: [''],
      arDiscount: [''],
      currentProgram: [''],
      savings: [''],
      savingsPercent: [''],
      gp: [''],
      gpPercent: [''],
      impact: ['']
    });
    this.editworkbookForm = this.fb.group({
      carrier: [''],
      apDiscount: [''],
      arDiscount: [''],
      typeOfInvoice: ['']
    })
    console.log('this.getAdmissionByIdSubscription', this.getAdmissionByIdSubscription);
  }
  routingLink() {
    // this.router.navigate(['/customerInfoworkbook']);
    if (this.selectedAnalyticsCodeData === undefined) {
      this.trafficDataEnable.values.forEach((obj:any) => {
        obj.rateResponse = JSON.stringify(obj.rateResponse)
        if (obj.fxfpRate !== null) {
          obj.fxfpRate = JSON.stringify(obj.fxfpRate);
        }
        if (obj.fxfeRate !== null) {
          obj.fxfeRate = JSON.stringify(obj.fxfeRate);
        }
        if (obj.yrcRate !== null) {
          obj.yrcRate = JSON.stringify(obj.yrcRate);
        }
        if (obj !== null) {
          obj.reddawayRate = JSON.stringify(obj.reddawayRate);
        }
      });
      this.trafficDataEnable.invalidData = this.invalidInputData;
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataEnable);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/customerInfoworkbook']);
    } else if (this.selectedAnalyticsCodeData !== undefined) {
      this.trafficDataSavedData.values.forEach((obj:any) => {
        obj.rateResponse = JSON.stringify(obj.rateResponse)
        if (obj.fxfpRate !== null) {
          obj.fxfpRate = JSON.stringify(obj.fxfpRate);
        }
        if (obj.fxfeRate !== null) {
          obj.fxfeRate = JSON.stringify(obj.fxfeRate);
        }
        if (obj.yrcRate !== null) {
          obj.yrcRate = JSON.stringify(obj.yrcRate);
        }
        if (obj !== null) {
          obj.reddawayRate = JSON.stringify(obj.reddawayRate);
        }
      });
      this.trafficDataSavedData.invalidData = this.invalidInputData;
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/customerInfoworkbook']);
    } else {
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/customerInfoworkbook']);
    }
  }


  tableVables() {
    this.inboundArray = [];
    this.outboundArray = [];
    this.serviceNotAvailableArray = []
    this.thirdPartyArray = [];
    this.totalInvoiceAmt = [];
    this.totalRateForForte = [];
    this.totalForteRateArray = [];
    this.totalInvoiceAmountArray = [];
    this.totalFuelChargeArray = [];
    this.totalGpChargeArray = [];
    this.totalApChargeArray = [];
    this.totalArChargeArray = [];
    this.discountsValue = '';
    this.showTableValues = false;
    this.loader = true;
    this.spinner.hide();

    this.displayNoInVoice = false;
    this.editOption = false;
    console.log('this.invoiceDetails', this.invoiceDetails);
    console.log(this.selectedAnalyticsCodeData);
    console.log(this.workbookForm.value)
    if (this.invoiceDetails !== null || this.invoiceDetails !== undefined) {
      if (this.invoiceDetails['values'].length > 0) {
        this.showTableValues = true;
        console.log('this.invoiceDetails', this.invoiceDetails['values']);
        for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
          if (this.invoiceDetails['values'][i].classWeight !== undefined && this.invoiceDetails['values'][i].classWeight !== null) {
          let x: string = this.invoiceDetails['values'][i].classWeight[0].classification.toString();

          for (let m = 1; m < this.invoiceDetails['values'][i].classWeight.length; m++) {
            x += "," + this.invoiceDetails['values'][i].classWeight[m].classification;
          }
          this.invoiceDetails['values'][i].class = x;
          let y: string = this.invoiceDetails['values'][i].classWeight[0].weight.toString();

          for (let n = 1; n < this.invoiceDetails['values'][i].classWeight.length; n++) {
            y += "," + this.invoiceDetails['values'][i].classWeight[n].weight;
          }
          this.invoiceDetails['values'][i].weight = y;
        }
          console.log('Assessorial Value', this.invoiceDetails['values']);
          this.totalInvoiceAmt.push(this.invoiceDetails['values'][i].invoiceAmount);
          console.log(this.editValue, this.editArValue);

          if (this.invoiceDetails['carrier'] === 'YRC') {
            console.log(this.invoiceDetails['values'][i], this.invoiceDetails['values'][i].rateResponse.yrcAp);
            if(this.invoiceDetails['values'][i].rateResponse.yrcAp !== false) {
            this.editOption = true;
            this.enableReadOnly = true;
            this.increasedValueForAR = 1.248786;

            let arDataFrommArray, apDataFrommArray;
            let rulesNamesArray:any = [];
            this.invoiceDetails['values'][i].ApAssessorialsArray = [];
            this.invoiceDetails['values'][i].ArAssessorialsArray = [];
            const setApMasterData:any = localStorage.getItem('aptableData');
            let profileMinimumCharge, profileLifeGateCharge:any, profileResidentialCharge:any, profileLimitedAccessDelivery:any,
              profileInsideDelivery:any, profileNotify:any, profileSingleShipment:any, singleShipmentsetMasterData, profiledeliveryAppointmentRequired :any;
            let apDiscount, apAmc, arDiscount, arAmc;
            this.parseSetMasterData = JSON.parse(setApMasterData);
            const setArMasterData:any = localStorage.getItem('artableData');
            this.parseArSetMasterData = JSON.parse(setArMasterData);
            console.log(this.parseSetMasterData);
            if (this.invoiceDetails['values'][i].yrcApData === undefined) {
              this.invoiceDetails['values'][i].yrcApData = this.invoiceDetails['values'][i].rateResponse.yrcAp;
              this.invoiceDetails['values'][i].yrcArData = this.invoiceDetails['values'][i].rateResponse.yrcAr;
            } else {
              this.invoiceDetails['values'][i].yrcApData = this.invoiceDetails['values'][i].yrcApData;
              this.invoiceDetails['values'][i].yrcArData = this.invoiceDetails['values'][i].yrcArData;
            }
            console.log('yrcrate', this.invoiceDetails['values'][i].rateResponse);
            console.log(this.editValue, this.editArValue);
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData === undefined) {
                console.log(this.yrcFormValues);
                if (this.yrcFormValues !== undefined) {
                  console.log('savedformvalues', this.yrcFormValues);
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.yrcFormValues.apAmc,
                    arAmc: this.yrcFormValues.arAmc,
                    apDiscount: this.yrcFormValues.apDiscount,
                    arDiscount: this.yrcFormValues.arDiscount

                  });
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount

                          });
                          this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;
                        }
                      }
                    });
                  });
                }
              } else {
                console.log(this.invoiceDetails);
                if (this.invoiceDetails['values'][i].yrcRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.invoiceDetails['values'][i].yrcRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].yrcRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][i].yrcRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][i].yrcRate.arDiscount

                  });
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount

                          });
                          this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;
                        }
                      }
                    });
                  });
                }
                this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;

              }
            } else if (this.editValue === true || this.editArValue === true) {
              console.log(this.workbookForm);

              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value');
            }
            if (this.selectedAnalyticsCodeData !== undefined) {
              console.log('selected code', this.selectedAnalyticsCodeData);
              console.log('editvalue', this.editValue, this.editArValue);
              if (this.editValue === false && this.editArValue === false) {
                if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                  if(this.invoiceDetails['values'][i].yrcRules.ar[0].profileMinCharge !== undefined) {
                  arAmc = this.invoiceDetails['values'][i].yrcRules.ar[0].profileMinCharge;
                  } else {
                    arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc
                  }
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                  
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                }
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }

                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                    this.invoiceDetails['values'][i].showRule = false;
                    rulesNamesArray = [];
                  } else {
                    this.invoiceDetails['values'][i].showRule = true;
                    rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  }
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }
                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;

                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                    this.invoiceDetails['values'][i].showRule = false;
                    rulesNamesArray = [];
                  } else {
                    this.invoiceDetails['values'][i].showRule = true;

                    rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  }
                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }
                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                  rulesNamesArray = [];
                  if (this.invoiceDetails['values'][i].yrcRate.apDiscount === 'NA') {
                    this.parseSetMasterData.forEach((obj:any) => {
       
                      // this.parseArSetMasterData.forEach((element:any) => {
    
                        console.log('objectvalue',obj)
                        if (obj.companyName === this.invoiceDetails['carrier']) {
                          console.log('objectvalue',obj)
                          apDiscount = obj.discount
    
                        }});
                  } else {
                    apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;

                  }
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  // arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                    arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                  } else {
                    arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  }
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                  if(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                  
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                } else {
                  rulesNamesArray = [];
                }
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }

                } else {
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = false;

                }

                console.log(apDiscount, arDiscount, apAmc);
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                console.log(this.workbookForm.value);
                console.log(this.invoiceDetails['values'][i].showRule);
                if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                rulesNamesArray = [];
                // apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                this.parseSetMasterData.forEach((obj:any) => {
       
                  // this.parseArSetMasterData.forEach((element:any) => {

                    console.log('objectvalue',obj)
                    if (obj.companyName === this.invoiceDetails['carrier']) {
                      console.log('objectvalue',obj)
                      apDiscount = obj.discount

                    }});
                apAmc = this.workbookForm.value.apAmc;
                arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                this.invoiceDetails['values'][i].showRule = true;
                rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                if(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                
                if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                    rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                    this.invoiceDetails['values'][i].showRule = true;

                  }
                }
              }
                if (rulesNamesArray.length > 0) {
                  this.invoiceDetails['values'][i].showRule = true;
                } else {
                  this.invoiceDetails['values'][i].showRule = false;

                }

              } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                rulesNamesArray = [];
                apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                // arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                arDiscount = this.workbookForm.value.arDiscount;
                arAmc = this.workbookForm.value.arAmc;
                if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                  this.invoiceDetails['values'][i].showRule = false;
                  rulesNamesArray = [];
                } else {
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                }
                this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                if (rulesNamesArray.length > 0) {
                  this.invoiceDetails['values'][i].showRule = true;
                } else {
                  this.invoiceDetails['values'][i].showRule = false;

                }
              } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                this.invoiceDetails['values'][i].showRule = true;
                rulesNamesArray = [];
                if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                  this.invoiceDetails['values'][i].showRule = false;
                  rulesNamesArray = [];
                } else {
                  this.invoiceDetails['values'][i].showRule = true;

                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                }
                rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');

                this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                if (rulesNamesArray.length > 0) {
                  this.invoiceDetails['values'][i].showRule = true;
                } else {
                  this.invoiceDetails['values'][i].showRule = false;

                }
              } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                rulesNamesArray = [];
                this.parseSetMasterData.forEach((obj:any) => {
       
                  // this.parseArSetMasterData.forEach((element:any) => {

                    console.log('objectvalue',obj)
                    if (obj.companyName === this.invoiceDetails['carrier']) {
                      console.log('objectvalue',obj)
                      apDiscount = obj.discount

                    }});
                apAmc = this.workbookForm.value.apAmc;
                // arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                arAmc = this.workbookForm.value.arAmc;
                if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                  arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                } else {
                  arDiscount = this.workbookForm.value.arDiscount;
                }
                if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                    rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                    this.invoiceDetails['values'][i].showRule = true;

                  }
                }
                this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                if (rulesNamesArray.length > 0) {
                  this.invoiceDetails['values'][i].showRule = true;
                } else {
                  this.invoiceDetails['values'][i].showRule = false;

                }
              } else {
                rulesNamesArray = [];
                this.parseSetMasterData.forEach((obj:any) => {
       
                  // this.parseArSetMasterData.forEach((element:any) => {

                    console.log('objectvalue',obj)
                    if (obj.companyName === this.invoiceDetails['carrier']) {
                      console.log('objectvalue',obj)

                      // if (element.companyName === this.invoiceDetails['carrier']) {
                        rulesNamesArray = [];
                        apDiscount = obj.discount;
                        apAmc = Number(this.workbookForm.value.apAmc);
                        // arDiscount = this.workbookForm.value.arDiscount;
                        arAmc = Number(this.workbookForm.value.arAmc);
                        arDiscount = Number(this.workbookForm.value.arDiscount);
                        console.log(apDiscount);
                      // }
                    }
                    // });
                  });
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;
  
                  }
                  
                // apDiscount = this.workbookForm.value.apDiscount;
                // apAmc = this.workbookForm.value.apAmc;
                // // arDiscount = this.workbookForm.value.arDiscount;
                // arAmc = this.workbookForm.value.arAmc;
                // arDiscount = this.workbookForm.value.arDiscount;
              }
                // this.differenceValue = this.initialYrcARDiscount - this.workbookForm.value.arDiscount;
                // if (this.differenceValue < 0) {
                //   arDiscount = Number(this.initialYrcARDiscount) + Number(this.differenceValue);
                // } else {
                //   arDiscount = Number(this.initialYrcARDiscount) - Number(this.differenceValue);
                // }
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                  arAmc = this.workbookForm.value.arAmc
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                  
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                }
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }

                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                    this.invoiceDetails['values'][i].showRule = false;
                    rulesNamesArray = [];
                  } else {
                    this.invoiceDetails['values'][i].showRule = true;
                    rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  }
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }
                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                    this.invoiceDetails['values'][i].showRule = false;
                    rulesNamesArray = [];
                  } else {
                    this.invoiceDetails['values'][i].showRule = true;

                    rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  }
                  rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');

                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }
                } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                  this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  // arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                    arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                  } else {
                    arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  }
                  if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                    if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                      rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                      this.invoiceDetails['values'][i].showRule = true;

                    }
                  }
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                  if (rulesNamesArray.length > 0) {
                    this.invoiceDetails['values'][i].showRule = true;
                  } else {
                    this.invoiceDetails['values'][i].showRule = false;

                  }
                } else {
                  rulesNamesArray = [];
                  apDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = false;

                }
              }
              console.log(apDiscount, arDiscount, apAmc);
              console.log(this.invoiceDetails['values'][i]);

              if (this.invoiceDetails['values'][i].yrcRate.apAccess === true) {
                this.editAPAcc = true;
                this.accessorialFormAP.patchValue({
                  accessorials: this.invoiceDetails['values'][i].yrcRate.apAssessorialName,
                  cost: this.invoiceDetails['values'][i].yrcRate.apCost,
                  min: this.invoiceDetails['values'][i].yrcRate.apMin,
                  max: this.invoiceDetails['values'][i].yrcRate.apMax
                });
                // this.apData = this.invoiceDetails['values'][i].yrcAccessApArray;
                // this.parseSetMasterData.forEach((data:any) => {
                //   if (data.companyName === this.invoiceDetails['carrier']) {
                //     data.assessorial = JSON.parse(data.assessorials);
                //     data.assessorial.forEach((ele:any) => {
                //       if (ele.name === this.invoiceDetails['values'][i].yrcRate.apAssessorialName) {
                //         ele.cost = this.invoiceDetails['values'][i].yrcRate.apCost;
                //       }
                //     });
                //     this.apData = data.assessorial;
                //   }
                //   console.log('Ap Assesss', this.apData);
                // });
              } else if (this.invoiceDetails['values'][i].yrcAccessApArray != undefined && this.invoiceDetails['values'][i].yrcAccessApArray.length > 1){
                 this.apData = this.invoiceDetails['values'][i].yrcAccessApArray;
              } else {
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                // this.apData.forEach((acc:any) => {
                //   if(acc.name === this.yrcFormValues.apAssessorialName) {
                //     acc.cost = this.yrcFormValues.apCost;
                //     acc.min = this.yrcFormValues.apMin;
                //     acc.max = this.yrcFormValues.apMax;
                //   }
                // });
                console.log('Ap Assesss', this.apData)


              }
              if (this.invoiceDetails['values'][i].yrcRate.arAccess === true) {
                this.editARAcc = true;
                this.accessorialFormAR.patchValue({
                  accessorials: this.invoiceDetails['values'][i].yrcRate.arAssessorialName,
                  cost: this.invoiceDetails['values'][i].yrcRate.arCost,
                  min: this.invoiceDetails['values'][i].yrcRate.arMin,
                  max: this.invoiceDetails['values'][i].yrcRate.arMax
                });
                this.arData = this.invoiceDetails['values'][i].yrcAccessArArray;

                // this.parseSetMasterData.forEach((data:any) => {
                //   if (data.companyName === this.invoiceDetails['carrier']) {
                //     data.assessorial = JSON.parse(data.assessorials);
                //     data.assessorial.forEach((ele:any) => {
                //       if (ele.name === this.invoiceDetails['values'][i].yrcRate.arAssessorialName) {
                //         ele.cost = this.invoiceDetails['values'][i].yrcRate.arCost;
                //       }
                //     })
                //     this.arData = data.assessorial;
                //   }
                //   console.log('Ap Assesss', this.arData)
                // })
              }else if (this.invoiceDetails['values'][i].yrcAccessArArray != undefined && this.invoiceDetails['values'][i].yrcAccessArArray.length > 1){
                this.arData = this.invoiceDetails['values'][i].yrcAccessArArray;
                              } else {
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              }
              if (this.invoiceDetails['values'][i].yrcshowEdit === true) {
                // if (this.selectedAnalyticsCodeData !== undefined) {
                  console.log(this.invoiceDetails['values'][i]);

                //   if (this.invoiceDetails['values'][i].yrcRate.yrcArDiscount !== undefined) {
                //     console.log(this.invoiceDetails['values'][i].yrcRate);
                //     arDiscount = this.invoiceDetails['values'][i].yrcRate.yrcArDiscount;
                //     this.invoiceDetails['values'][i].editedDiscounted =  true;
                //   // }
                // } else {
                arDiscount = this.invoiceDetails['values'][i].yrcchangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  true;

                // }
              }
              arAmc = this.workbookForm.value.arAmc

              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              console.log()
              // if (this.invoiceDetails['values'][i].finalAPDiscount === undefined) {
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              let finalRAteValue = 0;
              if (this.invoiceDetails['values'][i].yrcApData.finalRate.length > 1) {
                this.invoiceDetails['values'][i].yrcApData.finalRate.forEach((el:any) =>{
                  finalRAteValue = el + finalRAteValue;
                })
                //  finalRAteValue = this.netChargeArrSum(this.invoiceDetails['values'][i].yrcApData.finalRate)

              } else {
                 finalRAteValue = this.invoiceDetails['values'][i].yrcApData.finalRate[0]

              }
              // this.invoiceDetails['values'][i].apGrossRate = finalRAteValue;
              let disAp = (Number(this.invoiceDetails['values'][i].yrcApData.discountedRate[0]) * 100 / Number(finalRAteValue)).toFixed(2);
              this.invoiceDetails['values'][i].finalAPDiscount  = disAp.toString();

              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              // }
            } else {

              this.parseSetMasterData.forEach((obj:any) => {
                this.parseArSetMasterData.forEach((element:any) => {
                  console.log(obj, element);
                  if (obj.companyName === this.invoiceDetails['carrier']) {
                    if (element.companyName === this.invoiceDetails['carrier']) {
                      if (this.editValue === false && this.editArValue === false) {
                        console.log('apruleresponse', this.invoiceDetails['values'][i].rateResponse);

                        if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].yrcRules);
                          rulesNamesArray = [];
                          // if (this.yrcFormValues !==undefined) {
                          //   console.log('savedformvalues', this.yrcFormValues);

                          //     apDiscount = this.yrcFormValues.apDiscount,
                          //     arDiscount = this.yrcFormValues.arDiscount

                          // } else {
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          // }
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          console.log('stacy',this.invoiceDetails['values'][i].yrcRules)
                          // arAmc = (this.invoiceDetails['values'][i].yrcRules.ar[0].profileMinCharge).toString();
                          arAmc = this.workbookForm.value.arAmc;

                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].showRule = true;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                          
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                              if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                                rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                                this.invoiceDetails['values'][i].showRule = true;
  
                              }
                            }
                          }
                          // if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                          //   if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                          //     rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' Ap Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                          //     this.invoiceDetails['values'][i].showRule = true;

                          //   }
                          // }
                          // rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName  + ' AR Discount at ' + arDiscount + '%' );
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }

                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          rulesNamesArray = [];
                          rulesNamesArray = [];
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = this.invoiceDetails['values'][i].yrcRules.ap[0].profileMinCharge;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                          } else {
                            arDiscount = this.workbookForm.value.arDiscount;
                          }
                          arAmc = this.workbookForm.value.arAmc;
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            this.invoiceDetails['values'][i].showRule = false;
                            rulesNamesArray = [];
                          } else {
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;
                              arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                            } else {
                              arDiscount = this.workbookForm.value.arDiscount;
                            }

                          }
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                          console.log('aprulediscount1', this.invoiceDetails['values'][i].yrcRules);
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          rulesNamesArray = [];
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            rulesNamesArray = [];
                          } else {
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          }
                          // if (this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName !== 'Non Direct'){
                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');

                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                          rulesNamesArray = [];
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;

                          // apDiscount = this.workbookForm.value.apDiscount;
                          // apAmc = this.workbookForm.value.apAmc;
                          // if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                          //   arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                          // } else {
                          //   arDiscount = this.workbookForm.value.arDiscount;
                          // }
                          arAmc = this.workbookForm.value.arAmc;
                          // if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP' ) {
                          //   this.invoiceDetails['values'][i].showRule = false;
                          //   rulesNamesArray = [];
                          // } else {
                          // this.invoiceDetails['values'][i].showRule = true;
                          // rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%' );
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          // }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                          
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                        }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }

                        } else {
                          rulesNamesArray = [];
                          console.log(this.yrcFormValues);
                          if (this.yrcFormValues !== undefined) {
                            console.log('savedformvalues', this.yrcFormValues);
                            this.workbookForm.patchValue({
                              carrier: this.invoiceDetails['carrier'],
                              apAmc: this.yrcFormValues.apAmc,
                              arAmc: this.yrcFormValues.arAmc,
                              apDiscount: this.yrcFormValues.apDiscount,
                              arDiscount: this.yrcFormValues.arDiscount

                            });
                          } else {
                            apDiscount = obj.discount;
                            apAmc = obj.amc;
                            arDiscount = element.discount;
                            arAmc = element.amc;
                          }
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                        // apDiscount = this.invoiceDetails['values'][i].yrcApData.yrcProfileRateAp.profileDiscount;
                        // apAmc = obj.amc;
                        // arDiscount = element.discount;
                        // arAmc = element.amc;
                        // }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                        if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].yrcRules);
                          rulesNamesArray = [];
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          arAmc = (this.invoiceDetails['values'][i].yrcRules.ar[0].profileMinCharge).toString();
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                          
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                        }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                          rulesNamesArray = [];
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = this.invoiceDetails['values'][i].yrcRules.ap[0].profileMinCharge;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                          } else {
                            arDiscount = element.discount;
                          }
                          arAmc = element.amc;
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            this.invoiceDetails['values'][i].showRule = false;
                            rulesNamesArray = [];
                            apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                            apAmc = this.invoiceDetails['values'][i].yrcRules.ap[0].profileMinCharge;
                            arAmc = this.workbookForm.value.arAmc;
                            arDiscount = this.workbookForm.value.arDiscount;
                            // this.differenceValue = this.initialYrcARDiscount - this.workbookForm.value.arDiscount;
                            // console.log('difference', this.differenceValue, Math.abs(this.differenceValue));

                            // if (this.differenceValue < 0) {
                            //   arDiscount = Number(this.initialYrcARDiscount) + Number(Math.abs(this.differenceValue));
                            // } else {
                            //   arDiscount = Number(this.initialYrcARDiscount) - Number(this.differenceValue);
                            // }
                          } else {
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                          console.log('aprulediscount1', this.invoiceDetails['values'][i].yrcRules);
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            rulesNamesArray = [];
                            apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                            apAmc = this.invoiceDetails['values'][i].yrcRules.ap[0].profileMinCharge;
                          } else {
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          }
                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');

                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules); 
                          let rulesNamesArray:any = [];
                          // apDiscount = obj.discount;
                          // apAmc = obj.amc;
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          // this.differenceValue = this.initialYrcARDiscount - this.workbookForm.value.arDiscount;
                          // console.log('difference', this.differenceValue, Math.abs(this.differenceValue));

                          // if (this.differenceValue < 0) {
                          //   arDiscount = Number(this.initialYrcARDiscount) + Number(Math.abs(this.differenceValue));
                          // } else {
                          //   arDiscount = Number(this.initialYrcARDiscount) - Number(this.differenceValue);
                          // }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else {
                          console.log(this.invoiceDetails['values'][i].showRule);
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          // arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          // this.differenceValue = this.initialYrcARDiscount - this.workbookForm.value.arDiscount;
                          // console.log('difference', this.differenceValue, Math.abs(this.differenceValue));

                          // if (this.differenceValue < 0) {
                          //   arDiscount = Number(this.initialYrcARDiscount) + Number(Math.abs(this.differenceValue));
                          // } else {
                          //   arDiscount = Number(this.initialYrcARDiscount) - Number(this.differenceValue);
                          // }
                        }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                        if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].yrcRules);
                          rulesNamesArray = [];
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                          
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                        }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                          rulesNamesArray = [];
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = this.invoiceDetails['values'][i].yrcRules.ap[0].profileMinCharge;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                          } else {
                            arDiscount = element.discount;
                          } arAmc = element.amc;
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            this.invoiceDetails['values'][i].showRule = false;
                            rulesNamesArray = [];
                          } else {
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                          console.log('aprulediscount1', this.invoiceDetails['values'][i].yrcRules);
                          apDiscount = this.invoiceDetails['values'][i].yrcRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].yrcRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName === 'YRC AP') {
                            rulesNamesArray = [];
                          } else {
                            rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          }
                          rulesNamesArray.push(this.invoiceDetails['values'][i].yrcRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');

                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else if (this.invoiceDetails['values'][i].yrcRules.ap.length === 0 &&
                          this.invoiceDetails['values'][i].yrcRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules); rulesNamesArray = [];
                          rulesNamesArray = [];
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            arDiscount = this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount;
                          } else {
                            arDiscount = this.workbookForm.value.arDiscount;
                          }

                          arAmc = this.workbookForm.value.arAmc;
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules.length > 0) {
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName === 'Non Direct') {
                              rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].ruleName + ' AR Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAr.rules[0].profileDiscount + '%');
                              this.invoiceDetails['values'][i].showRule = true;

                            }
                          }
                          if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules !== undefined) {

                          
                            if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules.length > 0) {
                              if (this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName === 'Non Direct') {
                                rulesNamesArray.push(this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].ruleName + ' AP Discount at ' + this.invoiceDetails['values'][i].rateResponse.yrcAp.rules[0].profileDiscount + '%');
                                this.invoiceDetails['values'][i].showRule = true;
  
                              }
                            }
                          }
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          if (rulesNamesArray.length > 0) {
                            this.invoiceDetails['values'][i].showRule = true;
                          } else {
                            this.invoiceDetails['values'][i].showRule = false;

                          }
                        } else {
                          rulesNamesArray = [];

                          // apDiscount = obj.discount;
                          // apAmc = obj.amc;
                          // arDiscount = element.discount;
                          // arAmc = element.amc;
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          // arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          // this.differenceValue = this.initialYrcARDiscount - this.workbookForm.value.arDiscount;
                          // console.log('difference', this.differenceValue, Math.abs(this.differenceValue));

                          // if (this.differenceValue < 0) {
                          //   arDiscount = Number(this.initialYrcARDiscount) + Number(Math.abs(this.differenceValue));
                          // } else {
                          //   arDiscount = Number(this.initialYrcARDiscount) - Number(this.differenceValue);
                          // }
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                      } else {
                        apDiscount = this.workbookForm.value.apDiscount;
                        apAmc = this.workbookForm.value.apAmc;
                        rulesNamesArray = [];

                        arDiscount = this.workbookForm.value.arDiscount;
                        arAmc = this.workbookForm.value.arAmc;
                        this.invoiceDetails['values'][i].showRule = false;

                      }
                      if (element.type === 'AR') {
                        this.fuelSurCharge = element.fuelSurCharge;
                      }
                    }
                  }
                });
              });
              console.log('apdiscountchanged', apDiscount, arDiscount, apAmc, arAmc)
              if (this.invoiceDetails['values'][i].yrcshowEdit === true) {
                // arDiscount = this.invoiceDetails['values'][i].yrcchangedArDiscount;
                arDiscount = this.invoiceDetails['values'][i].yrcchangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  true;
              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              // if (this.invoiceDetails['values'][i].finalAPDiscount === undefined) {
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              // this.invoiceDetails['values'][i].finalAPDiscount  = Number(this.invoiceDetails['values'][i].yrcApData.discountedRate[0]) * 100 / Number(this.invoiceDetails['values'][i].yrcApData.finalRate[0]);
              let finalRAteValue = 0;
              if (this.invoiceDetails['values'][i].yrcApData.finalRate.length > 1) {
                this.invoiceDetails['values'][i].yrcApData.finalRate.forEach((el:any) =>{
                  finalRAteValue = el + finalRAteValue;
                })
                //  finalRAteValue = this.netChargeArrSum(this.invoiceDetails['values'][i].yrcApData.finalRate)

              } else {
                finalRAteValue = this.invoiceDetails['values'][i].yrcApData.finalRate[0]

             }
              // let finalRAteValue = this.netChargeArrSum(this.invoiceDetails['values'][i].yrcApData.finalRate);
              this.invoiceDetails['values'][i].finalAPDiscount = finalRAteValue;
              // this.invoiceDetails['values'][i].apGrossRate = finalRAteValue;
              let disAp = (Number(this.invoiceDetails['values'][i].yrcApData.discountedRate[0]) * 100 / Number(finalRAteValue)).toFixed(2);
              this.invoiceDetails['values'][i].finalAPDiscount  = disAp.toString();
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              // }
              // this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              // this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              console.log('datayrcdiscount', this.invoiceDetails['values'][i]);
              // this.parseSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrier']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.apData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
              // this.parseArSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrier']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.arData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
            }

            // this.discountsValue = {
            //   apDiscount: (apDiscount).toString(),
            //   arDiscount: (arDiscount).toString(),
            //   apAmc: (apAmc).toString(),
            //   arAmc: (arAmc).toString()
            // }

            // Final Ap Rate Calculation 
            // let forteApRate = (100 - Number(this.discountsValue.apDiscount)) * 0.01;
            this.invoiceDetails['values'][i].apGrossRate = 0;
            this.invoiceDetails['values'][i].arGrossRate = 0;
            let addRate = 0;
            let addRateAr = 0;
            let diffRate = 0;
            if(this.invoiceDetails['values'][i].yrcApData.rate[0] !== null){
            for (let m =0;m<this.invoiceDetails['values'][i].yrcApData.rate.length;m++) {
              console.log(this.invoiceDetails['values'][i].yrcApData.rate[m].finalRate);
              console.log(addRate)
addRate +=  Number(this.invoiceDetails['values'][i].yrcApData.rate[m].finalRate);
            }
console.log(addRate)

            }
          
            if (this.invoiceDetails['values'][i].yrcApData.type === 'Rate') {
              // for (let m =0;m<this.invoiceDetails['values'][i].yrcApData.rate.length;m++) {
              if (Number(addRate) > Number(this.invoiceDetails['values'][i].yrcApData.minCharges)) {
                if (this.invoiceDetails['values'][i].yrcApData.diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(addRate).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(addRate) + Number(this.invoiceDetails['values'][i].yrcApData.diffRate)).toFixed(2));
                }
              } else {
                console.log(addRate, this.discountsValue.apAmc);
                if (this.invoiceDetails['values'][i].yrcApData.diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(this.invoiceDetails['values'][i].yrcApData.minCharges).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].yrcApData.minCharges) + Number(this.invoiceDetails['values'][i].yrcApData.diffRate)).toFixed(2));
                }
              }
            // }
            } else {
              for (let m =0;m<this.invoiceDetails['values'][i].yrcApData.rate.length;m++) {

              if (Number(this.invoiceDetails['values'][i].yrcApData.rate[m].finalDWRate) > Number(this.invoiceDetails['values'][i].yrcApData.minCharges)) {
                if (this.invoiceDetails['values'][i].yrcApData.diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(this.invoiceDetails['values'][i].yrcApData.rate[m].finalDWRate).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].yrcApData.rate[m].finalDWRate) + Number(this.invoiceDetails['values'][i].yrcApData.diffRate)).toFixed(2));
                }
              } else {
                console.log(this.invoiceDetails['values'][i].yrcApData.rate[m].finalRate, this.discountsValue.apAmc);
                if (this.invoiceDetails['values'][i].yrcApData.diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].yrcApData.minCharges)).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].yrcApData.minCharges) + Number(this.invoiceDetails['values'][i].yrcApData.diffRate)).toFixed(2));
                }
              }
            }
            }
            let finalRAteValue = 0;
              if (this.invoiceDetails['values'][i].yrcApData.finalRate.length > 1) {
                this.invoiceDetails['values'][i].yrcApData.finalRate.forEach((el:any) =>{
                  finalRAteValue = el + finalRAteValue;
                })
                //  finalRAteValue = this.netChargeArrSum(this.invoiceDetails['values'][i].yrcApData.finalRate)

              } else {
              finalRAteValue = this.invoiceDetails['values'][i].yrcApData.finalRate[0]

           }
            this.invoiceDetails['values'][i].apGrossRate = finalRAteValue;
            // this.invoiceDetails['values'][i].apGrossRate = (this.invoiceDetails['values'][i].apGrossRate).toFixed(2);

            // if (Number(yrcApData.rate[0].finalRate) > Number(this.discountsValue.apAmc)) {
            //   this.invoiceDetails['values'][i].apGrossRate = yrcApData.rate[0].finalRate;
            // } else {
            // this.invoiceDetails['values'][i].apGrossRate = this.discountsValue.apAmc;
            // }
            let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.invoiceDetails['values'][i].finalAPDiscount)) * 0.01);
            // if ((forteApRate) < apAmc) {
            //   this.invoiceDetails['values'][i].apFinalRate = (apAmc).toString();
            // } else {
              this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);
            // }           // Final Ar Rate Calculation 
            // let forteArRate = (100 - Number(this.discountsValue.arDiscount)) * 0.01;
            // AR calculation
            // this.invoiceDetails['values'][i].apFinalRate = this.invoiceDetails['values'][i].yrcApData.totalCharge;
            this.invoiceDetails['values'][i].yrcApData.response.pageRoot.bodyMain.rateQuote.lineItem.forEach((x:any) => {
              if (x.type === "CodeWord") {
                if (x.description === "GENERAL SURCHARGE (FUEL/FRT)") {
                  let y = Number(x.charges)/100
                  this.invoiceDetails['values'][i].fuelSurChargeApValue = y.toString();
                  console.log(this.invoiceDetails['values'][i].fuelSurChargeApValue,y);
                }
              }
            })
            // this.invoiceDetails['values'][i].fuelSurChargeApValue = (this.invoiceDetails['values'][i].apFinalRate * (Number(this.invoiceDetails['values'][i].yrcApData.netChargeResult[0]) / 100)).toFixed(2);
            if (this.invoiceDetails['values'][i].yrcArData.type === 'Rate') {
              for (let m =0;m<this.invoiceDetails['values'][i].yrcArData.rate.length;m++) {
                addRateAr +=  Number(this.invoiceDetails['values'][i].yrcArData.rate[m].finalRate);
                            }
                            console.log(addRate, addRateAr);
                            this.invoiceDetails['values'][i].arGrossRate += parseFloat((addRateAr * this.increasedValueForAR).toFixed(2));
            } else {
              for (let m =0;m<this.invoiceDetails['values'][i].yrcArData.rate.length;m++) {
                addRateAr +=  Number(this.invoiceDetails['values'][i].yrcArData.rate[m].finalDWRate);
                            }
                            console.log(addRate, addRateAr);
                            const currentDiffRate = Number(this.invoiceDetails['values'][i].yrcArData.diffRate) * this.increasedValueForAR;
// const value = 
                            this.invoiceDetails['values'][i].arGrossRate += parseFloat((Number(addRateAr * this.increasedValueForAR) + Number(currentDiffRate)).toFixed(2));
            }
            // if (this.invoiceDetails['values'][i].yrcArData.type === 'Rate') {
            //   // for (let m =0;m<this.invoiceDetails['values'][i].yrcArData.rate.length;m++) {
           

            //   // if ((Number(addRateAr) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].yrcArData.minCharges) * this.increasedValueForAR)) {
            //   //   if (this.invoiceDetails['values'][i].yrcArData.diffRate === '0') {
            //   //     this.invoiceDetails['values'][i].arGrossRate += parseFloat((addRateAr * this.increasedValueForAR).toFixed(2));
            //   //   } else {
            //   //     this.invoiceDetails['values'][i].arGrossRate += parseFloat(((addRateAr * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].yrcArData.diffRate) * this.increasedValueForAR)).toFixed(2));
            //   //   }
            //   // } else {
            //   //   if (this.invoiceDetails['values'][i].yrcArData.diffRate === '0') {
            //   //     this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].yrcArData.minCharges * this.increasedValueForAR).toFixed(2));
            //   //   } else {
            //   //     this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].yrcArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].yrcArData.diffRate) * this.increasedValueForAR)).toFixed(2));
            //   //   }
            //   // }
            // // }
            // } else {
            //   for (let m =0;m<this.invoiceDetails['values'][i].yrcArData.rate.length;m++) {

            //   if ((Number(this.invoiceDetails['values'][i].yrcArData.rate[m].finalDWRate) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].yrcArData.minCharges) * this.increasedValueForAR)) {
            //     if (this.invoiceDetails['values'][i].yrcArData.diffRate === '0') {
            //       this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].yrcArData.rate[m].finalDWRate * this.increasedValueForAR).toFixed(2));
            //     } else {
            //       this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].yrcArData.rate[m].finalDWRate * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].yrcArData.diffRate) * this.increasedValueForAR)).toFixed(2));
            //     }
            //   } else {
            //     if (this.invoiceDetails['values'][i].yrcArData.diffRate === '0') {
            //       this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].yrcArData.minCharges * this.increasedValueForAR).toFixed(2));
            //     } else {
            //       this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].yrcArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].yrcArData.diffRate) * this.increasedValueForAR)).toFixed(2));
            //     }
            //   }
            // }
            // }
            // this.invoiceDetails['values'][i].arGrossRate = (this.invoiceDetails['values'][i].arGrossRate).toFixed(2)
            // if ( Number(yrcArData.rate[0].finalRate) > Number(this.discountsValue.arAmc)) {
            //   this.invoiceDetails['values'][i].arGrossRate = yrcArData.rate[0].finalRate;
            // } else {
            // this.invoiceDetails['values'][i].arGrossRate = this.discountsValue.arAmc;
            // }
            let forteArRate = this.invoiceDetails['values'][i].arGrossRate * ((100 - Number(this.discountsValue.arDiscount)) * 0.01);
            console.log(forteArRate, Number(arAmc),(forteArRate) < (Number(arAmc)));
            if ((forteArRate) < (Number(arAmc))) {
              this.invoiceDetails['values'][i].arFinalRate = '';
              let xy = (arAmc).toString();
              console.log('x',arAmc);
              this.invoiceDetails['values'][i].arFinalRate =arAmc;
            } else {
              console.log(this.invoiceDetails['values'][i]);
              this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
            }
            console.log(this.invoiceDetails['values'][i]);

            // if ( (Number(this.invoiceDetails['values'][i].arFinalRate)) < Number(this.invoiceDetails['values'][i].apFinalRate)) {
            //   console.log(this.invoiceDetails['values'][i]);
            //   let x = Number(this.invoiceDetails['values'][i].apFinalRate) * 1.05;
            //   // discountedRate = x;
            //   this.invoiceDetails['values'][i].arFinalRate = x.toFixed(2);
            //   let y = x/((100-this.invoiceDetails['values'][i].finalARDiscount)/100);
            //   console.log('jefrin',y);
            //   this.invoiceDetails['values'][i].arGrossRate = y.toFixed(2);
            //   // finalRate = [];
            //   // finalRate.push(y);
            //   // this.finalRateCharge = []
            //   // this.finalRateCharge = this.netChargeArrSum(finalRate);

            // }

            // this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
            if (new Date() > new Date(this.invoiceDetails['values'][i].shipmentDate)) {
              this.invoiceDetails['values'][i].arFSC = this.invoiceDetails['values'][i].yrcArData.fuelSurcharge;
            } else {
              this.invoiceDetails['values'][i].arFSC = 0;
            }
            this.invoiceDetails['values'][i].fuelSurChargeArValue = (this.invoiceDetails['values'][i].arFinalRate * (Number(this.invoiceDetails['values'][i].arFSC) / 100)).toFixed(2);

            // if (this.invoiceDetails['values'][i].arFSC !== 0) {
            //   this.invoiceDetails['values'][i].selected = true;
            // }
            let assessorialsChargeValue = 0;
            this.ApAssessorialsArray = [];
            this.ArAssessorialsArray = [];
            let addCACharge;
            this.parseArSetMasterData.forEach((ele:any) => {
              if (ele.companyName === 'YRC') {
                if (this.invoiceDetails['values'][i].originState === 'CA' || this.invoiceDetails['values'][i].destinationState === 'CA') {
                  addCACharge = ele.caCharge;
                } else {
                  addCACharge = 0
                }
              }
            })
            this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
            this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
            console.log(this.invoiceDetails['values'][i].assessorial);
            if (this.invoiceDetails['values'][i].assessorial.length > 0) {
              let length = 0;
              let arLength = 0;
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              // for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {



              // assessorialsChargeValue = assessorialsChargeValue + this.invoiceDetails['values'][i].assessorial[j].charge;


              if (this.editApAccess === true) {
                for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                  if (this.invoiceDetails['values'][i].showRule !== true) {
                    this.parseSetMasterData.forEach((obj:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        obj.assessorial = JSON.parse(obj.assessorials);
                        console.log(this.accessorialFormAP.value.accessorials)
                        for (let l = 0; l < obj.assessorial.length; l++) {
                          if (this.accessorialFormAP.value.accessorials === obj.assessorial[l].name &&
                            this.accessorialFormAP.value.accessorials === this.invoiceDetails['values'][i].assessorial[j].assessorialName) {
                            console.log('test123');
                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === this.accessorialFormAP.value.accessorials) {
                                  let arCostData;
                                  this.viewApArAccess[k].apCost = this.accessorialFormAP.value.cost;
                                  arCostData = this.viewApArAccess[k];
                                  length = length + 1;
                                  this.ApAssessorialsArray.push(arCostData);
                                  console.log('thius', this.ApAssessorialsArray);
                                  break;
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(this.accessorialFormAP.value.cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(this.accessorialFormAP.value.max)) {
                                crtValue = Number(this.accessorialFormAP.value.max);
                              } else if (lsyrc < Number(this.accessorialFormAP.value.min)) {
                                crtValue = Number(this.accessorialFormAP.value.min);
                              } else if (lsyrc > Number(this.accessorialFormAP.value.min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  this.viewApArAccess[k].apCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  length = length + 1;

                                  this.ApAssessorialsArray.push(arCostData);
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  // console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          } else if (this.accessorialFormAP.value.accessorials !== obj.assessorial[l].name) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              console.log(obj);
                              console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l]);
                              // if(this.invoiceDetails['values'][i].forteApAssessorialRate != 0) {		
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let apCostData;
                                  this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                  apCostData = this.viewApArAccess[k];
                                  length = length + 1;
                                  this.ApAssessorialsArray.push(apCostData);
                                  // this.invoiceDetails['values'][i].forteApAssessorialRate =
                                  //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                                  //     Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': 0
                              };
                              length = length + 1;
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteApAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                              //     Number(apCostData.apCost)).toFixed(2);

                            }
                          }
                          // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                          //   let apCostData;
                          //   apCostData = {
                          //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                          //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                          //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                          //     'arCost': 0
                          //   };
                          //   length = length + 1;

                          //   this.ApAssessorialsArray.push(apCostData);
                          //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                          //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                          //   //     Number(apCostData.arCost)).toFixed(2);

                          // }
                          console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                          if (length === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                        }
                      }
                    });
                  } else if (this.invoiceDetails['values'][i].showRule === true) {
                    let profileAPAssessorials:any = [];
                    this.parseSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].yrcRules.ap.length > 0) {
                        if (obj.companyName === this.invoiceDetails['carrier']) {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.invoiceDetails['values'][i].yrcRules);
                          if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0) {
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].yrcRules.ap[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].yrcRules.ap[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].yrcRules.ap[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }

                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].yrcRules.ap[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].yrcRules.ap[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].yrcRules.ap[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ap[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].yrcRules.ap[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }

                            profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });

                          }
                          for (let k=0;k < profileAPAssessorials.length;k++){
                            console.log(profileAPAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAPAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': profileAPAssessorials[k].charge
                              }
                              this.ApAssessorialsArray.push(object);
                              length = length + 1;
  
                              this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;
  
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }


                        }
                      } else {
                        if (obj.companyName === this.invoiceDetails['carrier']) {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          // obj.assessorial.forEach((element:any) => {
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;

                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;

                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }
                }
              } else {
                for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                  let profileAPAssessorials:any = [];

                  this.parseSetMasterData.forEach((obj:any) => {
                    if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].yrcRules.ap.length > 0) {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        console.log(obj);
                        obj.assessorial = JSON.parse(obj.assessorials);

                        console.log(this.invoiceDetails['values'][i].yrcRules);
                        // if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                        if (this.invoiceDetails['values'][i].yrcRules.ap.length > 0) {
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].liftGateService !== '') {
                            profileLifeGateCharge = this.invoiceDetails['values'][i].yrcRules.ap[0].liftGateService;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'LiftGate Service') {
                                if (data.cwt === false) {
                                  profileLifeGateCharge = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileLifeGateCharge = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].limitedAccessDelivery !== '') {
                            profileLimitedAccessDelivery = this.invoiceDetails['values'][i].yrcRules.ap[0].limitedAccessDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Limited Access Delivery') {
                                if (data.cwt === false) {
                                  profileLimitedAccessDelivery = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileLimitedAccessDelivery = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].residentialDelivery !== '') {
                            profileResidentialCharge = this.invoiceDetails['values'][i].yrcRules.ap[0].residentialDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Residential Delivery') {
                                if (data.cwt === false) {
                                  profileResidentialCharge = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileResidentialCharge = crtValue;
                                }
                              }
                            })
                          }

                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].insideDelivery !== '') {
                            profileInsideDelivery = this.invoiceDetails['values'][i].yrcRules.ap[0].insideDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Inside Delivery') {
                                if (data.cwt === false) {
                                  profileInsideDelivery = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileInsideDelivery = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].notify !== '') {
                            profileNotify = this.invoiceDetails['values'][i].yrcRules.ap[0].notify;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Notify') {
                                if (data.cwt === false) {
                                  profileNotify = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileNotify = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].singleShipment !== '') {
                            profileSingleShipment = this.invoiceDetails['values'][i].yrcRules.ap[0].singleShipment;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Single Shipment') {
                                if (data.cwt === false) {
                                  profileSingleShipment = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileSingleShipment = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ap[0].deliveryAppointmentRequired !== '') {
                            profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].yrcRules.ap[0].deliveryAppointmentRequired;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Delivery Appointment Required') {
                                if (data.cwt === false) {
                                  profiledeliveryAppointmentRequired = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profiledeliveryAppointmentRequired = crtValue;
                                }
                              }
                            })
                          }

                          profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                            { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                            { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                            { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                            { assessorial: 'Notify', charge: profileNotify, id: 5 },
                            { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                            { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });

                        }
                        for (let k=0;k < profileAPAssessorials.length;k++){
                          console.log(profileAPAssessorials[k]);
                          if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                            let object = {
                              'name': profileAPAssessorials[k].assessorial,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'apCost': profileAPAssessorials[k].charge
                            }
                            this.ApAssessorialsArray.push(object);
                            length = length + 1;

                            this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            let apCostData;
                            apCostData = {
                              'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'arCost': 0,
                              'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                            };
                            length = length + 1;

                            this.ApAssessorialsArray.push(apCostData);
                            // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //     Number(apCostData.arCost)).toFixed(2);

                          }
                          if (length === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                        }


                      }
                    } else {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        obj.assessorial = JSON.parse(obj.assessorials);
                        console.log(obj);
                        // obj.assessorial.forEach((element:any) => {
                        for (let l = 0; l < obj.assessorial.length; l++) {
                          if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  length = length + 1;
                                  this.ApAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  this.viewApArAccess[k].apCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  length = length + 1;

                                  this.ApAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }

                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            let apCostData;
                            apCostData = {
                              'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'arCost': 0,
                              'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                            };
                            length = length + 1;

                            this.ApAssessorialsArray.push(apCostData);
                            // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //     Number(apCostData.arCost)).toFixed(2);

                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                            if (obj.assessorial[l].name === 'Residential Delivery') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                            if (obj.assessorial[l].name === 'Limited Access Delivery') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                            if (obj.assessorial[l].name === 'Limited Access Delivery') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          }
                          console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                          if (length === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                        }
                      }
                    }
                  });
                }
              }
              if (this.ApAssessorialsArray.length === 0) {
                this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
              } else {
                let value123 = 0;
                this.ApAssessorialsArray.forEach((res:any) => {
                  value123 += Number(res.apCost);
                });
                this.invoiceDetails['values'][i].forteApAssessorialRate = value123;
                console.log('value123', value123)
              }
              if (this.editArAccess === true) {
                for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                  if (this.invoiceDetails['values'][i].showRule !== true) {
                    this.parseArSetMasterData.forEach((obj:any) => {
                      if (obj.companyName === 'YRC') {
                        obj.assessorial = JSON.parse(obj.assessorials);
                        console.log(this.accessorialFormAR.value.accessorials)
                        for (let l = 0; l < obj.assessorial.length; l++) {
                        for (let k = 0; k < this.invoiceDetails['values'][i].yrcAccessArArray.length; k++) {
                          console.log('view', this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                        // if (this.viewApArAccess[k].name === this.invoiceDetails['values'][i].fxfpRate.arAssessorialName) {
                        //   let apCostData;
                        //   this.viewApArAccess[k].arCost = this.invoiceDetails['values'][i].fxfpRate.arCost;
                        //   apCostData = this.viewApArAccess[k];
                        //   arLength = arLength + 1;
                        //   this.ArAssessorialsArray.push(apCostData);
                        //   // this.invoiceDetails['values'][i].forteApAssessorialRate =
                        //   //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                        //   //     Number(obj.assessorial[l].cost)).toFixed(2);
                        //   console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                        // } else {
                          if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              // for (let k = 0; k < this.viewApArAccess.length; k++) {
                              //   console.log(this.viewApArAccess[k]);
                                if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                  arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }
                                  // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                          //   break;
                          // }

                              // }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max)) {
                                crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max);
                              } else if (lsyrc < Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min);
                              } else if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                crtValue = lsyrc;
                              }
                              // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = crtValue;
                                  arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                  // arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost
                                  arCostData.arCost = crtValue;

                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              // }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }

                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            let apCostData;
                            apCostData = {
                              'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'apCost': 0,
                              'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                            };
                            arLength = arLength + 1;

                            this.ArAssessorialsArray.push(apCostData);
                            // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //     Number(apCostData.arCost)).toFixed(2);

                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.invoiceDetails['values'][i].yrcAccessArArray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'LiftGate Service') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost

                                    length = length + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'LiftGate Service') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = crtValue

                                    length = length + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'LiftGate Service') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost

                                    length = length + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'LiftGate Service') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = crtValue;

                                    length = length + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                            if (obj.assessorial[l].name === 'Residential Delivery') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost

                                    length = length + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = crtValue;

                                    length = length + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp" || this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                            if (obj.assessorial[l].name === 'Limited Access Delivery') {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].yrcAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost

                                    length = length + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].yrcAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  // console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].yrcAccessArArray[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                    arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                    arCostData.arCost = crtValue;

                                    length = length + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
                          }

                        // }
if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                      }

                      // }
                          // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                          //   let apCostData;
                          //   apCostData = {
                          //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                          //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                          //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                          //     'arCost': 0
                          //   };
                          //   length = length + 1;

                          //   this.ApAssessorialsArray.push(apCostData);
                          //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                          //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                          //   //     Number(apCostData.arCost)).toFixed(2);

                          // }
                          console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                          // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                          //   break;
                          // }
                        }
                      }
                    });
                  } else if (this.invoiceDetails['values'][i].showRule === true) {
                 
                    let profileAssessorials:any = [];
                    this.parseArSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                        if (obj.companyName === 'YRC') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].yrcRules.ar[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].yrcRules.ar[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }

                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].yrcRules.ar[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].yrcRules.ar[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].yrcRules.ar[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].yrcRules.ar[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].yrcRules.ar[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }

                            profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });

                          }
                          for(let k=0;k<profileAssessorials.length;k++) {
                            console.log(profileAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object);
                              this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            }
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }

                        }
                      } else {
                        if (obj.companyName === 'FEDEX PRIORITY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;

                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;

                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }  else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                 
                 
                  }


                }
              } else {
                console.log('issue');

                for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                  let profileAssessorials:any = [];
                  this.parseArSetMasterData.forEach((obj:any) => {
                    if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                      if (obj.companyName === 'YRC') {
                        obj.assessorial = JSON.parse(obj.assessorials);
                        if (this.invoiceDetails['values'][i].yrcRules.ar.length > 0) {
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].liftGateService !== '') {
                            profileLifeGateCharge = this.invoiceDetails['values'][i].yrcRules.ar[0].liftGateService;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'LiftGate Service') {
                                if (data.cwt === false) {
                                  profileLifeGateCharge = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileLifeGateCharge = crtValue;
                                }
                              }
                            })
                          }
                          console.log(this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery);
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery !== '' && this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery !== undefined) {
                            profileLimitedAccessDelivery = this.invoiceDetails['values'][i].yrcRules.ar[0].limitedAccessDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              console.log(data, obj);
                              if (data.name === 'Limited Access Delivery') {
                                if (data.cwt === false) {
                                  profileLimitedAccessDelivery = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileLimitedAccessDelivery = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].residentialDelivery !== '') {
                            profileResidentialCharge = this.invoiceDetails['values'][i].yrcRules.ar[0].residentialDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Residential Delivery') {
                                if (data.cwt === false) {
                                  profileResidentialCharge = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileResidentialCharge = crtValue;
                                }
                              }
                            })
                          }

                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].insideDelivery !== '') {
                            profileInsideDelivery = this.invoiceDetails['values'][i].yrcRules.ar[0].insideDelivery;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Inside Delivery') {
                                if (data.cwt === false) {
                                  profileInsideDelivery = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileInsideDelivery = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].notify !== '') {
                            profileNotify = this.invoiceDetails['values'][i].yrcRules.ar[0].notify;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Notify') {
                                if (data.cwt === false) {
                                  profileNotify = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileNotify = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].singleShipment !== '') {
                            profileSingleShipment = this.invoiceDetails['values'][i].yrcRules.ar[0].singleShipment;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Single Shipment') {
                                if (data.cwt === false) {
                                  profileSingleShipment = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profileSingleShipment = crtValue;
                                }
                              }
                            })
                          }
                          if (this.invoiceDetails['values'][i].yrcRules.ar[0].deliveryAppointmentRequired !== '') {
                            profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].yrcRules.ar[0].deliveryAppointmentRequired;
                          } else {
                            obj.assessorial.forEach((data:any) => {
                              if (data.name === 'Delivery Appointment Required') {
                                if (data.cwt === false) {
                                  profiledeliveryAppointmentRequired = data.cost;
                                } else {
                                  const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(data.max)) {
                                    crtValue = Number(data.max);
                                  } else if (lsyrc < Number(data.min)) {
                                    crtValue = Number(data.min);
                                  } else if (lsyrc > Number(data.min)) {
                                    crtValue = lsyrc;
                                  }
                                  profiledeliveryAppointmentRequired = crtValue;
                                }
                              }
                            })
                          }

                          profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                            { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                            { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                            { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                            { assessorial: 'Notify', charge: profileNotify, id: 5 },
                            { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                            { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });

                        }
                        for(let k=0;k<profileAssessorials.length;k++) {
                          console.log(profileAssessorials[k]);
                          if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                            let object = {
                              'name': profileAssessorials[k].assessorial,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'arCost': profileAssessorials[k].charge
                            }
                            arLength = arLength + 1;
                            this.ArAssessorialsArray.push(object);
                            this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            let apCostData;
                            apCostData = {
                              'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'apCost': 0,
                              'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                            };
                            arLength = arLength + 1;
                            this.ArAssessorialsArray.push(apCostData);
                            // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //     Number(apCostData.arCost)).toFixed(2);

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp" || this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                            if (profileAssessorials[k].assessorial === 'LiftGate Service') {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object);
                          }

                          }
                           else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                            if (profileAssessorials[k].assessorial === 'Residential Delivery') {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object); 
                          }
                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                            if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                              let object = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object); 
                          }

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                            if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object); 
                          }

                          }
                          if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                        }


                      }
                    } else {
                      if (obj.companyName === 'YRC') {
                        obj.assessorial = JSON.parse(obj.assessorials);
                        console.log(obj);
                        for (let l = 0; l < obj.assessorial.length; l++) {
                          if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }

                          } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            let apCostData;
                            apCostData = {
                              'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                              'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                              'apCost': 0,
                              'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                            };
                            arLength = arLength + 1;

                            this.ArAssessorialsArray.push(apCostData);
                            // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //     Number(apCostData.arCost)).toFixed(2);

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {

                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'LiftGate PickUp' || this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          }

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                            if (obj.assessorial[l].name === 'LiftGate Service') {

                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          }

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                            if (obj.assessorial[l].name === 'Residential Delivery') {

                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          }

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp" ) {
                            if (obj.assessorial[l].name === 'Limited Access Delivery') {

                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          }

                          } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                            if (obj.assessorial[l].name === 'Limited Access Delivery') {

                            if (obj.assessorial[l].cwt === false) {
                              console.log(obj);
                              console.log(obj.assessorial[l]);
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;
                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                            } else {
                              const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                              let crtValue:any;
                              if (lsyrc > Number(obj.assessorial[l].max)) {
                                crtValue = Number(obj.assessorial[l].max);
                              } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                crtValue = Number(obj.assessorial[l].min);
                              } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                crtValue = lsyrc;
                              }
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                console.log(this.viewApArAccess[k]);
                                if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                  let arCostData;
                                  this.viewApArAccess[k].arCost = crtValue;
                                  arCostData = this.viewApArAccess[k];
                                  arLength = arLength + 1;

                                  this.ArAssessorialsArray.push(arCostData);
                                  this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                }

                              }
                              // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                            }
                          }

                          }
                          console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                          if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            break;
                          }
                        }
                      }
                    }
                  });
                }

              }
              if (this.ArAssessorialsArray.length === 0) {
                this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
              } else {
                let value123 = 0;
                this.ArAssessorialsArray.forEach((res:any) => {
                  value123 += Number(res.arCost);
                });
                this.invoiceDetails['values'][i].forteArAssessorialRate = value123;
                console.log('value123', value123)
              }
              // });
              //     }
              //   }
              // });
              // }

              assessorialsChargeValue =  Number(this.invoiceDetails['values'][i].forteArAssessorialRate);
              this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
              this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
              console.log('this.invoiceDetails[values][i].ApAssessorialsArray', this.invoiceDetails['values'][i].ApAssessorialsArray, this.invoiceDetails['values'][i].ArAssessorialsArray);
            } else {
              this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
              this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
              assessorialsChargeValue = 0;
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
              this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
            }



            // tslint:disable-next-line:max-line-length
            this.invoiceDetails['values'][i].totalForteRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeArValue) + Number(this.invoiceDetails['values'][i].arFinalRate) + Number(assessorialsChargeValue) + Number(addCACharge) + Number(this.invoiceDetails['values'][i].yrcArData.additionalRate)).toFixed(2);
            console.log('this.invoiceDetails[values][i].fedexPriorityData', this.invoiceDetails['values'][i].totalForteRate);
            // tslint:disable-next-line:max-line-length
            this.invoiceDetails['values'][i].totalForteApRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeApValue) + Number(this.invoiceDetails['values'][i].apFinalRate) + Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(this.invoiceDetails['values'][i].yrcApData.additionalCharge)).toFixed(2);
            if (this.invoiceDetails['values'][i].yrcCostplusFactor !== null && this.costplusValueEnabled === true && this.invoiceDetails['values'][i].yrcCostplusFactor !== undefined) {
              let valuexx =  1 + Number(this.invoiceDetails['values'][i].yrcCostplusFactor) /100;
              console.log(valuexx);
              this.invoiceDetails['values'][i].totalForteRate = (this.invoiceDetails['values'][i].totalForteApRate * valuexx).toFixed(2);
            }
            // tslint:disable-next-line:max-line-length
            this.invoiceDetails['values'][i].marginRate = Number(this.invoiceDetails['values'][i].totalForteRate - (Number(this.invoiceDetails['values'][i].totalForteApRate))).toFixed(2);
            if (this.invoiceDetails['values'][i].marginRate < 0) {
              this.invoiceDetails['values'][i].negative = true;
            } else {
              this.invoiceDetails['values'][i].negative = false;

            }
            // tslint:disable-next-line:max-line-length
            // this.invoiceDetails['values'][i].margin = (((Number(this.invoiceDetails['values'][i].totalForteRate) - Number(this.invoiceDetails['values'][i].apFinalRate)) / (Number(this.invoiceDetails['values'][i].apFinalRate)))).toFixed(2);            // ((Number(this.invoiceDetails['values'][i].totalForteRate) - ()))
            this.invoiceDetails['values'][i].margin = ((Number(this.invoiceDetails['values'][i].marginRate) / (Number(this.invoiceDetails['values'][i].totalForteRate))) * 100).toFixed(2); 


            let invoiceAmount;
            if (this.invoiceDetails['values'][i].invoiceAmount.includes(',')) {
              invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount.replace(',', '')
            } else {
              invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount;

            }
            let charge = (Number(invoiceAmount) + Number(this.invoiceDetails['values'][i].fuelCharge) + Number(this.invoiceDetails['values'][i].assessorialCharge));
            this.invoiceDetails['values'][i].variance = (invoiceAmount - this.invoiceDetails['values'][i].totalForteRate).toFixed(2);
            console.log(invoiceAmount,this.invoiceDetails['values'][i].fuelCharge, this.invoiceDetails['values'][i].assessorialCharge, this.invoiceDetails['values'][i].totalForteRate );
            console.log(this.invoiceDetails['values'][i].variance);
            // tslint:disable-next-line:max-line-length
            this.invoiceDetails['values'][i].optimizeValue = ((invoiceAmount / this.invoiceDetails['values'][i].totalForteRate) * 100).toFixed(2);

          
            console.log('Value 3', this.invoiceDetails['values'][i].optimizeValue);
            this.resultForPriorityArray = [];
            if (this.invoiceDetails['values'][i].selected === true) {
              this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
              this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
              this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
              this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
              this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
              this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
            }
console.log(this.totalInvoiceAmountArray);

            console.log(this.editValue, this.editArValue);
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData === undefined) {
                console.log(this.yrcFormValues);
                if (this.yrcFormValues !== undefined) {
                  console.log('savedformvalues', this.yrcFormValues);
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.yrcFormValues.apAmc,
                    arAmc: this.yrcFormValues.arAmc,
                    apDiscount: 'NA',
                    arDiscount: this.yrcFormValues.arDiscount

                  });
                  this.initialYRCApAMC = this.yrcFormValues.apAmc;
                  this.initialYRCArAMC = this.yrcFormValues.arAmc;
                  this.initialYRCApDiscount = this.yrcFormValues.apDiscount;
                  this.initialYrcARDiscount = this.yrcFormValues.arDiscount;
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: 'NA',
                            arDiscount: element.discount

                          });
                          this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;
                          this.initialYRCApAMC = obj.amc;
                  this.initialYRCArAMC = element.amc;
                  this.initialYRCApDiscount = obj.discount;
                  // this.initialYrcARDiscount = obj.discount;
                        }
                      }
                    });
                  });
                }
              } else {
                console.log(this.invoiceDetails);

                if (this.invoiceDetails['values'][i].yrcRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.invoiceDetails['values'][i].yrcRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].yrcRate.arAmc,
                    apDiscount: 'NA',
                    arDiscount: this.invoiceDetails['values'][i].yrcRate.arDiscount

                  });
                  this.initialYRCApAMC = this.invoiceDetails['values'][i].yrcRate.apAmc;
                  this.initialYRCArAMC = this.invoiceDetails['values'][i].yrcRate.arAmc;
                  this.initialYRCApDiscount = this.invoiceDetails['values'][i].yrcRate.apDiscount;
                  this.initialYrcARDiscount = this.invoiceDetails['values'][i].yrcRate.arDiscount;
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: 'NA',
                            arDiscount: element.discount

                          });
                          this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;
                          this.initialYRCApAMC = obj.amc;
                          this.initialYRCArAMC = element.amc;
                          this.initialYRCApDiscount = obj.discount;
                        }
                      }
                    });
                  });
                }
                this.initialYrcARDiscount = this.invoiceDetails['values'][i].finalARDiscount;
               
              }
            } else if (this.editValue === true || this.editArValue === true) {
              console.log(this.workbookForm);

              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value');
            }
console.log(this.apData);
          }
          } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
            console.log(this.invoiceDetails['carrier']);
            this.increasedValueForAR = 1.3112253;
            this.enableReadOnly = false;
            let arDataFrommArray, apDataFrommArray;
            let rulesNamesArray:any = [];
            const setApMasterData:any= localStorage.getItem('aptableData');
            let apDiscount, apAmc, arDiscount, arAmc;
            this.parseSetMasterData = JSON.parse(setApMasterData);
            const setArMasterData:any= localStorage.getItem('artableData');
            let profileMinimumCharge, profileLifeGateCharge:any, profileResidentialCharge:any, profileLimitedAccessDelivery:any,
              profileInsideDelivery:any, profileNotify:any, profileSingleShipment:any, singleShipmentsetMasterData:any, profiledeliveryAppointmentRequired:any;
            this.parseArSetMasterData = JSON.parse(setArMasterData);
            console.log(this.parseSetMasterData);
            this.invoiceDetails['carrierNew'] = 'FEDEX ECONOMY';
            this.invoiceDetails['values'][i].ApAssessorialsArray = [];
            this.invoiceDetails['values'][i].ArAssessorialsArray = [];
            // this.invoiceDetails['values'][i].finalAPDiscount = undefined;
            // this.invoiceDetails['values'][i].finalARDiscount = undefined;
            console.log(this.invoiceDetails);
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                console.log('sect', this.invoiceDetails['values'][i])
                if (this.invoiceDetails['values'][i].fxfeRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.invoiceDetails['values'][i].fxfeRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].fxfeRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][i].fxfeRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][i].fxfeRate.arDiscount
                  });
                } else {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                }

              } else {
                console.log(this.fedexEconomyValues);
                if (this.fedexEconomyValues !== undefined) {
                  console.log('savedformvalues', this.fedexEconomyValues);
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.fedexEconomyValues.apAmc,
                    arAmc: this.fedexEconomyValues.arAmc,
                    apDiscount: this.fedexEconomyValues.apDiscount,
                    arDiscount: this.fedexEconomyValues.arDiscount

                  });
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === 'FEDEX ECONOMY') {
                        if (element.companyName === 'FEDEX ECONOMY') {
                          this.workbookForm.patchValue({
                            carrier: 'FEDEX ECONOMY',
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount
                          });
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value');
            }
            if (this.selectedAnalyticsCodeData !== undefined) {

              console.log('selected code', this.selectedAnalyticsCodeData);
              // this.invoiceDetails['values'][i].fxfeRate = JSON.parse(this.invoiceDetails['values'][i].fxfeRate);
              if (this.editValue === false && this.editArValue === false) {
                if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];

                  apDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  rulesNamesArray = [];

                  apDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = false;

                  console.log(apDiscount, arDiscount, apAmc);
                }
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                console.log(this.workbookForm.value);
                console.log(this.invoiceDetails['values'][i].showRule);
                if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];

                  apDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  apDiscount = this.workbookForm.value.apDiscount;
                  apAmc = this.workbookForm.value.apAmc;
                  arDiscount = this.workbookForm.value.arDiscount;
                  arAmc = this.workbookForm.value.arAmc;
                  rulesNamesArray = [];
                  this.invoiceDetails['values'][i].showRule = false;

                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                }
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  rulesNamesArray = [];

                  apDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  rulesNamesArray = [];

                  apDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = false;

                  console.log(apDiscount, arDiscount, apAmc);
                }
              }
              if (this.invoiceDetails['values'][i].fxfeRate.apAccess === true) {
                this.editAPAcc = true;
                this.accessorialFormAP.patchValue({
                  accessorials: this.invoiceDetails['values'][i].fxfeRate.apAssessorialName,
                  cost: this.invoiceDetails['values'][i].fxfeRate.apCost,
                  min: this.invoiceDetails['values'][i].fxfeRate.apMin,
                  max: this.invoiceDetails['values'][i].fxfeRate.apMax
                });
            
                // this.parseSetMasterData.forEach((data:any) => {
                //   if (data.companyName === this.invoiceDetails['carrierNew']) {
                //     data.assessorial = JSON.parse(data.assessorials);
                //     data.assessorial.forEach((ele:any) => {
                //       if (ele.name === this.invoiceDetails['values'][i].fxfeRate.apAssessorialName) {
                //         ele.cost = this.invoiceDetails['values'][i].fxfeRate.apCost;
                //       }
                //     })
                //     this.apData = data.assessorial;
                //   }
                //   console.log('Ap Assesss', this.apData)
                // })
              }  else if (this.invoiceDetails['values'][i].fedexEcoAccessApArray != undefined && this.invoiceDetails['values'][i].fedexEcoAccessApArray.length > 1){
                this.apData = this.invoiceDetails['values'][i].fedexEcoAccessApArray;
                              } else {
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrierNew'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrierNew']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
                this.apData.forEach((acc:any) => {
                  if(acc.name === this.invoiceDetails['values'][i].fxfeRate.apAssessorialName) {
                    acc.cost = this.invoiceDetails['values'][i].fxfeRate.apCost;
                    acc.min = this.invoiceDetails['values'][i].fxfeRate.apMin;
                    acc.max = this.invoiceDetails['values'][i].fxfeRate.apMax;
                  }
                });

              }
              if (this.invoiceDetails['values'][i].fxfeRate.arAccess === true) {
                this.editARAcc = true;
                this.accessorialFormAR.patchValue({
                  accessorials: this.invoiceDetails['values'][i].fxfeRate.arAssessorialName,
                  cost: this.invoiceDetails['values'][i].fxfeRate.arCost,
                  min: this.invoiceDetails['values'][i].fxfeRate.arMin,
                  max: this.invoiceDetails['values'][i].fxfeRate.arMax
                });
                this.parseSetMasterData.forEach((data:any) => {
                  if (data.companyName === this.invoiceDetails['carrierNew']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    data.assessorial.forEach((ele:any) => {
                      if (ele.name === this.invoiceDetails['values'][i].fxfeRate.arAssessorialName) {
                        ele.cost = this.invoiceDetails['values'][i].fxfeRate.arCost;
                      }
                    })
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              } else if (this.invoiceDetails['values'][i].fedexEcoAccessArArray != undefined && this.invoiceDetails['values'][i].fedexEcoAccessArArray.length > 1){
                this.arData = this.invoiceDetails['values'][i].fedexEcoAccessArArray;
                              } else {
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrierNew'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrierNew']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              }
              if (this.invoiceDetails['values'][i].economyshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].ecochangedArDiscount;
                // arDiscount = this.invoiceDetails['values'][i].yrcchangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].economyshowEdit;
              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
            } else {
              this.parseSetMasterData.forEach((obj:any) => {
                this.parseArSetMasterData.forEach((element:any) => {
                  if (obj.companyName === this.invoiceDetails['carrierNew']) {
                    if (element.companyName === this.invoiceDetails['carrierNew']) {
                      if (this.editValue === false && this.editArValue === false) {
                        if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          rulesNamesArray = [];

                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                        console.log(this.invoiceDetails['values'][i].showRule);
                        if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = obj.discount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {

                          rulesNamesArray = [];
                          this.invoiceDetails['values'][i].showRule = false;
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                        if (this.invoiceDetails['values'][i].economyRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = obj.discount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].economyRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].economyRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].economyRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].economyRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          rulesNamesArray = [];
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          arDiscount = element.discount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                      }
                      if (element.type === 'AR') {
                        this.fuelSurCharge = element.fuelsurcharge;
                      }
                    }
                  }
                });
              });
              if (this.invoiceDetails['values'][i].economyshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].ecochangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].economyshowEdit;

              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              // this.parseSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrierNew'], 'this.parseSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrierNew']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.apData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
              // this.parseArSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrierNew'], 'this.parseArSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrierNew']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.arData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
            }
            // this.discountsValue = {
            //   apDiscount: (apDiscount).toString(),
            //   arDiscount: (arDiscount).toString(),
            //   apAmc: (apAmc).toString(),
            //   arAmc: (arAmc).toString()
            // }
            if (this.invoiceDetails['values'][i].fedexEconomyApData === undefined) {
              this.invoiceDetails['values'][i].fedexEconomyApData = this.invoiceDetails['values'][i].rateResponse.fedexEcoAp;
              this.invoiceDetails['values'][i].fedexEconomyArData = this.invoiceDetails['values'][i].rateResponse.fedexEcoAr;
            }
            console.log(this.invoiceDetails['values'][i].fedexEconomyArData);

            if (this.invoiceDetails['values'][i].fedexEconomyApData !== 'Destination Base Zip Not Found' && this.invoiceDetails['values'][i].fedexEconomyArData !== 'Destination Base Zip Not Found') {

              // Final Ap Rate Calculation 
              // let forteApRate = (100 - Number(this.discountsValue.apDiscount)) * 0.01;
              this.invoiceDetails['values'][i].apGrossRate = 0;
              this.invoiceDetails['values'][i].arGrossRate = 0;
              let addRate = 0;
              let addRateAr =0;
              for (let m =0;m<this.invoiceDetails['values'][i].fedexEconomyApData.rate.length;m++) {
                 addRate += Number(this.invoiceDetails['values'][i].fedexEconomyApData.rate[m].finalRate);
              }
              for (let m =0;m<this.invoiceDetails['values'][i].fedexEconomyArData.rate.length;m++) {
                addRateAr += Number(this.invoiceDetails['values'][i].fedexEconomyArData.rate[m].finalRate);
             }
              console.log(addRate);
              // for (let m =0;m<this.invoiceDetails['values'][i].fedexEconomyApData.rate.length;m++) {

              if (Number(addRate) > Number(this.invoiceDetails['values'][i].fedexEconomyApData.minCharges)) {
                
                if (this.invoiceDetails['values'][i].fedexEconomyApData.originalDiffRateList[0].diffRate === '0') {
                  console.log('data')
                  this.invoiceDetails['values'][i].apGrossRate +=  parseFloat(Number(addRate).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate +=  parseFloat((Number(addRate) + Number(this.invoiceDetails['values'][i].fedexEconomyApData.originalDiffRateList[0].diffRate)).toFixed(2));
                }
              } else {
                console.log(addRate, this.discountsValue.apAmc);
                if (this.invoiceDetails['values'][i].fedexEconomyApData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate +=  parseFloat(Number(this.invoiceDetails['values'][i].fedexEconomyApData.minCharges).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate +=  parseFloat((Number(this.invoiceDetails['values'][i].fedexEconomyApData.minCharges) + Number(this.invoiceDetails['values'][i].fedexEconomyApData.originalDiffRateList[0].diffRate)).toFixed(2));
                }
              }
              // }
              // this.invoiceDetails['values'][i].apGrossRate = Number(this.invoiceDetails['values'][i].apGrossRate).toFixed(2)
              // if (Number(fedexEconomyApData.rate[0].finalRate) > Number(this.discountsValue.apAmc)) {
              // this.invoiceDetails['values'][i].apGrossRate = fedexEconomyApData.rate[0].finalRate; 
              // } else {
              // this.invoiceDetails['values'][i].apGrossRate = this.discountsValue.apAmc; 
              // }
              let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.discountsValue.apDiscount)) * 0.01);
              // this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);
              if ((forteApRate) < apAmc) {
                this.invoiceDetails['values'][i].apFinalRate = (apAmc).toString();
              } else {
                this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);
              }
              this.invoiceDetails['values'][i].fuelSurChargeApValue = (this.invoiceDetails['values'][i].apFinalRate * (Number(this.invoiceDetails['values'][i].fedexEconomyApData.fuelSurcharge) / 100)).toFixed(2);

              // Final Ar Rate Calculation 
              // let forteArRate = (100 - Number(this.discountsValue.arDiscount)) * 0.01;
              // Final Ar Rate Calculation 
              // for (let m =0;m<this.invoiceDetails['values'][i].fedexEconomyArData.rate.length;m++) {

              if ((Number(addRateAr) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].fedexEconomyArData.minCharges) * this.increasedValueForAR)) {
                if (this.invoiceDetails['values'][i].fedexEconomyArData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat((addRateAr * this.increasedValueForAR).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat(((addRateAr
                    * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].fedexEconomyArData.originalDiffRateList[0].diffRate) * this.increasedValueForAR)).toFixed(2));
                }
              } else {
                if (this.invoiceDetails['values'][i].fedexEconomyArData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].fedexEconomyArData.minCharges * this.increasedValueForAR).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].fedexEconomyArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].fedexEconomyArData.originalDiffRateList[0].diffRate) * this.increasedValueForAR)).toFixed(2));
                }
              }
            // }
            // this.invoiceDetails['values'][i].arGrossRate = (this.invoiceDetails['values'][i].arGrossRate).toFixed(2)

              // if (Number(fedexEconomyArData.rate[0].finalRate) > Number(this.discountsValue.arAmc)) {
              // this.invoiceDetails['values'][i].arGrossRate = fedexEconomyArData.rate[0].finalRate;            
              // } else {
              // this.invoiceDetails['values'][i].arGrossRate = this.discountsValue.arAmc;
              // }
              let forteArRate = this.invoiceDetails['values'][i].arGrossRate * ((100 - Number(this.discountsValue.arDiscount)) * 0.01);
              // this.invoiceDetails['values'][i].fuelSurChargeArValue = (forteArRate * (Number(this.invoiceDetails['values'][i].fedexEconomyArData.fuelSurcharge) / 100)).toFixed(2);
              // this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
              if ((forteArRate) < arAmc) {
                this.invoiceDetails['values'][i].arFinalRate = (arAmc).toString();
              } else {
                this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
              }
              if (new Date() > new Date(this.invoiceDetails['values'][i].shipmentDate)) {
                this.invoiceDetails['values'][i].arFSC = this.invoiceDetails['values'][i].fedexEconomyArData.fuelSurcharge;
              } else {
                this.invoiceDetails['values'][i].arFSC = 0;
              }
              this.invoiceDetails['values'][i].fuelSurChargeArValue = (this.invoiceDetails['values'][i].arFinalRate * (Number(this.invoiceDetails['values'][i].arFSC) / 100)).toFixed(2);

              // if (this.invoiceDetails['values'][i].arFSC !== 0) {
              //   this.invoiceDetails['values'][i].selected = true;
              // }
              let assessorialsChargeValue = 0;
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              let addCACharge;
              this.parseArSetMasterData.forEach((ele:any) => {
                if (ele.companyName === 'FEDEX ECONOMY') {
                  if (this.invoiceDetails['values'][i].originState === 'CA' || this.invoiceDetails['values'][i].destinationState === 'CA') {
                    addCACharge = ele.caCharge;
                  } else {
                    addCACharge = 0
                  }
                }
              })

              this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
              this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
              console.log(this.invoiceDetails['values'][i].assessorial);
              if (this.invoiceDetails['values'][i].assessorial.length > 0) {
                let length = 0;
                let arLength = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                // for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {



                // assessorialsChargeValue = assessorialsChargeValue + this.invoiceDetails['values'][i].assessorial[j].charge;


                if (this.editApAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAP.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.accessorialFormAP.value.accessorials === obj.assessorial[l].name &&
                              this.accessorialFormAP.value.accessorials === this.invoiceDetails['values'][i].assessorial[j].assessorialName) {
                              console.log('test123');
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === this.accessorialFormAP.value.accessorials) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = this.accessorialFormAP.value.cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    console.log('thius', this.ApAssessorialsArray);
                                    break;
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.accessorialFormAP.value.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.accessorialFormAP.value.max)) {
                                  crtValue = Number(this.accessorialFormAP.value.max);
                                } else if (lsyrc < Number(this.accessorialFormAP.value.min)) {
                                  crtValue = Number(this.accessorialFormAP.value.min);
                                } else if (lsyrc > Number(this.accessorialFormAP.value.min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;

                                    this.ApAssessorialsArray.push(arCostData);
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    // console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            } else if (this.accessorialFormAP.value.accessorials !== obj.assessorial[l].name) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                console.log(obj);
                                console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l]);
                                // if(this.invoiceDetails['values'][i].forteApAssessorialRate != 0) {		
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let apCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    apCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(apCostData);

                                    console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                                  }

                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                                  'arCost': 0
                                };
                                length = length + 1;
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteApAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                                //     Number(apCostData.apCost)).toFixed(2);

                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': 0
                              };
                              length = length + 1;
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteApAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                              //     Number(apCostData.apCost)).toFixed(2);

                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                      let profileAPAssessorials:any = [];

                      this.parseSetMasterData.forEach((obj:any) => {
  
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].economyRules.ap.length > 0) {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            console.log(obj);
                            obj.assessorial = JSON.parse(obj.assessorials);
  
                            console.log(this.invoiceDetails['values'][i].economyRules);
                            if (this.invoiceDetails['values'][i].economyRules.ap.length > 0) {
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].economyRules.ap[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    profileLifeGateCharge = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery !== '' && this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery !== undefined) {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    profileLimitedAccessDelivery = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].economyRules.ap[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    profileResidentialCharge = data.cost;
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].economyRules.ap[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    profileInsideDelivery = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].economyRules.ap[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    profileNotify = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].economyRules.ap[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    profileSingleShipment = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ap[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].economyRules.ap[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  }
                                })
                              }
                              profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
                            }
                            for (let k=0;k < profileAPAssessorials.length;k++){
                              console.log(profileAPAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAPAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': profileAPAssessorials[k].charge
                                }
                                this.ApAssessorialsArray.push(object);
                                length = length + 1;
    
                                this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': 0,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                length = length + 1;
    
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
    
                              }
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        } else {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            console.log(obj);
                            obj.assessorial = JSON.parse(obj.assessorials);
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let apCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    apCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(apCostData);
                                  }
  
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': 0
                                };
                                length = length + 1;
                                this.ApAssessorialsArray.push(apCostData);
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                    }

                  }
                } else {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAPAssessorials:any = [];

                    this.parseSetMasterData.forEach((obj:any) => {

                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].economyRules.ap.length > 0) {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);

                          console.log('jjj',this.invoiceDetails['values'][i].economyRules);
                          if (this.invoiceDetails['values'][i].economyRules.ap.length > 0) {
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].economyRules.ap[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  profileLifeGateCharge = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery !== '' && this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery !== undefined) {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].economyRules.ap[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  profileLimitedAccessDelivery = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].economyRules.ap[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  profileResidentialCharge = data.cost;
                                }
                              })
                            }

                            if (this.invoiceDetails['values'][i].economyRules.ap[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].economyRules.ap[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  profileInsideDelivery = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].economyRules.ap[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  profileNotify = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].economyRules.ap[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  profileSingleShipment = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ap[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].economyRules.ap[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  profiledeliveryAppointmentRequired = data.cost;
                                }
                              })
                            }
                            profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
                          }
                          for (let k=0;k < profileAPAssessorials.length;k++){
                            console.log(profileAPAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAPAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': profileAPAssessorials[k].charge
                              }
                              this.ApAssessorialsArray.push(object);
                              length = length + 1;
  
                              this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;
  
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      } else {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let apCostData;
                                  this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                  apCostData = this.viewApArAccess[k];
                                  length = length + 1;
                                  this.ApAssessorialsArray.push(apCostData);
                                }

                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': 0
                              };
                              length = length + 1;
                              this.ApAssessorialsArray.push(apCostData);
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }

                }
                if (this.ApAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ApAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.apCost);
                  });
                  this.invoiceDetails['values'][i].forteApAssessorialRate = value123;
                  console.log('value123', value123)
                }
                if (this.editArAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAR.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                          for (let k = 0; k < this.invoiceDetails['values'][i].fedexEcoAccessArArray.length; k++) {
                            console.log('view', this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                          // if (this.viewApArAccess[k].name === this.invoiceDetails['values'][i].fxfpRate.arAssessorialName) {
                          //   let apCostData;
                          //   this.viewApArAccess[k].arCost = this.invoiceDetails['values'][i].fxfpRate.arCost;
                          //   apCostData = this.viewApArAccess[k];
                          //   arLength = arLength + 1;
                          //   this.ArAssessorialsArray.push(apCostData);
                          //   // this.invoiceDetails['values'][i].forteApAssessorialRate =
                          //   //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                          //   //     Number(obj.assessorial[l].cost)).toFixed(2);
                          //   console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                          // } else {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                //   console.log(this.viewApArAccess[k]);
                                  if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
                                    // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = crtValue;
                                    arCostData = crtValue
                                    // arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost
                                    arCostData.arCost = crtValue;
  
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
  
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.invoiceDetails['values'][i].fedexEcoAccessArArray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].yrcAccessArArray[k];
                                      arCostData.arCost = crtValue
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    // console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    // console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexEcoAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexEcoAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
  
                          // }
  if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                        }
  
                        // }
                            // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            //   let apCostData;
                            //   apCostData = {
                            //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                            //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                            //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                            //     'arCost': 0
                            //   };
                            //   length = length + 1;
  
                            //   this.ApAssessorialsArray.push(apCostData);
                            //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //   //     Number(apCostData.arCost)).toFixed(2);
  
                            // }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                   
                      let profileAssessorials:any = [];
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            if (this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].economyRules.ar[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    if (data.cwt === false) {
                                      profileLifeGateCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLifeGateCharge = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].limitedAccessDelivery !== '') {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].economyRules.ar[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    if (data.cwt === false) {
                                      profileLimitedAccessDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLimitedAccessDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].economyRules.ar[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    if (data.cwt === false) {
                                      profileResidentialCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileResidentialCharge = crtValue;
                                    }
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].economyRules.ar[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    if (data.cwt === false) {
                                      profileInsideDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileInsideDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].economyRules.ar[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    if (data.cwt === false) {
                                      profileNotify = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileNotify = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].economyRules.ar[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    if (data.cwt === false) {
                                      profileSingleShipment = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileSingleShipment = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].economyRules.ar[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].economyRules.ar[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    if (data.cwt === false) {
                                      profiledeliveryAppointmentRequired = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profiledeliveryAppointmentRequired = crtValue;
                                    }
                                  }
                                })
                              }
  
                              profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                            }
                            for(let k=0;k<profileAssessorials.length;k++) {
                              console.log(profileAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                                this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              }
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
  
                          }
                        } else {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            console.log(obj);
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
  
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
  
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                                if (obj.assessorial[l].name === 'Residential Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                   
                   
                    }
  
  
                  }
                } else {
                  console.log('issue');
  
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAssessorials:any = [];
                    this.parseArSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          if (this.invoiceDetails['values'][i].economyRules.ar.length > 0) {
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].economyRules.ar[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].economyRules.ar[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].economyRules.ar[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }
  
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].economyRules.ar[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].economyRules.ar[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].economyRules.ar[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].economyRules.ar[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }
  
                            profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                          }
                          for(let k=0;k<profileAssessorials.length;k++) {
                            console.log(profileAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object);
                              this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp" || this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (profileAssessorials[k].assessorial === 'LiftGate Service') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                            }
  
                            }
                             else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (profileAssessorials[k].assessorial === 'Residential Delivery') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp" ) {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            }
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
  
  
                        }
                      } else {
                        if (obj.companyName === 'YRC') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
  
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp' || this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }
  
                }
                if (this.ArAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ArAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.arCost);
                  });
                  this.invoiceDetails['values'][i].forteArAssessorialRate = value123;
                  console.log('value123', value123)
                }
                // });
                //     }
                //   }
                // });
                // }

                assessorialsChargeValue =  Number(this.invoiceDetails['values'][i].forteArAssessorialRate);
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
                console.log('this.invoiceDetails[values][i].ApAssessorialsArray', this.invoiceDetails['values'][i].ApAssessorialsArray, this.invoiceDetails['values'][i].ArAssessorialsArray);
              } else {
                this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                assessorialsChargeValue = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
              }
              console.log('jjj',addCACharge, assessorialsChargeValue);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeArValue) + Number(this.invoiceDetails['values'][i].arFinalRate) + Number(assessorialsChargeValue) + Number(addCACharge)).toFixed(2);
              console.log('this.invoiceDetails[values][i].fedexPriorityData', this.invoiceDetails['values'][i].totalForteRate);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteApRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeApValue) + Number(this.invoiceDetails['values'][i].apFinalRate) + Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(addCACharge)).toFixed(2);
              if ( this.invoiceDetails['values'][i].economyCostplusFactor !== null && this.costplusValueEnabled === true && this.invoiceDetails['values'][i].economyCostplusFactor !== undefined && this.invoiceDetails['values'][i].economyCostplusFactor !== '') {
                let valuexx =  1 + Number( this.invoiceDetails['values'][i].economyCostplusFactor) /100;
                console.log('costplus',valuexx);
                this.invoiceDetails['values'][i].totalForteRate = (this.invoiceDetails['values'][i].totalForteApRate * valuexx).toFixed(2);
              }
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].marginRate = Number(this.invoiceDetails['values'][i].totalForteRate - (Number(this.invoiceDetails['values'][i].totalForteApRate))).toFixed(2);
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              // tslint:disable-next-line:max-line-length
              // this.invoiceDetails['values'][i].margin = (((Number(this.invoiceDetails['values'][i].totalForteRate) - Number(this.invoiceDetails['values'][i].apFinalRate)) / (Number(this.invoiceDetails['values'][i].apFinalRate)))).toFixed(2);            // ((Number(this.invoiceDetails['values'][i].totalForteRate) - ()))
              this.invoiceDetails['values'][i].margin = ((Number(this.invoiceDetails['values'][i].marginRate) / (Number(this.invoiceDetails['values'][i].totalForteRate))) * 100).toFixed(2); 
              let invoiceAmount;
              if (this.invoiceDetails['values'][i].invoiceAmount.includes(',')) {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount.replace(',', '')
              } else {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount;

              }
              let charge = (Number(invoiceAmount) + Number(this.invoiceDetails['values'][i].fuelCharge) + Number(this.invoiceDetails['values'][i].assessorialCharge));
              this.invoiceDetails['values'][i].variance = (invoiceAmount - this.invoiceDetails['values'][i].totalForteRate).toFixed(2);
              console.log(charge);
              console.log(this.invoiceDetails['values'][i].variance);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].optimizeValue = ((invoiceAmount / this.invoiceDetails['values'][i].totalForteRate) * 100).toFixed(2);
              console.log('Value 3', this.invoiceDetails['values'][i].optimizeValue);
              this.resultArray = [];
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                // this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }
            } else {
              this.invoiceDetails['values'][i].apGrossRate = '0';
              this.invoiceDetails['values'][i].arGrossRate = "0";
              this.invoiceDetails['values'][i].arFinalRate = "0";
              this.invoiceDetails['values'][i].apFinalRate = "0";
              this.invoiceDetails['values'][i].totalForteRate = '0';
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteApRate = '0';
              this.invoiceDetails['values'][i].marginRate = "0";
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              this.invoiceDetails['values'][i].margin = "0";
              this.invoiceDetails['values'][i].variance = "0";
              this.invoiceDetails['values'][i].optimizeValue = "0";
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                // this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }
            }

            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                console.log('sect', this.invoiceDetails['values'][i])
                if (this.invoiceDetails['values'][i].fxfeRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.invoiceDetails['values'][i].fxfeRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].fxfeRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][i].fxfeRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][i].fxfeRate.arDiscount
                  });
                  this.initialEconomyApAMC = this.invoiceDetails['values'][i].fxfeRate.apAmc;
                  this.initialEconomyApDiscount = this.invoiceDetails['values'][i].fxfeRate.apDiscount
                  this.initialEconomyArAMC = this.invoiceDetails['values'][i].fxfeRate.arAmc;
                  this.initialEconomyArDiscount = this.invoiceDetails['values'][i].fxfeRate.arDiscount;
                } else {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                  this.initialEconomyApAMC = this.discountsValue.apAmc;
                  this.initialEconomyApDiscount = this.discountsValue.apDiscount
                  this.initialEconomyArAMC = this.discountsValue.arAmc;
                  this.initialEconomyArDiscount = this.discountsValue.arDiscount;
                }

              } else {
                console.log(this.fedexEconomyValues);
                if (this.fedexEconomyValues !== undefined) {
                  console.log('savedformvalues', this.fedexEconomyValues);
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX ECONOMY',
                    apAmc: this.fedexEconomyValues.apAmc,
                    arAmc: this.fedexEconomyValues.arAmc,
                    apDiscount: this.fedexEconomyValues.apDiscount,
                    arDiscount: this.fedexEconomyValues.arDiscount

                  });
                  this.initialEconomyApAMC = this.fedexEconomyValues.apAmc;
                  this.initialEconomyApDiscount = this.fedexEconomyValues.apDiscount
                  this.initialEconomyArAMC = this.fedexEconomyValues.arAmc;
                  this.initialEconomyArDiscount = this.fedexEconomyValues.arDiscount;
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrierNew']) {
                        if (element.companyName === this.invoiceDetails['carrierNew']) {
                          this.workbookForm.patchValue({
                            carrier: 'FEDEX ECONOMY',
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount
                          });
                          this.initialEconomyApAMC = obj.amc;
                          this.initialEconomyApDiscount = obj.discount
                          this.initialEconomyArAMC = element.amc;
                          this.initialEconomyArDiscount = element.discount;
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value');
            }
            if (this.invoiceDetails['values'][i].selected === true) {
            this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
            }
            // this.invoiceDetails['values'][i].ApAssessorialsArray  = [];
            // this.invoiceDetails['values'][i].ArAssessorialsArray  = [];
          }
          else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
            let arDataFrommArray, apDataFrommArray;
            let rulesNamesArray:any = [];
            this.increasedValueForAR = 1.3112253;
            this.enableReadOnly = false;
            this.showRule = false;
            this.invoiceDetails['values'][i].ApAssessorialsArray = [];
            this.invoiceDetails['values'][i].ArAssessorialsArray = [];
            const setApMasterData:any= localStorage.getItem('aptableData');
            let profileMinimumCharge, profileLifeGateCharge:any, profileResidentialCharge:any, profileLimitedAccessDelivery:any,
              profileInsideDelivery:any, profileNotify:any, profileSingleShipment:any, singleShipmentsetMasterData:any, profiledeliveryAppointmentRequired:any;
            let apDiscount, apAmc, arDiscount, arAmc;
            this.parseSetMasterData = JSON.parse(setApMasterData);
            const setArMasterData:any= localStorage.getItem('artableData');
            this.parseArSetMasterData = JSON.parse(setArMasterData);
            console.log(this.parseSetMasterData);
            console.log(this.workbookForm.value)
            console.log(this.editValue, this.editArValue);
            this.invoiceDetails['values'][i].finalAPDiscount = undefined;
            this.invoiceDetails['values'][i].finalARDiscount = undefined;
            this.invoiceDetails['carrierNew'] = 'FEDEX PRIORITY';
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                if (this.invoiceDetails['values'][i].fxfpRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.invoiceDetails['values'][i].fxfpRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].fxfpRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][i].fxfpRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][i].fxfpRate.arDiscount
                  });
                } else {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                }
              } else {
                console.log(this.fedexPriorityValues);
                if (this.fedexPriorityValues !== undefined) {
                  console.log('savedformvalues', this.fedexPriorityValues);
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.fedexPriorityValues.apAmc,
                    arAmc: this.fedexPriorityValues.arAmc,
                    apDiscount: this.fedexPriorityValues.apDiscount,
                    arDiscount: this.fedexPriorityValues.arDiscount

                  });
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrierNew']) {
                        if (element.companyName === this.invoiceDetails['carrierNew']) {
                          this.workbookForm.patchValue({
                            carrier: 'FEDEX PRIORITY',
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,

                            arDiscount: element.discount
                          });
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              console.log('changed ar value', this.workbookForm.value);
            }
            if (this.selectedAnalyticsCodeData !== undefined) {
              console.log('selected code', this.selectedAnalyticsCodeData);
              // this.invoiceDetails['values'][i].fxfpRate = JSON.parse(this.invoiceDetails['values'][i].fxfpRate);
              if (this.editValue === false && this.editArValue === false) {
                if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].fxfpRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfpRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  apDiscount = this.invoiceDetails['values'][i].fxfpRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfpRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  console.log(apDiscount, arDiscount, apAmc);
                  rulesNamesArray = [];
                  this.invoiceDetails['values'][i].showRule = false;


                }
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                console.log(this.workbookForm.value);
                console.log(this.invoiceDetails['values'][i].showRule);
                apDiscount = this.workbookForm.value.apDiscount;
                apAmc = this.workbookForm.value.apAmc;
                arDiscount = this.workbookForm.value.arDiscount;
                arAmc = this.workbookForm.value.arAmc;
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].fxfpRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfpRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  apDiscount = this.invoiceDetails['values'][i].fxfpRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].fxfpRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  console.log(apDiscount, arDiscount, apAmc);
                  rulesNamesArray = [];

                }

              }


              if (this.invoiceDetails['values'][i].fxfpRate.apAccess === true) {
                this.editAPAcc = true;
                this.accessorialFormAP.patchValue({
                  accessorials: this.invoiceDetails['values'][i].fxfpRate.apAssessorialName,
                  cost: this.invoiceDetails['values'][i].fxfpRate.apCost,
                  min: this.invoiceDetails['values'][i].fxfpRate.apMin,
                  max: this.invoiceDetails['values'][i].fxfpRate.apMax
                });
                this.parseSetMasterData.forEach((data:any) => {
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    data.assessorial.forEach((ele:any) => {
                      if (ele.name === this.invoiceDetails['values'][i].fxfpRate.apAssessorialName) {
                        ele.cost = this.invoiceDetails['values'][i].fxfpRate.apCost;
                      }
                    })
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else if (this.invoiceDetails['values'][i].fedexPriAccessApArray != undefined && this.invoiceDetails['values'][i].fedexPriAccessApArray.length > 1){
                this.apData = this.invoiceDetails['values'][i].fedexPriAccessApArray;
                              } else {
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })

              }
              if (this.invoiceDetails['values'][i].fxfpRate.arAccess === true) {
                this.editARAcc = true;
                // this.accessorialFormAR.patchValue({
                //   accessorials: this.invoiceDetails['values'][i].fxfpRate.arAssessorialName,
                //   cost: this.invoiceDetails['values'][i].fxfpRate.arCost,
                //   min: this.invoiceDetails['values'][i].fxfpRate.arMin,
                //   max: this.invoiceDetails['values'][i].fxfpRate.arMax
                // });
              //   this.parseSetMasterData.forEach((data:any) => {
              //     if (data.companyName === this.invoiceDetails['carrier']) {
              //       data.assessorial = JSON.parse(data.assessorials);
              //       data.assessorial.forEach((ele:any) => {
              //         if (ele.name === this.invoiceDetails['values'][i].fxfpRate.arAssessorialName) {
              //           ele.cost = this.invoiceDetails['values'][i].fxfpRate.arCost;
              //         }
              //       })
              //       this.arData = data.assessorial;
              //     }
              //     console.log('Ap Assesss', this.arData)
              //   })
              // } else
               if (this.invoiceDetails['values'][i].fedexPriAccessArArray != undefined && this.invoiceDetails['values'][i].fedexPriAccessArArray.length > 1){
                this.arData = this.invoiceDetails['values'][i].fedexPriAccessArArray;
                              }else {
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              }
            }

              // this.parseArSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrier'],'this.parseArSetMasterData.forEach((data)',data);
              //   if (data.companyName === this.invoiceDetails['carrier']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.arData = data.assessorial;
              //   }
              //   console.log('Ap Assesss',this.apData)
              // })
              if (this.invoiceDetails['values'][i].priorityshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].prichangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].priorityshowEdit;

              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
            } else {
              this.parseSetMasterData.forEach((obj:any) => {
                this.parseArSetMasterData.forEach((element:any) => {
                  if (obj.companyName === this.invoiceDetails['carrierNew']) {
                    if (element.companyName === this.invoiceDetails['carrierNew']) {
                      if (this.editValue === false && this.editArValue === false) {
                        console.log('apruleresponse', this.invoiceDetails['values'][i].rateResponse);

                        if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0 && this.invoiceDetails['values'][i].priorityRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                          arAmc = this.invoiceDetails['values'][i].priorityRules.ar[0].profileMinCharge;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0  && this.invoiceDetails['values'][i].priorityRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                          apAmc = this.invoiceDetails['values'][i].priorityRules.ap[0].profileMinCharge;
                          arDiscount = this.workbookForm.value.apDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%')
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                          apAmc = this.invoiceDetails['values'][i].priorityRules.ap[0].profileMinCharge;
                          arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                          arAmc = this.invoiceDetails['values'][i].priorityRules.ap[0].profileMinCharge;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AP Discount at ' + apDiscount + '%')

                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {
                          rulesNamesArray = [];

                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                        console.log(this.workbookForm.value);
                        apDiscount = this.workbookForm.value.apDiscount;
                        apAmc = this.workbookForm.value.apAmc;
                        arDiscount = this.workbookForm.value.arDiscount;
                        arAmc = this.workbookForm.value.arAmc;
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                        if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = obj.discount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%')
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].priorityRules.ap[0].profileDiscount;
                          apAmc = obj.amc;
                          arDiscount = this.invoiceDetails['values'][i].priorityRules.ar[0].profileDiscount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ap[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].priorityRules.ar[0].ruleName + ' AP Discount at ' + apDiscount + '%')

                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {
                          rulesNamesArray = [];

                          apDiscount = obj.discount;
                          apAmc = obj.amc;
                          arDiscount = element.discount;
                          arAmc = element.amc;
                          this.invoiceDetails['values'][i].showRule = false;

                        }
                      }
                      if (element.type === 'AR') {
                        this.fuelSurCharge = element.fuelsurcharge;
                      }

                    }
                  }
                });
              });
              if (this.invoiceDetails['values'][i].priorityshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].prichangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].priorityshowEdit;

              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              // this.parseSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrierNew'], 'this.parseSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrierNew']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.apData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
              // this.parseArSetMasterData.forEach((data:any) => {
              //   console.log(this.invoiceDetails['carrierNew'], 'this.parseArSetMasterData.forEach((data)', data);
              //   if (data.companyName === this.invoiceDetails['carrierNew']) {
              //     data.assessorial = JSON.parse(data.assessorials);
              //     this.arData = data.assessorial;
              //   }
              //   console.log('Ap Assesss', this.apData)
              // })
            }
            this.invoiceDetails['values'][i].fedexPriorityApData = this.invoiceDetails['values'][i].rateResponse.fedexPriAp;
            this.invoiceDetails['values'][i].fedexPriorityArData = this.invoiceDetails['values'][i].rateResponse.fedexPriAr;
            console.log(this.editValue, this.editArValue);
            if (this.invoiceDetails['values'][i].fedexPriorityApData !== 'Destination Base Zip Not Found' && this.invoiceDetails['values'][i].fedexPriorityArData !== 'Destination Base Zip Not Found') {
              this.invoiceDetails['values'][i].apGrossRate = 0;
              this.invoiceDetails['values'][i].arGrossRate = 0;
              let addRate = 0;
              let addRateAr = 0;
              for (let m =0;m<this.invoiceDetails['values'][i].fedexPriorityApData.rate.length;m++) {
                addRate += Number(this.invoiceDetails['values'][i].fedexPriorityApData.rate[m].finalRate)
              }
              for (let m =0;m<this.invoiceDetails['values'][i].fedexPriorityArData.rate.length;m++) {
                addRateAr += Number(this.invoiceDetails['values'][i].fedexPriorityArData.rate[m].finalRate)
              }
              // for (let m =0;m<this.invoiceDetails['values'][i].fedexPriorityApData.rate.length;m++) {

              if (Number(addRate) > Number(this.invoiceDetails['values'][i].fedexPriorityApData.minCharges)) {
                if (this.invoiceDetails['values'][i].fedexPriorityApData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(addRate)).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(addRate) + Number(this.invoiceDetails['values'][i].fedexPriorityApData.originalDiffRateList[0].diffRate)).toFixed(2));
                }
              } else {
                console.log(addRate, this.discountsValue.apAmc);
                if (this.invoiceDetails['values'][i].fedexPriorityApData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].fedexPriorityApData.minCharges)).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].fedexPriorityApData.minCharges) + Number(this.invoiceDetails['values'][i].fedexPriorityApData.originalDiffRateList[0].diffRate)).toFixed(2));
                }
              }
            // }
            // this.invoiceDetails['values'][i].apGrossRate = Number(this.invoiceDetails['values'][i].apGrossRate).toFixed(2)
              let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.discountsValue.apDiscount)) * 0.01);
              if ((forteApRate) < apAmc) {
                this.invoiceDetails['values'][i].apFinalRate = (apAmc).toString();
              } else {
                this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);
              }
              this.invoiceDetails['values'][i].fuelSurChargeApValue = (this.invoiceDetails['values'][i].apFinalRate * (Number(this.invoiceDetails['values'][i].fedexPriorityApData.fuelSurcharge) / 100)).toFixed(2);
              // for (let m =0;m<this.invoiceDetails['values'][i].fedexPriorityArData.rate.length;m++) {
              if ((Number(addRateAr) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].fedexPriorityArData.minCharges) * this.increasedValueForAR)) {
                if (this.invoiceDetails['values'][i].fedexPriorityArData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat((addRateAr * this.increasedValueForAR).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat(((addRateAr * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].fedexPriorityArData.originalDiffRateList[0].diffRate) * this.increasedValueForAR)).toFixed(2));
                }
              } else {
                if (this.invoiceDetails['values'][i].fedexPriorityArData.originalDiffRateList[0].diffRate === '0') {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].fedexPriorityArData.minCharges * this.increasedValueForAR).toFixed(2));
                } else {
                  this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].fedexPriorityArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].fedexPriorityArData.originalDiffRateList[0].diffRate) * this.increasedValueForAR)).toFixed(2));
                }
              }  
            // }
            // this.invoiceDetails['values'][i].arGrossRate = (this.invoiceDetails['values'][i].arGrossRate).toFixed(2);
            
              let forteArRate = this.invoiceDetails['values'][i].arGrossRate * ((100 - Number(this.discountsValue.arDiscount)) * 0.01);
              if ((forteArRate) < arAmc) {
                this.invoiceDetails['values'][i].arFinalRate = (arAmc).toString();
              } else {
                this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
              }
              if (new Date() > new Date(this.invoiceDetails['values'][i].shipmentDate)) {
                this.invoiceDetails['values'][i].arFSC = this.invoiceDetails['values'][i].fedexPriorityArData.fuelSurcharge;
              } else {
                this.invoiceDetails['values'][i].arFSC = 0;
              }
              this.invoiceDetails['values'][i].fuelSurChargeArValue = (this.invoiceDetails['values'][i].arFinalRate * (Number(this.invoiceDetails['values'][i].arFSC) / 100)).toFixed(2);

              let assessorialsChargeValue = 0;
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              let addCACharge;
              this.parseArSetMasterData.forEach((ele:any) => {
                if (ele.companyName === 'FEDEX PRIORITY') {
                  if (this.invoiceDetails['values'][i].originState === 'CA' || this.invoiceDetails['values'][i].destinationState === 'CA') {
                    addCACharge = ele.caCharge;
                  } else {
                    addCACharge = 0
                  }
                }
              })
              this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
              this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
              console.log(this.invoiceDetails['values'][i].assessorial);
              if (this.invoiceDetails['values'][i].assessorial.length > 0) {
                let length = 0;
                let arLength = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                // for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {



                // assessorialsChargeValue = assessorialsChargeValue + this.invoiceDetails['values'][i].assessorial[j].charge;


                if (this.editApAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'FEDEX PRIORITY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAP.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.accessorialFormAP.value.accessorials === obj.assessorial[l].name &&
                              this.accessorialFormAP.value.accessorials === this.invoiceDetails['values'][i].assessorial[j].assessorialName) {
                              console.log('test123');
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === this.accessorialFormAP.value.accessorials) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = this.accessorialFormAP.value.cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    console.log('thius', this.ApAssessorialsArray);
                                    break;
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.accessorialFormAP.value.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.accessorialFormAP.value.max)) {
                                  crtValue = Number(this.accessorialFormAP.value.max);
                                } else if (lsyrc < Number(this.accessorialFormAP.value.min)) {
                                  crtValue = Number(this.accessorialFormAP.value.min);
                                } else if (lsyrc > Number(this.accessorialFormAP.value.min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;

                                    this.ApAssessorialsArray.push(arCostData);
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    // console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            } else if (this.accessorialFormAP.value.accessorials !== obj.assessorial[l].name) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                console.log(obj);
                                console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l]);
                                // if(this.invoiceDetails['values'][i].forteApAssessorialRate != 0) {		
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let apCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    apCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(apCostData);

                                    console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                                  }

                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                                  'arCost': 0
                                };
                                length = length + 1;
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteApAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                                //     Number(apCostData.apCost)).toFixed(2);

                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': 0
                              };
                              length = length + 1;
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteApAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                              //     Number(apCostData.apCost)).toFixed(2);

                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                      let profileAPAssessorials:any = [];

                      this.parseSetMasterData.forEach((obj:any) => {
  
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].priorityRules.ap.length > 0) {
                          if (obj.companyName === 'FEDEX PRIORITY') {
                            console.log(obj);
                            obj.assessorial = JSON.parse(obj.assessorials);
  
                            console.log(this.invoiceDetails['values'][i].priorityRules);
                            if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0) {
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].priorityRules.ap[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    profileLifeGateCharge = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].limitedAccessDelivery !== '') {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].priorityRules.ap[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    profileLimitedAccessDelivery = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].priorityRules.ap[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    profileResidentialCharge = data.cost;
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].priorityRules.ap[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    profileInsideDelivery = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].priorityRules.ap[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    profileNotify = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].priorityRules.ap[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    profileSingleShipment = data.cost;
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ap[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].priorityRules.ap[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  }
                                })
                              }
                              profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
                            }
                            for (let k=0;k < profileAPAssessorials.length;k++){
                              console.log(profileAPAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAPAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': profileAPAssessorials[k].charge
                                }
                                this.ApAssessorialsArray.push(object);
                                length = length + 1;
    
                                this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': 0,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                length = length + 1;
    
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
    
                              }
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        } else {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            console.log(obj);
                            obj.assessorial = JSON.parse(obj.assessorials);
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let apCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    apCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(apCostData);
                                  }
  
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': 0
                                };
                                length = length + 1;
                                this.ApAssessorialsArray.push(apCostData);
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                    }

                  }
                } else {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAPAssessorials:any = [];

                    this.parseSetMasterData.forEach((obj:any) => {

                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].priorityRules.ap.length > 0) {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);

                          console.log('jjj',this.invoiceDetails['values'][i].priorityRules);
                          if (this.invoiceDetails['values'][i].priorityRules.ap.length > 0) {
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].priorityRules.ap[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  profileLifeGateCharge = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].priorityRules.ap[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  profileLimitedAccessDelivery = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].priorityRules.ap[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  profileResidentialCharge = data.cost;
                                }
                              })
                            }

                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].priorityRules.ap[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  profileInsideDelivery = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].priorityRules.ap[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  profileNotify = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].priorityRules.ap[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  profileSingleShipment = data.cost;
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ap[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].priorityRules.ap[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  profiledeliveryAppointmentRequired = data.cost;
                                }
                              })
                            }
                            profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
                          }
                          for (let k=0;k < profileAPAssessorials.length;k++){
                            console.log(profileAPAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAPAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': profileAPAssessorials[k].charge
                              }
                              this.ApAssessorialsArray.push(object);
                              length = length + 1;
  
                              this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;
  
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      } else {
                        if (obj.companyName === 'FEDEX ECONOMY') {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              for (let k = 0; k < this.viewApArAccess.length; k++) {
                                if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                  let apCostData;
                                  this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                  apCostData = this.viewApArAccess[k];
                                  length = length + 1;
                                  this.ApAssessorialsArray.push(apCostData);
                                }

                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': 0
                              };
                              length = length + 1;
                              this.ApAssessorialsArray.push(apCostData);
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }  else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }

                }
                if (this.ApAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ApAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.apCost);
                  });
                  this.invoiceDetails['values'][i].forteApAssessorialRate = value123;
                  console.log('value123', value123)
                }
                console.log('issue', this.editArAccess);

                if (this.editArAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'FEDEX PRIORITY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAR.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                        //     if (this.accessorialFormAR.value.accessorials !== '') {
                        //     if (this.accessorialFormAR.value.accessorials === obj.assessorial[l].name &&
                        //       this.accessorialFormAR.value.accessorials === this.invoiceDetails['values'][i].assessorial[j].assessorialName) {
                        //       console.log('test123');
                        //       if (obj.assessorial[l].cwt === false) {
                        //         console.log(obj);
                        //         console.log(obj.assessorial[l]);
                        //         for (let k = 0; k < this.viewApArAccess.length; k++) {
                        //           console.log(this.viewApArAccess[k]);
                        //           if (this.viewApArAccess[k].name === this.accessorialFormAR.value.accessorials) {
                        //             let arCostData;
                        //             this.viewApArAccess[k].arCost = this.accessorialFormAR.value.cost;
                        //             arCostData = this.viewApArAccess[k];
                        //             arLength = arLength + 1;
                        //             this.ArAssessorialsArray.push(arCostData);
                        //             console.log('thius', this.ArAssessorialsArray);
                        //             break;
                        //           }

                        //         }
                        //         // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                        //       } else {
                        //         const lsyrc = (Number(this.accessorialFormAR.value.cost) * this.invoiceDetails['values'][i].weight) / 100;
                        //         let crtValue:any;
                        //         if (lsyrc > Number(this.accessorialFormAR.value.max)) {
                        //           crtValue = Number(this.accessorialFormAR.value.max);
                        //         } else if (lsyrc < Number(this.accessorialFormAR.value.min)) {
                        //           crtValue = Number(this.accessorialFormAR.value.min);
                        //         } else if (lsyrc > Number(this.accessorialFormAR.value.min)) {
                        //           crtValue = lsyrc;
                        //         }
                        //         for (let k = 0; k < this.viewApArAccess.length; k++) {
                        //           console.log(this.viewApArAccess[k]);
                        //           if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                        //             let arCostData;
                        //             this.viewApArAccess[k].arCost = crtValue;
                        //             arCostData = this.viewApArAccess[k];
                        //             arLength = arLength + 1;

                        //             this.ArAssessorialsArray.push(arCostData);
                        //             // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                        //             // console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                        //           }

                        //         }
                        //         // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                        //       }
                        //     } else if (this.accessorialFormAR.value.accessorials !== obj.assessorial[l].name) {
                        //       if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                        //         console.log(obj);
                        //         console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l]);
                        //         // if(this.invoiceDetails['values'][i].forteApAssessorialRate != 0) {		
                        //         for (let k = 0; k < this.viewApArAccess.length; k++) {
                        //           console.log(this.viewApArAccess[k]);
                        //           if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                        //             let apCostData;
                        //             this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                        //             apCostData = this.viewApArAccess[k];
                        //             arLength = arLength + 1;
                        //             this.ArAssessorialsArray.push(apCostData);
                        //             // this.invoiceDetails['values'][i].forteApAssessorialRate =
                        //             //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                        //             //     Number(obj.assessorial[l].cost)).toFixed(2);
                        //             console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                        //           }

                        //         }
                        //       } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                        //         let apCostData;
                        //         apCostData = {
                        //           'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                        //           'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                        //           'apCost': 0,
                        //           'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                        //         };
                        //         arLength = arLength + 1;
                        //         this.ArAssessorialsArray.push(apCostData);
                        //         // this.invoiceDetails['values'][i].forteApAssessorialRate =
                        //         //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                        //         //     Number(apCostData.apCost)).toFixed(2);

                        //       } 
                        //     } else if (this.accessorialFormAR.value.accessorials === "LiftGate Service" && this.invoiceDetails['values'][i].assessorial[j].assessorialName === 'LiftGate Delivery' ) {
                        //       for (let k = 0; k < this.viewApArAccess.length; k++) {
                        //         console.log('view', this.viewApArAccess[k]);
                        //       if ( this.viewApArAccess[k].name === 'LiftGate Delivery' ) {
                        //         let apCostData;
                        //         this.viewApArAccess[k].arCost = this.accessorialFormAR.value.cost;
                        //         apCostData = this.viewApArAccess[k];
                        //         arLength = arLength + 1;
                        //         this.ArAssessorialsArray.push(apCostData);
                        //         // this.invoiceDetails['values'][i].forteApAssessorialRate =
                        //         //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                        //         //     Number(obj.assessorial[l].cost)).toFixed(2);
                        //         console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                        //       }

                        //     }
                        //   }
                        // } else if (this.accessorialFormAR.value.accessorials === '') {
                          for (let k = 0; k < this.invoiceDetails['values'][i].fedexPriAccessArArray.length; k++) {
                            console.log('view', this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                          // if (this.viewApArAccess[k].name === this.invoiceDetails['values'][i].fxfpRate.arAssessorialName) {
                          //   let apCostData;
                          //   this.viewApArAccess[k].arCost = this.invoiceDetails['values'][i].fxfpRate.arCost;
                          //   apCostData = this.viewApArAccess[k];
                          //   arLength = arLength + 1;
                          //   this.ArAssessorialsArray.push(apCostData);
                          //   // this.invoiceDetails['values'][i].forteApAssessorialRate =
                          //   //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                          //   //     Number(obj.assessorial[l].cost)).toFixed(2);
                          //   console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                          // } else {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                //   console.log(this.viewApArAccess[k]);
                                  if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
                                    // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }

                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = crtValue;
                                    arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                    arLength = arLength + 1;

                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;

                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }  else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].fedexPriAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].fedexPriAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].fedexPriAccessArArray[k].cost

                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }

                          // }
  if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                        }

                        // }
                            // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            //   let apCostData;
                            //   apCostData = {
                            //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                            //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                            //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                            //     'arCost': 0
                            //   };
                            //   length = length + 1;

                            //   this.ApAssessorialsArray.push(apCostData);
                            //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //   //     Number(apCostData.arCost)).toFixed(2);

                            // }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                   
                      let profileAssessorials:any = [];
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].priorityRules.ar[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    if (data.cwt === false) {
                                      profileLifeGateCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLifeGateCharge = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].limitedAccessDelivery !== '') {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].priorityRules.ar[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    if (data.cwt === false) {
                                      profileLimitedAccessDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLimitedAccessDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].priorityRules.ar[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    if (data.cwt === false) {
                                      profileResidentialCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileResidentialCharge = crtValue;
                                    }
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].priorityRules.ar[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    if (data.cwt === false) {
                                      profileInsideDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileInsideDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].priorityRules.ar[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    if (data.cwt === false) {
                                      profileNotify = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileNotify = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].priorityRules.ar[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    if (data.cwt === false) {
                                      profileSingleShipment = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileSingleShipment = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].priorityRules.ar[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].priorityRules.ar[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    if (data.cwt === false) {
                                      profiledeliveryAppointmentRequired = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profiledeliveryAppointmentRequired = crtValue;
                                    }
                                  }
                                })
                              }
  
                              profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                            }
                            for(let k=0;k<profileAssessorials.length;k++) {
                              console.log(profileAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                                this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              }
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
  
                          }
                        } else {
                          if (obj.companyName === 'FEDEX PRIORITY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            console.log(obj);
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
  
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
  
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                                if (obj.assessorial[l].name === 'Residential Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                   
                   
                    }


                  }
                } else {
                  console.log('issue');

                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAssessorials:any = [];
                    this.parseArSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                        if (obj.companyName === 'FEDEX PRIORITY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          if (this.invoiceDetails['values'][i].priorityRules.ar.length > 0) {
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].priorityRules.ar[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].priorityRules.ar[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].priorityRules.ar[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }

                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].priorityRules.ar[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].priorityRules.ar[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].priorityRules.ar[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].priorityRules.ar[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].priorityRules.ar[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }

                            profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });

                          }
                          for(let k=0;k<profileAssessorials.length;k++) {
                            console.log(profileAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object);
                              this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp" || this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (profileAssessorials[k].assessorial === 'LiftGate Service') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                            }
  
                            }
                             else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (profileAssessorials[k].assessorial === 'Residential Delivery') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            }
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }


                        }
                      } else {
                        if (obj.companyName === 'FEDEX PRIORITY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;

                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }

                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }

                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;

                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);

                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp' || this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }

                }
                if (this.ArAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ArAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.arCost);
                  });
                  this.invoiceDetails['values'][i].forteArAssessorialRate = value123;
                  console.log('value123', value123)
                }
                // });
                //     }
                //   }
                // });
                // }

                assessorialsChargeValue =  Number(this.invoiceDetails['values'][i].forteArAssessorialRate);
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
                console.log('this.invoiceDetails[values][i].ApAssessorialsArray', this.invoiceDetails['values'][i].ApAssessorialsArray, this.invoiceDetails['values'][i].ArAssessorialsArray);
              } else {
                this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                assessorialsChargeValue = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
              }
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeArValue) + Number(this.invoiceDetails['values'][i].arFinalRate) + Number(assessorialsChargeValue) + Number(addCACharge)).toFixed(2);
              console.log('this.invoiceDetails[values][i].fedexPriorityData', this.invoiceDetails['values'][i].totalForteRate);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteApRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeApValue) + Number(this.invoiceDetails['values'][i].apFinalRate) + Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(addCACharge)).toFixed(2);
              if ( this.invoiceDetails['values'][i].priorityCostplusFactor !== null && this.costplusValueEnabled === true && this.invoiceDetails['values'][i].priorityCostplusFactor !== undefined && this.invoiceDetails['values'][i].priorityCostplusFactor !== '') {
                let valuexx =  1 + Number(this.invoiceDetails['values'][i].priorityCostplusFactor) /100;
                console.log(valuexx);
                this.invoiceDetails['values'][i].totalForteRate = (this.invoiceDetails['values'][i].totalForteApRate* valuexx).toFixed(2);
              }
              this.invoiceDetails['values'][i].marginRate = Number(this.invoiceDetails['values'][i].totalForteRate - (Number(this.invoiceDetails['values'][i].totalForteApRate))).toFixed(2);
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              // tslint:disable-next-line:max-line-length
              // this.invoiceDetails['values'][i].margin = (((Number(this.invoiceDetails['values'][i].totalForteRate) - Number(this.invoiceDetails['values'][i].apFinalRate)) / (Number(this.invoiceDetails['values'][i].apFinalRate)))).toFixed(2);            // ((Number(this.invoiceDetails['values'][i].totalForteRate) - ()))
              this.invoiceDetails['values'][i].margin = ((Number(this.invoiceDetails['values'][i].marginRate) / (Number(this.invoiceDetails['values'][i].totalForteRate))) * 100).toFixed(2); 


              let invoiceAmount;
              if (this.invoiceDetails['values'][i].invoiceAmount.includes(',')) {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount.replace(',', '')
              } else {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount;

              }
              let charge = (Number(invoiceAmount) + Number(this.invoiceDetails['values'][i].fuelCharge) + Number(this.invoiceDetails['values'][i].assessorialCharge));
              this.invoiceDetails['values'][i].variance = (invoiceAmount - this.invoiceDetails['values'][i].totalForteRate).toFixed(2);
              console.log(charge);
              console.log(this.invoiceDetails['values'][i].variance);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].optimizeValue = ((invoiceAmount / this.invoiceDetails['values'][i].totalForteRate) * 100).toFixed(2);


              console.log('Value 3', this.invoiceDetails['values'][i].optimizeValue);
              this.resultForPriorityArray = [];
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              if (this.editValue === false && this.editArValue === false) {
                this.parseSetMasterData.forEach((obj:any) => {
                  this.parseArSetMasterData.forEach((element:any) => {
                    if (obj.companyName === this.invoiceDetails['carrierNew']) {
                      if (element.companyName === this.invoiceDetails['carrierNew']) {
                        this.workbookForm.patchValue({
                          carrier: this.invoiceDetails['carrier'],
                          apAmc: obj.amc,
                          arAmc: element.amc,
                          apDiscount: obj.discount,
                          arDiscount: element.discount
                        });
                      }
                    }
                  });
                });
              } else if (this.editValue === true || this.editArValue === true) {
                // this.workbookForm.patchValue({
                //   carrier: this.invoiceDetails['carrier'],
                //   apAmc: obj.amc,
                //   arAmc:  element.amc,
                //   apDiscount: obj.discount,
                //   arDiscount: element.discount
                // });
                console.log('changed ar value', this.workbookForm.value);
              }
            } else {
              this.invoiceDetails['values'][i].apGrossRate = '0';
              this.invoiceDetails['values'][i].arGrossRate = "0";
              this.invoiceDetails['values'][i].arFinalRate = "0";
              this.invoiceDetails['values'][i].apFinalRate = "0";
              this.invoiceDetails['values'][i].totalForteRate = '0';
              this.invoiceDetails['values'][i].totalForteApRate = '0';
              this.invoiceDetails['values'][i].marginRate = "0";
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              this.invoiceDetails['values'][i].margin = "0";
              this.invoiceDetails['values'][i].variance = "0";
              this.invoiceDetails['values'][i].optimizeValue = "0";
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }
            }

            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                if (this.invoiceDetails['values'][i].fxfpRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.invoiceDetails['values'][i].fxfpRate.apAmc,
                    arAmc: this.invoiceDetails['values'][i].fxfpRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][i].fxfpRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][i].fxfpRate.arDiscount
                  });
                  this.initialPriorityApAMC = this.invoiceDetails['values'][i].fxfpRate.apAmc;
                  this.initialPriorityApDiscount = this.invoiceDetails['values'][i].fxfpRate.apDiscount;
                  this.initialPriorityArAMC = this.invoiceDetails['values'][i].fxfpRate.arAmc;
                  this.initialPriorityArDiscouunt = this.invoiceDetails['values'][i].fxfpRate.arDiscount;
                } else {
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                  this.initialPriorityApAMC = this.discountsValue.apAmc;
                  this.initialPriorityApDiscount = this.discountsValue.apDiscount;
                  this.initialPriorityArAMC = this.discountsValue.arAmc;
                  this.initialPriorityArDiscouunt = this.discountsValue.arDiscount;
                }
              } else {
                console.log(this.fedexPriorityValues);
                if (this.fedexPriorityValues !== undefined) {
                  console.log('savedformvalues', this.fedexPriorityValues);
                  this.workbookForm.patchValue({
                    carrier: 'FEDEX PRIORITY',
                    apAmc: this.fedexPriorityValues.apAmc,
                    arAmc: this.fedexPriorityValues.arAmc,
                    apDiscount: this.fedexPriorityValues.apDiscount,
                    arDiscount: this.fedexPriorityValues.arDiscount

                  });
                  this.initialPriorityApAMC = this.fedexPriorityValues.apAmc;
                  this.initialPriorityApDiscount = this.fedexPriorityValues.apDiscount;
                  this.initialPriorityArAMC = this.fedexPriorityValues.arAmc;
                  this.initialPriorityArDiscouunt = this.fedexPriorityValues.arDiscount;
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrierNew']) {
                        if (element.companyName === this.invoiceDetails['carrierNew']) {
                          this.workbookForm.patchValue({
                            carrier: 'FEDEX PRIORITY',
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,

                            arDiscount: element.discount
                          });
                          this.initialPriorityApAMC = obj.amc;
                          this.initialPriorityApDiscount = obj.discount;
                          this.initialPriorityArAMC = element.amc;
                          this.initialPriorityArDiscouunt = element.discount;
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value', this.workbookForm.value);
            }
            // this.invoiceDetails['values'][i].ApAssessorialsArray  = [];
            // this.invoiceDetails['values'][i].ArAssessorialsArray  = [];
          }
          else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
            const setApMasterData:any = localStorage.getItem('aptableData');
            let apDiscount, apAmc, arDiscount, arAmc;
            let rulesNamesArray:any = [];
            this.increasedValueForAR = 1.248786;
            this.enableReadOnly = false;
            let profileMinimumCharge, profileLifeGateCharge:any, profileResidentialCharge:any, profileLimitedAccessDelivery:any,
              profileInsideDelivery:any, profileNotify:any, profileSingleShipment:any, singleShipmentsetMasterData, profiledeliveryAppointmentRequired:any;
            this.parseSetMasterData = JSON.parse(setApMasterData);
            const setArMasterData:any = localStorage.getItem('artableData');
            this.parseArSetMasterData = JSON.parse(setArMasterData);
            console.log(this.parseSetMasterData);
            this.invoiceDetails['values'][i].finalAPDiscount = undefined;
            this.invoiceDetails['values'][i].finalARDiscount = undefined;
            console.log('2', this.editValue, this.editArValue);
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                if (this.invoiceDetails['values'][i].reddawayRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.invoiceDetails['values'][0].reddawayRate.apAmc,
                    arAmc: this.invoiceDetails['values'][0].reddawayRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][0].reddawayRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][0].reddawayRate.arDiscount
                  });
                } else {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                }
              } else {
                console.log(this.reddawayValues);
                if (this.reddawayValues !== undefined) {
                  console.log('savedformvalues', this.reddawayValues);
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.reddawayValues.apAmc,
                    arAmc: this.reddawayValues.arAmc,
                    apDiscount: this.reddawayValues.apDiscount,
                    arDiscount: this.reddawayValues.arDiscount

                  });
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount
                          });
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value', this.workbookForm.value);
            }
            if (this.selectedAnalyticsCodeData !== undefined) {
              console.log('selected code', this.selectedAnalyticsCodeData);
              // this.invoiceDetails['values'][i].reddawayRate = JSON.parse(this.invoiceDetails['values'][i].reddawayRate);
              if (this.editValue === false && this.editArValue === false) {
                if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  rulesNamesArray = [];
                  this.invoiceDetails['values'][i].showRule = false;
                  apDiscount = this.invoiceDetails['values'][i].reddawayRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  console.log(apDiscount, arDiscount, apAmc);
                }
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                console.log(this.workbookForm.value);
                apDiscount = this.workbookForm.value.apDiscount;
                apAmc = this.workbookForm.value.apAmc;
                arDiscount = this.workbookForm.value.arDiscount;
                arAmc = this.workbookForm.value.arAmc;
              } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ap.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ar.length === 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];

                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                  this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                  console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                  apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.invoiceDetails['values'][i].showRule = true;
                  rulesNamesArray = [];
                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                  rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                  this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                } else {
                  rulesNamesArray = [];
                  this.invoiceDetails['values'][i].showRule = false;

                  apDiscount = this.invoiceDetails['values'][i].reddawayRate.apDiscount;
                  apAmc = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  arDiscount = this.invoiceDetails['values'][i].reddawayRate.arDiscount;
                  arAmc = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  console.log(apDiscount, arDiscount, apAmc);
                }
              }
              console.log(apDiscount, arDiscount, apAmc);
              if (this.invoiceDetails['values'][i].reddawayRate.apAccess === true) {
                this.editAPAcc = true;
                this.accessorialFormAP.patchValue({
                  accessorials: this.invoiceDetails['values'][i].reddawayRate.apAssessorialName,
                  cost: this.invoiceDetails['values'][i].reddawayRate.apCost,
                  min: this.invoiceDetails['values'][i].reddawayRate.apMin,
                  max: this.invoiceDetails['values'][i].reddawayRate.apMax
                });
                this.parseSetMasterData.forEach((data:any) => {
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    data.assessorial.forEach((ele:any) => {
                      if (ele.name === this.invoiceDetails['values'][i].reddawayRate.apAssessorialName) {
                        ele.cost = this.invoiceDetails['values'][i].reddawayRate.apCost;
                      }
                    })
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })
              } else if (this.invoiceDetails['values'][i].reddawayAccessApArray != undefined && this.invoiceDetails['values'][i].reddawayAccessApArray.length > 1){
                this.apData = this.invoiceDetails['values'][i].reddawayAccessApArray;
                              } else {
                this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                })

              }
              if (this.invoiceDetails['values'][i].reddawayRate.arAccess === true) {
                this.editARAcc = true;
                this.accessorialFormAR.patchValue({
                  accessorials: this.invoiceDetails['values'][i].reddawayRate.arAssessorialName,
                  cost: this.invoiceDetails['values'][i].reddawayRate.arCost,
                  min: this.invoiceDetails['values'][i].reddawayRate.arMin,
                  max: this.invoiceDetails['values'][i].reddawayRate.arMax
                });
                this.parseSetMasterData.forEach((data:any) => {
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    data.assessorial.forEach((ele:any) => {
                      if (ele.name === this.invoiceDetails['values'][i].reddawayRate.arAssessorialName) {
                        ele.cost = this.invoiceDetails['values'][i].reddawayRate.arCost;
                      }
                    })
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              } else if (this.invoiceDetails['values'][i].reddawayAccessArArray != undefined && this.invoiceDetails['values'][i].reddawayAccessArArray.length > 1){
                this.arData = this.invoiceDetails['values'][i].reddawayAccessArArray;
                              } else {
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                  if (data.companyName === this.invoiceDetails['carrier']) {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.arData)
                })
              }
              if (this.invoiceDetails['values'][i].reddawayshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].redchangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].reddawayshowEdit;

              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
            } else {
              this.parseSetMasterData.forEach((obj:any) => {
                console.log('1')

                this.parseArSetMasterData.forEach((element:any) => {
                  console.log('2')

                  if (obj.companyName === this.invoiceDetails['carrier']) {
                    console.log('3');
                    if (element.companyName === this.invoiceDetails['carrier']) {
                      console.log('2', this.invoiceDetails['values'][i], this.editValue, this.editArValue);

                      if (this.editValue === false && this.editArValue === false) {
                        if (this.invoiceDetails['values'][i].rateResponse.reddawayAp !== 'service not available' && this.invoiceDetails['values'][i].rateResponse.reddawayAr !== 'service not available' && this.invoiceDetails['values'][i].rateResponse.reddawayAp !== undefined && this.invoiceDetails['values'][i].rateResponse.reddawayAp.totalCharge === undefined) {
                          rulesNamesArray = []
                          if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0 &&
                            this.invoiceDetails['values'][i].reddawayRules.ap.length === 0) {
                            console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                            apDiscount = this.workbookForm.value.apDiscount;
                            apAmc = this.workbookForm.value.apAmc;
                            arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                            arAmc = this.workbookForm.value.arAmc;
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                          } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                            this.invoiceDetails['values'][i].reddawayRules.ar.length === 0) {
                            console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                            apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                            apAmc = this.workbookForm.value.apAmc;
                            arDiscount = this.workbookForm.value.arDiscount;
                            arAmc = this.workbookForm.value.arAmc;
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray = [];

                            rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                            this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                            console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                            apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                            apAmc = this.workbookForm.value.apAmc;
                            arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                            arAmc = this.workbookForm.value.arAmc;
                            this.invoiceDetails['values'][i].showRule = true;
                            rulesNamesArray = [];
                            rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                            rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                          } else {
                            apDiscount = this.workbookForm.value.apDiscount;
                            apAmc = this.workbookForm.value.apAmc;
                            arDiscount = this.workbookForm.value.arDiscount;
                            arAmc = this.workbookForm.value.arAmc;
                            this.invoiceDetails['values'][i].showRule = false;
                            rulesNamesArray = [];
                            this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                          }
                        } else {
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = false;
                          rulesNamesArray = [];
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                        }
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === false) {
                        apDiscount = this.workbookForm.value.apDiscount;
                        apAmc = this.workbookForm.value.apAmc;
                        arDiscount = this.workbookForm.value.arDiscount;
                        arAmc = this.workbookForm.value.arAmc;
                      } else if ((this.editValue === true || this.editArValue === true) && this.invoiceDetails['values'][i].showRule === true) {
                        rulesNamesArray = []
                        if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0 &&
                          this.invoiceDetails['values'][i].reddawayRules.ap.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;

                        } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].reddawayRules.ar.length === 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.arDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];

                          rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0 &&
                          this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                          console.log('aprulediscount', this.invoiceDetails['values'][i].rules);
                          apDiscount = this.invoiceDetails['values'][i].reddawayRules.ap[0].profileDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.invoiceDetails['values'][i].reddawayRules.ar[0].profileDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = true;
                          rulesNamesArray = [];
                          rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ar[0].ruleName + ' AR Discount at ' + arDiscount + '%');
                          rulesNamesArray.push(this.invoiceDetails['values'][i].reddawayRules.ap[0].ruleName + ' AP Discount at ' + apDiscount + '%');
                          this.invoiceDetails['values'][i].ruleNames = rulesNamesArray;
                        } else {
                          apDiscount = this.workbookForm.value.apDiscount;
                          apAmc = this.workbookForm.value.apAmc;
                          arDiscount = this.workbookForm.value.apDiscount;
                          arAmc = this.workbookForm.value.arAmc;
                          this.invoiceDetails['values'][i].showRule = false;
                          rulesNamesArray = [];

                        }
                      }
                      if (element.type === 'AR') {
                        this.fuelSurCharge = element.fuelSurCharge;
                      }
                    }
                  }
                });
              });
              if (this.invoiceDetails['values'][i].reddawayshowEdit === true) {
                arDiscount = this.invoiceDetails['values'][i].redchangedArDiscount;
                this.invoiceDetails['values'][i].editedDiscounted =  this.invoiceDetails['values'][i].reddawayshowEdit;

              }
              this.discountsValue = {
                apDiscount: (apDiscount).toString(),
                arDiscount: (arDiscount).toString(),
                apAmc: (apAmc).toString(),
                arAmc: (arAmc).toString()
              }
              this.invoiceDetails['values'][i].finalAPDiscount = this.discountsValue.apDiscount;
              this.invoiceDetails['values'][i].finalARDiscount = this.discountsValue.arDiscount;
              this.parseSetMasterData.forEach((data:any) => {
                console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
                if (data.companyName === this.invoiceDetails['carrier']) {
                  data.assessorial = JSON.parse(data.assessorials);
                  this.apData = data.assessorial;
                }
                console.log('Ap Assesss', this.apData)
              })
              this.parseArSetMasterData.forEach((data:any) => {
                console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data)', data);
                if (data.companyName === this.invoiceDetails['carrier']) {
                  data.assessorial = JSON.parse(data.assessorials);
                  this.arData = data.assessorial;
                }
                console.log('Ap Assesss', this.apData)
              })
            }

            // this.discountsValue = {
            //   apDiscount: (apDiscount).toString(),
            //   arDiscount: (arDiscount).toString(),
            //   apAmc: (apAmc).toString(),
            //   arAmc: (arAmc).toString()
            // }
            this.invoiceDetails['values'][i].reddawayApData = this.invoiceDetails['values'][i].rateResponse.reddawayAp;
            this.invoiceDetails['values'][i].reddawayArData = this.invoiceDetails['values'][i].rateResponse.reddawayAr;
            // Final Ap Rate Calculation 
            // let forteApRate = (100 - Number(this.discountsValue.apDiscount)) * 0.01;
            console.log('reddawaydata', this.invoiceDetails['values'][i]);
            if (this.invoiceDetails['values'][i].reddawayApData !== 'service not available' && this.invoiceDetails['values'][i].reddawayArData !== 'service not available' && this.invoiceDetails['values'][i].reddawayApData !== undefined && this.invoiceDetails['values'][i].rateResponse.reddawayAp.totalCharge === undefined) {
              this.invoiceDetails['values'][i].apGrossRate = 0;
              this.invoiceDetails['values'][i].arGrossRate = 0;
              let addRate = 0;
              let addRateAr = 0;
              for (let m =0;m<this.invoiceDetails['values'][i].reddawayApData.rate.length;m++) {
                addRate += Number(this.invoiceDetails['values'][i].reddawayApData.rate[m].finalRate)
              }
              for (let m =0;m<this.invoiceDetails['values'][i].reddawayArData.rate.length;m++) {
                addRateAr += Number(this.invoiceDetails['values'][i].reddawayArData.rate[m].finalRate)
              }
              if (this.invoiceDetails['values'][i].reddawayApData.type === 'Rate') {
                // for (let m =0;m<this.invoiceDetails['values'][i].reddawayApData.rate.length;m++) {

                if (Number(addRate) > Number(this.invoiceDetails['values'][i].reddawayApData.minCharges)) {
                  if (this.invoiceDetails['values'][i].reddawayApData.diffRate === '0') {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(addRate).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(addRate) + Number(this.invoiceDetails['values'][i].reddawayApData.diffRate)).toFixed(2));
                  }
                } else {
                  console.log(addRate, this.discountsValue.apAmc);
                  if (this.invoiceDetails['values'][i].reddawayApData.diffRate === '0') {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(this.invoiceDetails['values'][i].reddawayApData.minCharges).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].reddawayApData.minCharges) + Number(this.invoiceDetails['values'][i].reddawayApData.diffRate)).toFixed(2));
                  }
                // }
              }
              // this.invoiceDetails['values'][i].apGrossRate = (this.invoiceDetails['values'][i].apGrossRate).toFixed(2)
              } else {
                for (let m =0;m<this.invoiceDetails['values'][i].reddawayApData.rate.length;m++) {

                if (Number(this.invoiceDetails['values'][i].reddawayApData.rate[m].finalDWRate) > Number(this.invoiceDetails['values'][i].reddawayApData.minCharges)) {
                  if (this.invoiceDetails['values'][i].reddawayApData.diffRate === '0') {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat(Number(this.invoiceDetails['values'][i].reddawayApData.rate[m].finalDWRate).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].reddawayApData.rate[m].finalDWRate) + Number(this.invoiceDetails['values'][i].reddawayApData.diffRate)).toFixed(2));
                  }
                } else {
                  console.log(addRate, this.discountsValue.apAmc);
                  if (this.invoiceDetails['values'][i].reddawayApData.diffRate === '0') {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].reddawayApData.minCharges)).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].reddawayApData.minCharges) + Number(this.invoiceDetails['values'][i].reddawayApData.diffRate)).toFixed(2));
                  }
                }
              }
              // this.invoiceDetails['values'][i].apGrossRate = (this.invoiceDetails['values'][i].apGrossRate).toFixed(2)

              }

              // if (Number(reddawayApData.rate[0].finalRate) > Number(this.discountsValue.apAmc)) {
              //   this.invoiceDetails['values'][i].apGrossRate = reddawayApData.rate[0].finalRate;
              // } else {
              // this.invoiceDetails['values'][i].apGrossRate = this.discountsValue.apAmc;
              // }
              this.invoiceDetails['values'][i].apGrossRate = 0;
              
              for (let m =0;m<this.invoiceDetails['values'][i].reddawayApData.finalRate.length;m++) {
                          this.invoiceDetails['values'][i].apGrossRate += parseFloat((Number(this.invoiceDetails['values'][i].reddawayApData.finalRate[m])).toFixed(2));
              }
              // let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.invoiceDetails['values'][i].finalAPDiscount)) * 0.01);

              // let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.discountsValue.apDiscount)) * 0.01);
              // if ((forteApRate) < apAmc) {
              //   this.invoiceDetails['values'][i].apFinalRate = (apAmc).toString();
              // } else {
                // this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);
              // }
              // this.invoiceDetails['values'][i].apFinalRate = this.invoiceDetails['values'][i].reddawayApData.totalCharge;
              this.invoiceDetails['values'][i].finalAPDiscount = ((Number(this.invoiceDetails['values'][i].reddawayApData.discountedRate[0]) / Number(this.invoiceDetails['values'][i].apGrossRate))*100).toFixed(2);
              let forteApRate = this.invoiceDetails['values'][i].apGrossRate * ((100 - Number(this.invoiceDetails['values'][i].finalAPDiscount)) * 0.01);

   
                this.invoiceDetails['values'][i].apFinalRate = (forteApRate).toFixed(2);

              this.invoiceDetails['values'][i].fuelSurChargeApValue = ((Number(this.invoiceDetails['values'][i].reddawayApData.netChargeResult) / 100)).toFixed(2);

              // let forteArRate = (100 - Number(this.discountsValue.arDiscount)) * 0.01;
              // AR calculation
              if (this.invoiceDetails['values'][i].reddawayArData.type === 'Rate') {
                for (let m =0;m<this.invoiceDetails['values'][i].reddawayArData.rate.length;m++) {

                if ((Number(addRateAr) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].reddawayArData.minCharges) * this.increasedValueForAR)) {
                  if (this.invoiceDetails['values'][i].reddawayArData.diffRate === '0') {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat((addRateAr * this.increasedValueForAR).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat(((addRateAr * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].reddawayArData.diffRate) * this.increasedValueForAR)).toFixed(2));
                  }
                } else {
                  if (this.invoiceDetails['values'][i].reddawayArData.diffRate === '0') {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].reddawayArData.minCharges * this.increasedValueForAR).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].reddawayArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].reddawayArData.diffRate) * this.increasedValueForAR)).toFixed(2));
                  }
                }
              }
              // this.invoiceDetails['values'][i].arGrossRate = (this.invoiceDetails['values'][i].arGrossRate).toFixed(2);
              } else {
                for (let m =0;m<this.invoiceDetails['values'][i].reddawayArData.rate.length;m++) {

                if ((Number(this.invoiceDetails['values'][i].reddawayArData.rate[m].finalDWRate) * this.increasedValueForAR) > (Number(this.invoiceDetails['values'][i].reddawayArData.minCharges) * this.increasedValueForAR)) {
                  if (this.invoiceDetails['values'][i].reddawayArData.diffRate === '0') {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].reddawayArData.rate[m].finalDWRate * this.increasedValueForAR).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].reddawayArData.rate[m].finalDWRate * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].reddawayArData.diffRate) * this.increasedValueForAR)).toFixed(2));
                  }
                } else {
                  if (this.invoiceDetails['values'][i].reddawayArData.diffRate === '0') {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat((this.invoiceDetails['values'][i].reddawayArData.minCharges * this.increasedValueForAR).toFixed(2));
                  } else {
                    this.invoiceDetails['values'][i].arGrossRate += parseFloat(((this.invoiceDetails['values'][i].reddawayArData.minCharges * this.increasedValueForAR) + (Number(this.invoiceDetails['values'][i].reddawayArData.diffRate) * this.increasedValueForAR)).toFixed(2));
                  }
                }
              }
              // this.invoiceDetails['values'][i].arGrossRate = (this.invoiceDetails['values'][i].arGrossRate).toFixed(2);

            }
              // if ( Number(reddawayArData.rate[0].finalRate) > Number(this.discountsValue.arAmc)) {
              //   this.invoiceDetails['values'][i].arGrossRate = reddawayArData.rate[0].finalRate;
              // } else {
              // this.invoiceDetails['values'][i].arGrossRate = this.discountsValue.arAmc;
              // }
              let forteArRate = this.invoiceDetails['values'][i].arGrossRate * ((100 - Number(this.discountsValue.arDiscount)) * 0.01);
              // this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
              if ((forteArRate) < arAmc) {
                this.invoiceDetails['values'][i].arFinalRate = (arAmc).toString();
              } else {
                this.invoiceDetails['values'][i].arFinalRate = (forteArRate).toFixed(2);
              }
              console.log('starw', this.invoiceDetails['values'][i]);

              if (this.invoiceDetails['values'][i].arFinalRate < this.invoiceDetails['values'][i].apFinalRate) {
                console.log('starw', this.invoiceDetails['values'][i]);
                let x = this.invoiceDetails['values'][i].reddawayApData.discountedRate[0] * 1.05;
                // discountedRate = x;
                this.invoiceDetails['values'][i].arFinalRate = x.toFixed(2);
                let y = x/((100-this.invoiceDetails['values'][i].finalARDiscount)/100);
                console.log('jefrin',y);
                this.invoiceDetails['values'][i].arGrossRate = y.toFixed(2);
                // finalRate = [];
                // finalRate.push(y);
                // this.finalRateCharge = []
                // this.finalRateCharge = this.netChargeArrSum(finalRate);
  
              }
              if (new Date() > new Date(this.invoiceDetails['values'][i].shipmentDate)) {
                this.invoiceDetails['values'][i].arFSC = this.invoiceDetails['values'][i].reddawayArData.fuelSurcharge;
              } else {
                this.invoiceDetails['values'][i].arFSC = 0;
              }
              this.invoiceDetails['values'][i].fuelSurChargeArValue = (this.invoiceDetails['values'][i].arFinalRate * (Number(this.invoiceDetails['values'][i].arFSC) / 100)).toFixed(2);

              let assessorialsChargeValue = 0;
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];
              let addCACharge;
              this.parseArSetMasterData.forEach((ele:any) => {
                if (ele.companyName === 'REDDAWAY') {
                  if (this.invoiceDetails['values'][i].originState === 'CA' || this.invoiceDetails['values'][i].destinationState === 'CA') {
                    addCACharge = ele.caCharge;
                  } else {
                    addCACharge = 0
                  }
                }
              })
              this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
              this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
              console.log(this.invoiceDetails['values'][i].assessorial);
              if (this.invoiceDetails['values'][i].assessorial.length > 0) {
                let length = 0;
                let arLength = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                // for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
  
  
  
                // assessorialsChargeValue = assessorialsChargeValue + this.invoiceDetails['values'][i].assessorial[j].charge;
  
  
                if (this.editApAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'REDDAWAY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAP.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.accessorialFormAP.value.accessorials === obj.assessorial[l].name &&
                              this.accessorialFormAP.value.accessorials === this.invoiceDetails['values'][i].assessorial[j].assessorialName) {
                              console.log('test123');
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === this.accessorialFormAP.value.accessorials) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = this.accessorialFormAP.value.cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    console.log('thius', this.ApAssessorialsArray);
                                    break;
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.accessorialFormAP.value.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.accessorialFormAP.value.max)) {
                                  crtValue = Number(this.accessorialFormAP.value.max);
                                } else if (lsyrc < Number(this.accessorialFormAP.value.min)) {
                                  crtValue = Number(this.accessorialFormAP.value.min);
                                } else if (lsyrc > Number(this.accessorialFormAP.value.min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    // console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            } else if (this.accessorialFormAP.value.accessorials !== obj.assessorial[l].name) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                console.log(obj);
                                console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l]);
                                // if(this.invoiceDetails['values'][i].forteApAssessorialRate != 0) {		
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let apCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    apCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(apCostData);
                                    // this.invoiceDetails['values'][i].forteApAssessorialRate =
                                    //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                                    //     Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': 0
                                };
                                length = length + 1;
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteApAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                                //     Number(apCostData.apCost)).toFixed(2);
  
                              }
                            }
                            // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            //   let apCostData;
                            //   apCostData = {
                            //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                            //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                            //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                            //     'arCost': 0
                            //   };
                            //   length = length + 1;
  
                            //   this.ApAssessorialsArray.push(apCostData);
                            //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //   //     Number(apCostData.arCost)).toFixed(2);
  
                            // }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                      let profileAPAssessorials:any = [];
                      this.parseSetMasterData.forEach((obj:any) => {
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].reddawayRules.ap.length > 0) {
                          if (obj.companyName === this.invoiceDetails['carrier']) {
                            console.log(obj);
                            obj.assessorial = JSON.parse(obj.assessorials);
                            console.log(this.invoiceDetails['values'][i].reddawayRules);
                            if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0) {
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].reddawayRules.ap[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    if (data.cwt === false) {
                                      profileLifeGateCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLifeGateCharge = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].limitedAccessDelivery !== '') {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].reddawayRules.ap[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    if (data.cwt === false) {
                                      profileLimitedAccessDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLimitedAccessDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].reddawayRules.ap[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    if (data.cwt === false) {
                                      profileResidentialCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileResidentialCharge = crtValue;
                                    }
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].reddawayRules.ap[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    if (data.cwt === false) {
                                      profileInsideDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileInsideDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].reddawayRules.ap[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    if (data.cwt === false) {
                                      profileNotify = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileNotify = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].reddawayRules.ap[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    if (data.cwt === false) {
                                      profileSingleShipment = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileSingleShipment = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ap[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].reddawayRules.ap[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    if (data.cwt === false) {
                                      profiledeliveryAppointmentRequired = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profiledeliveryAppointmentRequired = crtValue;
                                    }
                                  }
                                })
                              }
  
                              profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                            }
                            for (let k=0;k < profileAPAssessorials.length;k++){
                              console.log(profileAPAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAPAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': profileAPAssessorials[k].charge
                                }
                                this.ApAssessorialsArray.push(object);
                                length = length + 1;
    
                                this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': 0,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                length = length + 1;
    
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
    
                              }
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
  
  
                          }
                        } else {
                          if (obj.companyName === this.invoiceDetails['carrier']) {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            console.log(obj);
                            // obj.assessorial.forEach((element:any) => {
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
  
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': 0,
                                  'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                length = length + 1;
  
                                this.ApAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (length === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                    }
                  }
                } else {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAPAssessorials:any = [];
  
                    this.parseSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].reddawayRules.ap.length > 0) {
                        if (obj.companyName === this.invoiceDetails['carrier']) {
                          console.log(obj);
                          obj.assessorial = JSON.parse(obj.assessorials);
  
                          console.log(this.invoiceDetails['values'][i].reddawayRules);
                          // if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                          if (this.invoiceDetails['values'][i].reddawayRules.ap.length > 0) {
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].reddawayRules.ap[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].reddawayRules.ap[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].reddawayRules.ap[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }
  
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].reddawayRules.ap[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].reddawayRules.ap[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].reddawayRules.ap[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ap[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].reddawayRules.ap[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }
  
                            profileAPAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                          }
                          for (let k=0;k < profileAPAssessorials.length;k++){
                            console.log(profileAPAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAPAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAPAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': profileAPAssessorials[k].charge
                              }
                              this.ApAssessorialsArray.push(object);
                              length = length + 1;
  
                              this.invoiceDetails['values'][i].forteApAssessorialRate = profileAPAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;
  
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            }
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
  
  
                        }
                      } else {
                        if (obj.companyName === this.invoiceDetails['carrier']) {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          // obj.assessorial.forEach((element:any) => {
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].apCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    length = length + 1;
  
                                    this.ApAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': 0,
                                'apCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              length = length + 1;
  
                              this.ApAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      this.viewApArAccess[k].apCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      length = length + 1;
    
                                      this.ApAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (length === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }
                }
                if (this.ApAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ApAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.apCost);
                  });
                  this.invoiceDetails['values'][i].forteApAssessorialRate = value123;
                  console.log('value123', value123)
                }
                if (this.editArAccess === true) {
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    if (this.invoiceDetails['values'][i].showRule !== true) {
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (obj.companyName === 'REDDAWAY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(this.accessorialFormAR.value.accessorials)
                          for (let l = 0; l < obj.assessorial.length; l++) {
                          for (let k = 0; k < this.invoiceDetails['values'][i].reddawayAccessArArray.length; k++) {
                            console.log('view', this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                          // if (this.viewApArAccess[k].name === this.invoiceDetails['values'][i].fxfpRate.arAssessorialName) {
                          //   let apCostData;
                          //   this.viewApArAccess[k].arCost = this.invoiceDetails['values'][i].fxfpRate.arCost;
                          //   apCostData = this.viewApArAccess[k];
                          //   arLength = arLength + 1;
                          //   this.ArAssessorialsArray.push(apCostData);
                          //   // this.invoiceDetails['values'][i].forteApAssessorialRate =
                          //   //   Number(Number(this.invoiceDetails['values'][i].forteApAssessorialRate) +
                          //   //     Number(obj.assessorial[l].cost)).toFixed(2);
                          //   console.log(this.invoiceDetails['values'][i].forteApAssessorialRate, obj.assessorial[l].cost);
                          // } else {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                //   console.log(this.viewApArAccess[k]);
                                  if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                    arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
                                    // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                  crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                  crtValue = lsyrc;
                                }
                                // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                  console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                  if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].arCost = crtValue;
                                    arCostData = crtValue
                                    // arCostData.arCost = this.invoiceDetails['values'][i].yrcAccessArArray[k].cost
                                    arCostData.arCost = crtValue;
  
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                // }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
  
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.invoiceDetails['values'][i].reddawayAccessArArray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = crtValue
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'LiftGate Service') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Residential PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    // console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    console.log(this.invoiceDetails['values'][i].reddawayAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Limited Access Delivery') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = obj.assessorial[l].cost;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost
  
                                      length = length + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].max);
                                  } else if (lsyrc < Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min);
                                  } else if (lsyrc > Number(this.invoiceDetails['values'][i].reddawayAccessArArray[k].min)) {
                                    crtValue = lsyrc;
                                  }
                                  // for (let k = 0; k < this.invoiceDetails['values'][i].priararray.length; k++) {
                                    // console.log(this.invoiceDetails['values'][i].fedexPriAccessArArray[k]);
                                    if (this.invoiceDetails['values'][i].reddawayAccessArArray[k].name === 'Limited Access PickUp') {
                                      let arCostData;
                                      // this.invoiceDetails['values'][i].fedexPriAccessArArray[k].apCost = crtValue;
                                      arCostData = this.invoiceDetails['values'][i].reddawayAccessArArray[k];
                                      arCostData.arCost = crtValue;
  
                                      length = length + 1;
    
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
    
                                  // }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
                              }
                            }
  
                          // }
  if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                        }
  
                        // }
                            // else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                            //   let apCostData;
                            //   apCostData = {
                            //     'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                            //     'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                            //     'apCost': this.invoiceDetails['values'][i].assessorial[j].charge,
                            //     'arCost': 0
                            //   };
                            //   length = length + 1;
  
                            //   this.ApAssessorialsArray.push(apCostData);
                            //   // this.invoiceDetails['values'][i].forteArAssessorialRate =
                            //   //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                            //   //     Number(apCostData.arCost)).toFixed(2);
  
                            // }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            // if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                            //   break;
                            // }
                          }
                        }
                      });
                    } else if (this.invoiceDetails['values'][i].showRule === true) {
                   
                      let profileAssessorials:any = [];
                      this.parseArSetMasterData.forEach((obj:any) => {
                        if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                          if (obj.companyName === 'REDDAWAY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].liftGateService !== '') {
                                profileLifeGateCharge = this.invoiceDetails['values'][i].reddawayRules.ar[0].liftGateService;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'LiftGate Service') {
                                    if (data.cwt === false) {
                                      profileLifeGateCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLifeGateCharge = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].limitedAccessDelivery !== '') {
                                profileLimitedAccessDelivery = this.invoiceDetails['values'][i].reddawayRules.ar[0].limitedAccessDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Limited Access Delivery') {
                                    if (data.cwt === false) {
                                      profileLimitedAccessDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileLimitedAccessDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].residentialDelivery !== '') {
                                profileResidentialCharge = this.invoiceDetails['values'][i].reddawayRules.ar[0].residentialDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Residential Delivery') {
                                    if (data.cwt === false) {
                                      profileResidentialCharge = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileResidentialCharge = crtValue;
                                    }
                                  }
                                })
                              }
  
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].insideDelivery !== '') {
                                profileInsideDelivery = this.invoiceDetails['values'][i].reddawayRules.ar[0].insideDelivery;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Inside Delivery') {
                                    if (data.cwt === false) {
                                      profileInsideDelivery = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileInsideDelivery = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].notify !== '') {
                                profileNotify = this.invoiceDetails['values'][i].reddawayRules.ar[0].notify;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Notify') {
                                    if (data.cwt === false) {
                                      profileNotify = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileNotify = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].singleShipment !== '') {
                                profileSingleShipment = this.invoiceDetails['values'][i].reddawayRules.ar[0].singleShipment;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Single Shipment') {
                                    if (data.cwt === false) {
                                      profileSingleShipment = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profileSingleShipment = crtValue;
                                    }
                                  }
                                })
                              }
                              if (this.invoiceDetails['values'][i].reddawayRules.ar[0].deliveryAppointmentRequired !== '') {
                                profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].reddawayRules.ar[0].deliveryAppointmentRequired;
                              } else {
                                obj.assessorial.forEach((data:any) => {
                                  if (data.name === 'Delivery Appointment Required') {
                                    if (data.cwt === false) {
                                      profiledeliveryAppointmentRequired = data.cost;
                                    } else {
                                      const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                      let crtValue:any;
                                      if (lsyrc > Number(data.max)) {
                                        crtValue = Number(data.max);
                                      } else if (lsyrc < Number(data.min)) {
                                        crtValue = Number(data.min);
                                      } else if (lsyrc > Number(data.min)) {
                                        crtValue = lsyrc;
                                      }
                                      profiledeliveryAppointmentRequired = crtValue;
                                    }
                                  }
                                })
                              }
  
                              profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                                { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                                { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                                { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                                { assessorial: 'Notify', charge: profileNotify, id: 5 },
                                { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                                { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                            }
                            for(let k=0;k<profileAssessorials.length;k++) {
                              console.log(profileAssessorials[k]);
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                                this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              }
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
  
                          }
                        } else {
                          if (obj.companyName === 'FEDEX ECONOMY') {
                            obj.assessorial = JSON.parse(obj.assessorials);
                            console.log(obj);
                            for (let l = 0; l < obj.assessorial.length; l++) {
                              if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                                if (obj.assessorial[l].cwt === false) {
                                  console.log(obj);
                                  console.log(obj.assessorial[l]);
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                } else {
                                  const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                  let crtValue:any;
                                  if (lsyrc > Number(obj.assessorial[l].max)) {
                                    crtValue = Number(obj.assessorial[l].max);
                                  } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                    crtValue = Number(obj.assessorial[l].min);
                                  } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                    crtValue = lsyrc;
                                  }
                                  for (let k = 0; k < this.viewApArAccess.length; k++) {
                                    console.log(this.viewApArAccess[k]);
                                    if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                      let arCostData;
                                      this.viewApArAccess[k].arCost = crtValue;
                                      arCostData = this.viewApArAccess[k];
                                      arLength = arLength + 1;
  
                                      this.ArAssessorialsArray.push(arCostData);
                                      this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                      console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                    }
  
                                  }
                                  // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                }
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                                let apCostData;
                                apCostData = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'apCost': 0,
                                  'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                                };
                                arLength = arLength + 1;
  
                                this.ArAssessorialsArray.push(apCostData);
                                // this.invoiceDetails['values'][i].forteArAssessorialRate =
                                //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                                //     Number(apCostData.arCost)).toFixed(2);
  
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                                if (obj.assessorial[l].name === 'LiftGate Service') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                                if (obj.assessorial[l].name === 'Residential Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                                if (obj.assessorial[l].name === 'Limited Access Delivery') {
                                  if (obj.assessorial[l].cwt === false) {
                                    console.log(obj);
                                    console.log(obj.assessorial[l]);
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = obj.assessorial[l].cost;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                                  } else {
                                    const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(obj.assessorial[l].max)) {
                                      crtValue = Number(obj.assessorial[l].max);
                                    } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                      crtValue = Number(obj.assessorial[l].min);
                                    } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                      crtValue = lsyrc;
                                    }
                                    for (let k = 0; k < this.viewApArAccess.length; k++) {
                                      console.log(this.viewApArAccess[k]);
                                      if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                        let arCostData;
                                        this.viewApArAccess[k].apCost = crtValue;
                                        arCostData = this.viewApArAccess[k];
                                        length = length + 1;
      
                                        this.ApAssessorialsArray.push(arCostData);
                                        this.invoiceDetails['values'][i].forteApAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                        console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                      }
      
                                    }
                                    // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                  }
                                }
                              }
                              console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                              if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                                break;
                              }
                            }
                          }
                        }
                      });
                   
                   
                    }
  
  
                  }
                } else {
                  console.log('issue');
  
                  for (let j = 0; j < this.invoiceDetails['values'][i].assessorial.length; j++) {
                    let profileAssessorials:any = [];
                    this.parseArSetMasterData.forEach((obj:any) => {
                      if (this.invoiceDetails['values'][i].showRule === true && this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                        if (obj.companyName === 'REDDAWAY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          if (this.invoiceDetails['values'][i].reddawayRules.ar.length > 0) {
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].liftGateService !== '') {
                              profileLifeGateCharge = this.invoiceDetails['values'][i].reddawayRules.ar[0].liftGateService;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'LiftGate Service') {
                                  if (data.cwt === false) {
                                    profileLifeGateCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLifeGateCharge = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].limitedAccessDelivery !== '') {
                              profileLimitedAccessDelivery = this.invoiceDetails['values'][i].reddawayRules.ar[0].limitedAccessDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Limited Access Delivery') {
                                  if (data.cwt === false) {
                                    profileLimitedAccessDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileLimitedAccessDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].residentialDelivery !== '') {
                              profileResidentialCharge = this.invoiceDetails['values'][i].reddawayRules.ar[0].residentialDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Residential Delivery') {
                                  if (data.cwt === false) {
                                    profileResidentialCharge = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileResidentialCharge = crtValue;
                                  }
                                }
                              })
                            }
  
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].insideDelivery !== '') {
                              profileInsideDelivery = this.invoiceDetails['values'][i].reddawayRules.ar[0].insideDelivery;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Inside Delivery') {
                                  if (data.cwt === false) {
                                    profileInsideDelivery = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileInsideDelivery = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].notify !== '') {
                              profileNotify = this.invoiceDetails['values'][i].reddawayRules.ar[0].notify;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Notify') {
                                  if (data.cwt === false) {
                                    profileNotify = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileNotify = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].economyRules.ar[0].singleShipment !== '') {
                              profileSingleShipment = this.invoiceDetails['values'][i].reddawayRules.ar[0].singleShipment;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Single Shipment') {
                                  if (data.cwt === false) {
                                    profileSingleShipment = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profileSingleShipment = crtValue;
                                  }
                                }
                              })
                            }
                            if (this.invoiceDetails['values'][i].reddawayRules.ar[0].deliveryAppointmentRequired !== '') {
                              profiledeliveryAppointmentRequired = this.invoiceDetails['values'][i].reddawayRules.ar[0].deliveryAppointmentRequired;
                            } else {
                              obj.assessorial.forEach((data:any) => {
                                if (data.name === 'Delivery Appointment Required') {
                                  if (data.cwt === false) {
                                    profiledeliveryAppointmentRequired = data.cost;
                                  } else {
                                    const lsyrc = (Number(data.cost) * this.invoiceDetails['values'][i].weight) / 100;
                                    let crtValue:any;
                                    if (lsyrc > Number(data.max)) {
                                      crtValue = Number(data.max);
                                    } else if (lsyrc < Number(data.min)) {
                                      crtValue = Number(data.min);
                                    } else if (lsyrc > Number(data.min)) {
                                      crtValue = lsyrc;
                                    }
                                    profiledeliveryAppointmentRequired = crtValue;
                                  }
                                }
                              })
                            }
  
                            profileAssessorials.push({ assessorial: 'LiftGate Service', charge: profileLifeGateCharge, 'id': 1 },
                              { assessorial: 'Residential Delivery', charge: profileResidentialCharge, id: 2 },
                              { assessorial: 'Limited Access Delivery', charge: profileLimitedAccessDelivery, id: 3 },
                              { assessorial: 'Inside Delivery', charge: profileInsideDelivery, id: 4 },
                              { assessorial: 'Notify', charge: profileNotify, id: 5 },
                              { assessorial: 'Single Shipment', charge: profileSingleShipment, id: 6 },
                              { assessorial: 'Delivery Appointment Required', charge: profiledeliveryAppointmentRequired, id: 7 });
  
                          }
                          for(let k=0;k<profileAssessorials.length;k++) {
                            console.log(profileAssessorials[k]);
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === profileAssessorials[k].assessorial) {
                              let object = {
                                'name': profileAssessorials[k].assessorial,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'arCost': profileAssessorials[k].charge
                              }
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(object);
                              this.invoiceDetails['values'][i].forteArAssessorialRate = profileAssessorials[k].charge;
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp" || this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (profileAssessorials[k].assessorial === 'LiftGate Service') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object);
                            }
  
                            }
                             else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (profileAssessorials[k].assessorial === 'Residential Delivery') {
                                let object = {
                                  'name': profileAssessorials[k].assessorial,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (profileAssessorials[k].assessorial === 'Limited Access Delivery') {
                                let object = {
                                  'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                  'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                  'arCost': profileAssessorials[k].charge
                                }
                                arLength = arLength + 1;
                                this.ArAssessorialsArray.push(object); 
                            }
  
                            }
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
  
  
                        }
                      } else {
                        if (obj.companyName === 'REDDAWAY') {
                          obj.assessorial = JSON.parse(obj.assessorials);
                          console.log(obj);
                          for (let l = 0; l < obj.assessorial.length; l++) {
                            if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === obj.assessorial[l].name) {
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === obj.assessorial[l].name) {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
  
                            } else if (this.invoiceDetails['values'][i].assessorial[j].assessorialName.includes('/')) {
                              let apCostData;
                              apCostData = {
                                'name': this.invoiceDetails['values'][i].assessorial[j].assessorialName,
                                'shortname': this.invoiceDetails['values'][i].assessorial[j].shortName,
                                'apCost': 0,
                                'arCost': this.invoiceDetails['values'][i].assessorial[j].charge
                              };
                              arLength = arLength + 1;
  
                              this.ArAssessorialsArray.push(apCostData);
                              // this.invoiceDetails['values'][i].forteArAssessorialRate =
                              //   Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) +
                              //     Number(apCostData.arCost)).toFixed(2);
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate PickUp") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp' || this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "LiftGate Delivery") {
                              if (obj.assessorial[l].name === 'LiftGate Service') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'LiftGate Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Residential PickUp") {
                              if (obj.assessorial[l].name === 'Residential Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Residential PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "Limited Access PickUp") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            } else  if (this.invoiceDetails['values'][i].assessorial[j].assessorialName === "limitedAccessDelivery") {
                              if (obj.assessorial[l].name === 'Limited Access Delivery') {
  
                              if (obj.assessorial[l].cwt === false) {
                                console.log(obj);
                                console.log(obj.assessorial[l]);
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access Delivery') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = obj.assessorial[l].cost;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(obj.assessorial[l].cost)).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, obj.assessorial[l].cost);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + Number(element.cost)).toFixed(2);
                              } else {
                                const lsyrc = (Number(obj.assessorial[l].cost) * this.invoiceDetails['values'][i].weight) / 100;
                                let crtValue:any;
                                if (lsyrc > Number(obj.assessorial[l].max)) {
                                  crtValue = Number(obj.assessorial[l].max);
                                } else if (lsyrc < Number(obj.assessorial[l].min)) {
                                  crtValue = Number(obj.assessorial[l].min);
                                } else if (lsyrc > Number(obj.assessorial[l].min)) {
                                  crtValue = lsyrc;
                                }
                                for (let k = 0; k < this.viewApArAccess.length; k++) {
                                  console.log(this.viewApArAccess[k]);
                                  if (this.viewApArAccess[k].name === 'Limited Access PickUp') {
                                    let arCostData;
                                    this.viewApArAccess[k].arCost = crtValue;
                                    arCostData = this.viewApArAccess[k];
                                    arLength = arLength + 1;
  
                                    this.ArAssessorialsArray.push(arCostData);
                                    this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                                    console.log(this.invoiceDetails['values'][i].forteArAssessorialRate, crtValue);
                                  }
  
                                }
                                // this.invoiceDetails['values'][i].forteArAssessorialRate = Number(Number(this.invoiceDetails['values'][i].forteArAssessorialRate) + crtValue).toFixed(2);
                              }
                            }
  
                            }
                            console.log('length', length, this.invoiceDetails['values'][i].assessorial.length);
                            if (arLength === this.invoiceDetails['values'][i].assessorial.length) {
                              break;
                            }
                          }
                        }
                      }
                    });
                  }
  
                }
                if (this.ArAssessorialsArray.length === 0) {
                  this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                } else {
                  let value123 = 0;
                  this.ArAssessorialsArray.forEach((res:any) => {
                    value123 += Number(res.arCost);
                  });
                  this.invoiceDetails['values'][i].forteArAssessorialRate = value123;
                  console.log('value123', value123)
                }
  
                // });
                //     }
                //   }
                // });
                // }
  
                assessorialsChargeValue =  Number(this.invoiceDetails['values'][i].forteArAssessorialRate);
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
                console.log('this.invoiceDetails[values][i].ApAssessorialsArray', this.invoiceDetails['values'][i].ApAssessorialsArray, this.invoiceDetails['values'][i].ArAssessorialsArray);
              } else {
                this.invoiceDetails['values'][i].forteApAssessorialRate = 0;
                this.invoiceDetails['values'][i].forteArAssessorialRate = 0;
                assessorialsChargeValue = 0;
                this.ApAssessorialsArray = [];
                this.ArAssessorialsArray = [];
                this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
                this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
              }

              console.log('rate', this.invoiceDetails['values'][i].fuelSurChargeArValue, this.invoiceDetails['values'][i].arFinalRate, this.invoiceDetails['values'][i].assessorialCharge)
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeArValue) + Number(this.invoiceDetails['values'][i].arFinalRate)).toFixed(2);
              console.log('this.invoiceDetails[values][i].fedexPriorityData', this.invoiceDetails['values'][i].totalForteRate);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].totalForteApRate = (Number(this.invoiceDetails['values'][i].fuelSurChargeApValue) + Number(this.invoiceDetails['values'][i].apFinalRate) + Number(this.invoiceDetails['values'][i].forteApAssessorialRate) + Number(addCACharge)).toFixed(2);
              if (this.invoiceDetails['values'][i].reddawayCostplusFactor !== null && this.costplusValueEnabled === true && this.invoiceDetails['values'][i].reddawayCostplusFactor !== undefined && this.invoiceDetails['values'][i].reddawayCostplusFactor !== '') {
                let valuexx =  1 + Number(this.invoiceDetails['values'][i].reddawayCostplusFactor) /100;
                console.log(valuexx);
                this.invoiceDetails['values'][i].totalForteRate = (this.invoiceDetails['values'][i].totalForteApRate* valuexx).toFixed(2);
              }
              // tslint:disable-next-line:max-line-length
              console.log("ee",this.invoiceDetails['values'][i].totalForteRate,this.invoiceDetails['values'][i].fuelSurChargeApValue,this.invoiceDetails['values'][i].apFinalRate,assessorialsChargeValue)
              this.invoiceDetails['values'][i].marginRate = Number(this.invoiceDetails['values'][i].totalForteRate - (Number(this.invoiceDetails['values'][i].totalForteApRate))).toFixed(2);
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              // tslint:disable-next-line:max-line-length
              // this.invoiceDetails['values'][i].margin = (((Number(this.invoiceDetails['values'][i].totalForteRate) - Number(this.invoiceDetails['values'][i].apFinalRate)) / (Number(this.invoiceDetails['values'][i].apFinalRate)))).toFixed(2);            // ((Number(this.invoiceDetails['values'][i].totalForteRate) - ()))
              this.invoiceDetails['values'][i].margin = ((Number(this.invoiceDetails['values'][i].marginRate) / (Number(this.invoiceDetails['values'][i].totalForteRate))) * 100).toFixed(2); 


              let invoiceAmount;
              if (this.invoiceDetails['values'][i].invoiceAmount.includes(',')) {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount.replace(',', '')
              } else {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount;

              }
              let charge = (Number(invoiceAmount) + Number(this.invoiceDetails['values'][i].fuelCharge) + Number(this.invoiceDetails['values'][i].assessorialCharge));
              this.invoiceDetails['values'][i].variance = (invoiceAmount - this.invoiceDetails['values'][i].totalForteRate).toFixed(2);
              console.log(charge);
              console.log(this.invoiceDetails['values'][i].variance);
              // tslint:disable-next-line:max-line-length
              this.invoiceDetails['values'][i].optimizeValue = ((invoiceAmount / this.invoiceDetails['values'][i].totalForteRate) * 100).toFixed(2);


              console.log('Value 3', this.invoiceDetails['values'][i].optimizeValue);
              this.resultForPriorityArray = [];
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                if (this.invoiceDetails['values'][i].reddawayApData !== 'service not available' && this.invoiceDetails['values'][i].reddawayArData !== 'service not available' && this.invoiceDetails['values'][i].reddawayApData !== undefined) {
                  this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);

                }
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }
            } else {
              this.invoiceDetails['values'][i].apGrossRate = '0';
              this.invoiceDetails['values'][i].arGrossRate = '0';
              this.invoiceDetails['values'][i].arFinalRate = '0';
              this.invoiceDetails['values'][i].apFinalRate = '0';
              this.invoiceDetails['values'][i].totalForteRate = '0';
              this.invoiceDetails['values'][i].totalForteApRate = '0';
              this.invoiceDetails['values'][i].marginRate = '0';
              if (this.invoiceDetails['values'][i].marginRate < 0) {
                this.invoiceDetails['values'][i].negative = true;
              } else {
                this.invoiceDetails['values'][i].negative = false;

              }
              this.invoiceDetails['values'][i].margin = '0';
              let invoiceAmount;
             
              if (this.invoiceDetails['values'][i].invoiceAmount.includes(',')) {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount.replace(',', '')
              } else {
                invoiceAmount = this.invoiceDetails['values'][i].invoiceAmount;

              }
              this.invoiceDetails['values'][i].variance = (invoiceAmount - this.invoiceDetails['values'][i].totalForteRate).toFixed(2);
              this.invoiceDetails['values'][i].optimizeValue = '0';
              this.invoiceDetails['values'][i].forteApAssessorialRate = '0';
              this.invoiceDetails['values'][i].forteArAssessorialRate = '0';
              this.invoiceDetails['values'][i].assessorialCharge = '0';
              this.ApAssessorialsArray = [];
              this.ArAssessorialsArray = [];

              this.invoiceDetails['values'][i].ApAssessorialsArray = this.ApAssessorialsArray;
              this.invoiceDetails['values'][i].ArAssessorialsArray = this.ArAssessorialsArray;
              if (this.invoiceDetails['values'][i].selected === true) {
                this.totalForteRateArray.push(this.invoiceDetails['values'][i].totalForteRate);
                // this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
                if (this.invoiceDetails['values'][i].reddawayApData !== 'service not available' && this.invoiceDetails['values'][i].reddawayArData !== 'service not available' && this.invoiceDetails['values'][i].reddawayApData !== undefined && this.invoiceDetails['values'][i].rateResponse.reddawayAp.totalCharge === undefined) {
                  this.totalInvoiceAmountArray.push(this.invoiceDetails['values'][i].invoiceAmount);
  
                }
                this.totalFuelChargeArray.push(this.invoiceDetails['values'][i].fuelCharge);
                this.totalGpChargeArray.push(this.invoiceDetails['values'][i].marginRate);
                this.totalApChargeArray.push(this.invoiceDetails['values'][i].apFinalRate);
                this.totalArChargeArray.push(this.invoiceDetails['values'][i].totalForteApRate);
              }

            }
            if (this.editValue === false && this.editArValue === false) {
              if (this.selectedAnalyticsCodeData !== undefined) {
                if (this.invoiceDetails['values'][i].reddawayRate !== undefined) {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.invoiceDetails['values'][0].reddawayRate.apAmc,
                    arAmc: this.invoiceDetails['values'][0].reddawayRate.arAmc,
                    apDiscount: this.invoiceDetails['values'][0].reddawayRate.apDiscount,
                    arDiscount: this.invoiceDetails['values'][0].reddawayRate.arDiscount
                  });
                  this.initialReddawayApAMC = this.invoiceDetails['values'][i].reddawayRate.apAmc;
                  this.initialReddawayApDiscount = this.invoiceDetails['values'][i].reddawayRate.apDiscount;
                  this.initialReddawayArAMC = this.invoiceDetails['values'][i].reddawayRate.arAmc;
                  this.initailReddawayArDiscount = this.invoiceDetails['values'][i].reddawayRate.arDiscount;
                } else {
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.discountsValue.apAmc,
                    arAmc: this.discountsValue.arAmc,
                    apDiscount: this.discountsValue.apDiscount,
                    arDiscount: this.discountsValue.arDiscount
                  });
                  this.initialReddawayApAMC = this.discountsValue.apAmc;
                  this.initialReddawayApDiscount = this.discountsValue.apDiscount;
                  this.initialReddawayArAMC = this.discountsValue.arAmc;
                  this.initailReddawayArDiscount = this.discountsValue.arDiscount;
                }
              } else {
                console.log(this.reddawayValues);
                if (this.reddawayValues !== undefined) {
                  console.log('savedformvalues', this.reddawayValues);
                  this.workbookForm.patchValue({
                    carrier: this.invoiceDetails['carrier'],
                    apAmc: this.reddawayValues.apAmc,
                    arAmc: this.reddawayValues.arAmc,
                    apDiscount: this.reddawayValues.apDiscount,
                    arDiscount: this.reddawayValues.arDiscount

                  });
                  this.initialReddawayApAMC = this.reddawayValues.apAmc;
                  this.initialReddawayApDiscount = this.reddawayValues.apDiscount;
                  this.initialReddawayArAMC = this.reddawayValues.arAmc;
                  this.initailReddawayArDiscount = this.reddawayValues.arDiscount;
                } else {
                  this.parseSetMasterData.forEach((obj:any) => {
                    this.parseArSetMasterData.forEach((element:any) => {
                      if (obj.companyName === this.invoiceDetails['carrier']) {
                        if (element.companyName === this.invoiceDetails['carrier']) {
                          this.workbookForm.patchValue({
                            carrier: this.invoiceDetails['carrier'],
                            apAmc: obj.amc,
                            arAmc: element.amc,
                            apDiscount: obj.discount,
                            arDiscount: element.discount
                          });
                          this.initialReddawayApAMC = obj.amc;
                          this.initialReddawayApDiscount = obj.discount;
                          this.initialReddawayArAMC = element.amc;
                          this.initailReddawayArDiscount = element.discount;
                        }
                      }
                    });
                  });
                }
              }
            } else if (this.editValue === true || this.editArValue === true) {
              // this.workbookForm.patchValue({
              //   carrier: this.invoiceDetails['carrier'],
              //   apAmc: obj.amc,
              //   arAmc:  element.amc,
              //   apDiscount: obj.discount,
              //   arDiscount: element.discount
              // });
              console.log('changed ar value', this.workbookForm.value);
            }
          }
          // }
          if (this.invoiceDetails['values'][i].typeOfInvoice === 'In Bound') {
            if (this.invoiceDetails['values'][i].totalForteRate === 0 || this.invoiceDetails['values'][i].totalForteRate === '0') {
              this.serviceNotAvailableArray.push(this.invoiceDetails['values'][i]);
            } else {
              this.inboundArray.push(this.invoiceDetails['values'][i]);
            }
            console.log('invoicefor inbound', this.invoiceDetails['values'][i]);
          } else if (this.invoiceDetails['values'][i].typeOfInvoice === 'Out Bound') {
            if (this.invoiceDetails['values'][i].totalForteRate === 0 || this.invoiceDetails['values'][i].totalForteRate === '0') {
              this.serviceNotAvailableArray.push(this.invoiceDetails['values'][i]);
            } else {
              this.outboundArray.push(this.invoiceDetails['values'][i]);
            }
            console.log('invoicefor out bound', this.invoiceDetails['values'][i]);
          } else {
            if (this.invoiceDetails['values'][i].totalForteRate === 0 || this.invoiceDetails['values'][i].totalForteRate === '0') {
              this.serviceNotAvailableArray.push(this.invoiceDetails['values'][i]);
            } else {
              this.thirdPartyArray.push(this.invoiceDetails['values'][i]);

            }
            console.log('invoicefor ithird party bound', this.invoiceDetails['values'][i]);
          }

          // this.workbookForm.patchValue({
          //   carrier: this.invoiceDetails['carrier'],
          //   apAmc: this.discountsValue.apAmc,
          //   arAmc: this.discountsValue.arAmc,
          //   apDiscount: this.discountsValue.apDiscount,
          //   arDiscount: this.discountsValue.arDiscount
          // });
          this.totalRateForForte.push(this.invoiceDetails['values'][i].totalForteRate);
        }
        // if (this.invoiceDetails['values'][0].notes === undefined) {
        //   // let notes = "Carrier:" + this.invoiceDetails['carrier'] + "↵";
        //   let newValueNote = '';
        //   // if (notes.includes('↵')) {
        //   //   newValueNote = notes.replace(/↵/g, '\n');
        //   //   console.log(newValueNote);
        //   // }
        //   this.notesEnter = newValueNote;
        // } else {
        //   // let notes = "Carrier:" + this.invoiceDetails['carrier'] + "↵";
        //   let newValueNote;
        //   // if (notes.includes('↵')) {
        //   //   newValueNote = notes.replace(/↵/g, '\n');
        //   //   console.log(newValueNote);
        //   //   this.notesEnter = newValueNote;
        //   // } else {
        //   //   this.notesEnter = notes;
        //   // }
        //   this.notesEnter = this.notesEnter;

        // }
        console.log(this.notesEnter);
        let currentProgram = this.netChargeArrSum(this.totalInvoiceAmountArray);
        let totalForteRatefromArray = this.netChargeArrSum(this.totalForteRateArray);
        let totalForteRate = this.netChargeArrSum(this.totalRateForForte)
        console.log('let', Number(currentProgram), totalForteRate, totalForteRatefromArray);
        let calculateSavings = Number(currentProgram) - Number(totalForteRatefromArray);
        let calculateSavingPercent = (Number(Number(calculateSavings) / Number(currentProgram)) * 100);
        // let totalForteRateSum = this.netChargeArrSum(this.totalForteRateArray);
        // let totalInvoiceAmountSum = this.netChargeArrSum(this.totalInvoiceAmountArray);
        // let totalFuelSum = this.netChargeArrSum(this.totalFuelChargeArray);
        console.log('current1', Number(calculateSavings)/Number(currentProgram))
       if (isNaN(calculateSavingPercent)) {
        calculateSavingPercent = 0;
       }
        // if (calculateSavingPercent === NAN) {
        //   calculateSavingPercent = 0;
        // }
        console.log('gp', this.totalGpChargeArray)
        console.log('ap', this.totalApChargeArray)
        console.log('ar', this.totalArChargeArray);
        console.log('current', Number(currentProgram), Number(calculateSavings),calculateSavings)

        console.log('calculateSavingPercent',calculateSavingPercent)
        let GPSum = this.netChargeArrSum(this.totalGpChargeArray);
        let ForteapSum = this.netChargeArrSum(this.totalApChargeArray);
        let FortearSum = this.netChargeArrSum(this.totalArChargeArray);
        let gpPer = (GPSum / FortearSum) * 100;
        let percGP;
        if (isNaN(gpPer)) {
          percGP = 0;
         } else {
          percGP = gpPer;
         }
         let imp = ((GPSum / FortearSum) * 100) + ((Number(calculateSavings) / Number(currentProgram)) * 100)
         let impValue;
         if (isNaN(imp)) {
          impValue = 0;
         } else {
          impValue = imp;
         }

        // let gpPercent = ((totalForteRateSum - (totalInvoiceAmountSum + totalFuelSum + 0))/totalForteRateSum * 100);
        console.log(GPSum, FortearSum);
        let gpRate = Number(GPSum) / Number(FortearSum);
        console.log(gpRate);
        this.workbookForm.patchValue({
          currentProgram: (currentProgram).toFixed(2),
          savings: (calculateSavings).toFixed(2),
          savingsPercent: (calculateSavingPercent).toFixed(2),
          gp: (GPSum).toFixed(2),
          gpPercent: (percGP).toFixed(2),
          impact: (impValue).toFixed(2),
        });
        console.log(this.apData,this.arData);
        // this.invoiceDetails['values'] = this.invoiceDetails['values'].reverse();
        console.log(this.invoiceDetails['values']);
        this.loader = false;

      }
    } else {
      this.loader = false;
      this.displayNoInVoice = true;
    }

  }

 

  netChargeArrSum(netCharge:any) {
    console.log(netCharge);
    let total = 0;
    netCharge.forEach(function (key:any) {
      if (key !== undefined) {

        if (key.includes(',')) {
          console.log(key.replace(',', ''));
          key = key.replace(',', '');
          total = total + Number(key);

        } else {
          total = total + Number(key);
        }
      }
    });
    return total;
  }

  navigation(type:any) {
    console.log('type', type);
    (document.getElementById('customerInfo')as HTMLFormElement).className = 'btn btn-primary active'
    if (type == 'customerInfo') {
      (document.getElementById('customerInfo')as HTMLFormElement).className = 'btn btn-primary active';
      (document.getElementById('invoice')as HTMLFormElement).className = 'btn btn-primary ';
      this.router.navigate(['/Customer_Info']);

    } else {
      (document.getElementById('customerInfo')as HTMLFormElement).className = 'btn btn-primary';
      (document.getElementById('invoice')as HTMLFormElement).className = 'btn btn-primary active';
      this.router.navigate(['/Invoice']);
    }
  }

  checkForCarrier(carrier:any) {
    this.invoiceDetails['carrier'] = '';
    console.log('carrier', carrier);
    this.editValue = false;
    this.editArValue = false;
    this.editApAccess = false;
    this.editArAccess = false;
    this.count = 0;
    this.fullLength = this.invoiceDetails['values'].length;
    if (carrier !== '') {
      console.log(carrier);
      // if (this.invoiceDetails !== null) {
      if (carrier === 'FEDEX ECONOMY') {
        this.invoiceDetails['carrier'] = 'FEDEX_FREIGHT_ECONOMY';
        this.invoiceDetails['carrierNew'] = 'FEDEX_FREIGHT_ECONOMY';
        this.enableYrcEdit = false;
        this.count = 0;
      
        
        this.invoiceDetails['values'].forEach(async (element:any, index:any) => {
        //  element.fedexAccessApArray = this.apData;
        //   element.fedexAccessArArray = this.arData;
          if (element.fedexEconomyApData !== undefined || element.rateResponse.fedexEcoAp !== undefined) {
            console.log(element.rateResponse);
            console.log(element);
            element.selected = element.economySelected;
            element.editedDiscounted = element.economyshowEdit;
            if (element.economyCostplusFactor !== null && element.economyCostplusFactor !== undefined) {
              this.costplusFactor = element.economyCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            // element.economySelected = true;
            element.forteCarrier = this.invoiceDetails['carrier'];
            if (element.fedexEcoAccessApArray !==undefined ) {
this.apData = element.fedexEcoAccessApArray;
            } else if (element.fxfeRate !== undefined) {
              this.apData = element.fxfeRate.ecoaparray;

            }else {
              this.parseSetMasterData.forEach((data:any) => {
                console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
                if (data.companyName === "FEDEX ECONOMY") {
                  data.assessorial = JSON.parse(data.assessorials);
                  this.apData = data.assessorial;
                }  
                console.log('Ap Assesss', this.apData)
              })}
              if (element.fedexEcoAccessArArray !==undefined )  {
                this.arData = element.fedexEcoAccessArArray;

              }else if (element.fxfeRate !== undefined) {
                this.arData = element.fxfeRate.ecoararray;
  
              } else {
              this.parseArSetMasterData.forEach((data:any) => {
                console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
                if (data.companyName === "FEDEX ECONOMY") {
                  data.assessorial = JSON.parse(data.assessorials);
                  this.arData = data.assessorial;
                }
                console.log('Ap Assesss', this.apData)
              });
              element.fedexEcoAccessApArray = this.apData;
              element.fedexEcoAccessArArray = this.arData;
            }
            element.fedexEcoAccessApArray = this.apData;
            element.fedexEcoAccessArArray = this.arData;
            if (index === this.invoiceDetails['values'].length - 1) {
              
              this.tableVables();
            }
          } else {
            this.parseSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
                  if (data.companyName === "FEDEX ECONOMY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.apData = data.assessorial;
                  }  
                  console.log('Ap Assesss', this.apData)
                })
                this.parseArSetMasterData.forEach((data:any) => {
                  console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
                  if (data.companyName === "FEDEX ECONOMY") {
                    data.assessorial = JSON.parse(data.assessorials);
                    this.arData = data.assessorial;
                  }
                  console.log('Ap Assesss', this.apData)
                });
                element.fedexEcoAccessApArray = this.apData;
                element.fedexEcoAccessArArray = this.arData;

            console.log(element.rateResponse);
            this.newValues = [];
            // this.loader = true;
            this.processingLoader = true;
            // this.spinner.show();
            this.loader = true;

            element.forteCarrier = this.invoiceDetails['carrier'];
            let userObject = {};
            userObject = {
              shipmentDate: element.shipmentDate,
              carrier: element.customerCarrier,
              typeOfInvoice: element.typeOfInvoice,
              forteCarrier: this.invoiceDetails['carrier'],
              originZip: element.originZip,
              originCity: element.originCity,
              originState: element.originState,
              destinationZip: element.destinationZip,
              destinationCity: element.destinationCity,
              destinationState: element.destinationState,
              pallets: element.pallets,
              class: element.class,
              weight: element.weight,
              classWeight : element.classWeight,

              fuelCharge: element.fuelCharge,
              invoiceAmount: element.invoiceAmount,
              assessorial: element.assessorial,
              companyId: this.companyInformation.id,
              salesRepId: this.companyInformation.idSalesRep,
              companyName: this.companyInformation.companyName,
              pieces: element.pallets,
              assessorialCharge: element.assessorialCharge,
              createdVia: 'Application',
              id: 0
            };
            console.log(userObject)
            await this.callCarrier(userObject, element, index);
          }
        });
      } else if (carrier === 'FEDEX PRIORITY') {
        this.invoiceDetails['carrier'] = 'FEDEX_FREIGHT_PRIORITY';
        this.invoiceDetails['carrierNew'] = 'FEDEX_FREIGHT_PRIORITY';
        this.enableYrcEdit = false;
        this.count = 0;
        // if (this.fedexPriorityValues === undefined) {
        //   this.parseSetMasterData.forEach((data:any) => {
        //     console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
        //     if (data.companyName === "FEDEX PRIORITY") {
        //       data.assessorial = JSON.parse(data.assessorials);
        //       this.apData = data.assessorial;
        //     }  
        //     console.log('Ap Assesss', this.apData)
        //   })
        //   this.parseArSetMasterData.forEach((data:any) => {
        //     console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
        //     if (data.companyName === "FEDEX PRIORITY") {
        //       data.assessorial = JSON.parse(data.assessorials);
        //       this.arData = data.assessorial;
        //     }
        //     console.log('Ap Assesss', this.apData)
        //   })
        // } else {
        //   this.parseSetMasterData.forEach((data:any) => {
        //     console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
        //     if (data.companyName === "FEDEX PRIORITY") {
        //       data.assessorial = JSON.parse(data.assessorials);
        //       this.apData = data.assessorial;
        //     }
        //     console.log('Ap Assesss', this.apData)
        //   })
        //   this.parseArSetMasterData.forEach((data:any) => {
        //     console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
        //     if (data.companyName === "FEDEX PRIORITY") {
        //       data.assessorial = JSON.parse(data.assessorials);
        //       this.arData = data.assessorial;
        //     }
        //     console.log('Ap Assesss', this.apData)
        //   })

        //   this.apData.forEach((acc:any) => {
        //     if(acc.name === this.fedexPriorityValues.apAssessorialName) {
        //       acc.cost = this.fedexPriorityValues.apCost;
        //       acc.min = this.fedexPriorityValues.apMin;
        //       acc.max = this.fedexPriorityValues.apMax;
        //     }
        //   })
        // }
        this.invoiceDetails['values'].forEach(async (element:any, index:any) => {
          if (element.fedexPriorityApData !== undefined || element.rateResponse.fedexPriAp) {
            console.log(element.rateResponse); 
            element.forteCarrier = this.invoiceDetails['carrier'];
            element.selected = element.prioritySelected;
            element.editedDiscounted = element.priorityshowEdit;
            if (element.priorityCostplusFactor !== null && element.priorityCostplusFactor !== undefined) {
              this.costplusFactor = element.priorityCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            // element.prioritySelected = true;
            if (element.fedexPriAccessApArray !==undefined) {
              this.apData = element.fedexPriAccessApArray;
                          } else if (element.fxfpRate !== undefined) {
                            this.apData = element.fxfpRate.priaparray;
              
                          } else {
                            this.parseSetMasterData.forEach((data:any) => {
                              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
                              if (data.companyName === "FEDEX PRIORITY") {
                                data.assessorial = JSON.parse(data.assessorials);
                                this.apData = data.assessorial;
                              }  
                              console.log('Ap Assesss', this.apData)
                            })}
                            if (element.fedexPriAccessArArray !==undefined && element.fedexPriAccessArArray.length >0)  {
                              this.arData = element.fedexPriAccessArArray;
              
                            } else if (element.fxfpRate !== undefined) {
                              this.arData = element.fxfpRate.priararray;
                
                            } else {
                            this.parseArSetMasterData.forEach((data:any) => {
                              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
                              if (data.companyName === "FEDEX PRIORITY") {
                                data.assessorial = JSON.parse(data.assessorials);
                                this.arData = data.assessorial;
                              }
                              console.log('Ap Assesss', this.apData)
                            });
                            // element.fedexPriAccessApArray = this.apData;
                            // element.fedexPriAccessArArray = this.arData;
                          }
                          element.fedexPriAccessApArray = this.apData;
                          element.fedexPriAccessArArray = this.arData;
            if (index === this.invoiceDetails['values'].length - 1) {
              this.tableVables();
            }
          } else {
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === "FEDEX PRIORITY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }  
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === "FEDEX PRIORITY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            });
            element.fedexPriAccessApArray = this.apData;
            element.fedexPriAccessArArray = this.arData;
            console.log(element.rateResponse);
            this.newValues = [];
            // this.loader = true;
            this.processingLoader = true;
            // this.spinner.show();
            this.loader = true;
            element.forteCarrier = this.invoiceDetails['carrier'];
            let userObject = {};
            userObject = {
              shipmentDate: element.shipmentDate,
              carrier: element.customerCarrier,
              typeOfInvoice: element.typeOfInvoice,
              forteCarrier: this.invoiceDetails['carrier'],
              originZip: element.originZip,
              originCity: element.originCity,
              originState: element.originState,
              destinationZip: element.destinationZip,
              destinationCity: element.destinationCity,
              destinationState: element.destinationState,
              classWeight : element.classWeight,
              pallets: element.pallets,
              class: element.class,
              weight: element.weight,
              fuelCharge: element.fuelCharge,
              invoiceAmount: element.invoiceAmount,
              assessorial: element.assessorial,
              companyId: this.companyInformation.id,
              salesRepId: this.companyInformation.idSalesRep,
              companyName: this.companyInformation.companyName,
              pieces: element.pallets,
              assessorialCharge: element.assessorialCharge,
              createdVia: 'Application',
              id: 0
            }
            console.log(userObject);
            await this.callCarrier(userObject, element, index);

          }
        });
      } else if (carrier === 'YRC') {
        this.invoiceDetails['carrier'] = carrier;
        this.invoiceDetails['carrierNew'] = carrier;
        this.count = 0;

        this.invoiceDetails['values'].forEach(async (element:any, index:any) => {
          console.log('test', element);
          if (element.yrcApData !== undefined || element.rateResponse.yrcAp !== undefined) {
            console.log(element.rateResponse);
            element.forteCarrier = this.invoiceDetails['carrier'];
            element.selected = element.yrcSelected;
            element.editedDiscounted = element.yrcshowEdit;
            if (element.yrcCostplusFactor !== null && element.yrcCostplusFactor !== undefined) {
              this.costplusFactor = element.yrcCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            // element.yrcSelected = true;
            console.log(element.yrcAccessApArray);
            console.log(element.yrcRate);
            if (element.yrcAccessApArray !== undefined) {
              this.apData = element.yrcAccessApArray;
            } else if (element.yrcRate !== undefined) {
              console.log(element.yrcRate);

              this.apData = element.yrcRate.yrcaparray;

            } else {
              this.parseSetMasterData.forEach((data:any) => {
                console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
                if (data.companyName === "YRC") {
                  data.assessorial = JSON.parse(data.assessorials);
                  this.apData = data.assessorial;
                }
                console.log('Ap Assesss', this.apData)
              })
            }
                            if (element.yrcAccessArArray !== undefined )  {
                              this.arData = element.yrcararray;
              
                            } else if (element.yrcRate !== undefined) {
                              console.log(element.yrcAceesArArray);
                              this.arData = element.yrcRate.yrcararray;
  
                            } else {
                            this.parseArSetMasterData.forEach((data:any) => {
                              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
                              if (data.companyName === "YRC") {
                                data.assessorial = JSON.parse(data.assessorials);
                                this.arData = data.assessorial;
                              }
                              console.log('Ap Assesss', this.apData)
                            });
                            // element.yrcAccessApArray = this.apData;
                            // element.yrcAccessArArray = this.arData;
                          }
                          element.yrcAccessApArray = this.apData;
                          element.yrcAccessArArray = this.arData;
                          console.log('ApAssesss', this.apData)
                          console.log('ArAssesss', this.arData)

            if (index === this.invoiceDetails['values'].length - 1) {
              this.tableVables();
            }
          } else {
  
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === "YRC") {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }  
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === "YRC") {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            });
            element.yrcAccessApArray = this.apData;
            element.yrcAccessArArray = this.arData;
            console.log(element.rateResponse);
            this.newValues = [];
            // this.loader = true;
            this.processingLoader = true;
            // this.spinner.show();
            this.loader = true;
            console.log('elementjef',element)
      let shipmentDate = this.datePipe.transform(element.shipmentDate,"yyyy-MM-dd");
            element.forteCarrier = this.invoiceDetails['carrier'];
            let userObject = {};
            userObject = {
              shipmentDate: shipmentDate ,
              carrier: element.customerCarrier,
              typeOfInvoice: element.typeOfInvoice,
              forteCarrier: this.invoiceDetails['carrier'],
              originZip: element.originZip,
              originCity: element.originCity,
              originState: element.originState,
              destinationZip: element.destinationZip,
              destinationCity: element.destinationCity,
              destinationState: element.destinationState,
              pallets: element.pallets,
              class: element.class,
              weight: element.weight,
              classWeight : element.classWeight,

              fuelCharge: element.fuelCharge,
              invoiceAmount: element.invoiceAmount,
              assessorial: element.assessorial,
              companyId: this.companyInformation.id,
              salesRepId: this.companyInformation.idSalesRep,
              companyName: this.companyInformation.companyName,
              pieces: element.pallets,
              assessorialCharge: element.assessorialCharge,
              createdVia: 'Application',
              id: 0
            }
            console.log(userObject)
            await this.callCarrier(userObject, element, index);

          }
        });
      } else if (carrier === 'REDDAWAY') {
        this.invoiceDetails['carrier'] = carrier;
        this.invoiceDetails['carrierNew'] = carrier;
        this.count = 0;
        this.invoiceDetails['values'].forEach(async (element:any, index:any) => {
          if (element.reddawayApData !== undefined || element.rateResponse.reddawayAp !== undefined) {
            console.log(element.rateResponse);
            element.forteCarrier = this.invoiceDetails['carrier'];
            element.selected = element.reddawaySelected;
            element.editedDiscounted = element.reddawayshowEdit;
if (element.reddawayCostplusFactor !== null && element.reddawayCostplusFactor !== undefined) {
  this.costplusFactor = element.reddawayCostplusFactor;
  this.costplusToggle = true;
} else {
  this.costplusFactor = '';
  this.costplusToggle = false;
}
            if (element.reddawayAccessApArray !==undefined && element.reddawayAccessApArray.length >0) {
              this.apData = element.reddawayAccessApArray;
                          } else {
                            this.parseSetMasterData.forEach((data:any) => {
                              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
                              if (data.companyName === "REDDAWAY") {
                                data.assessorial = JSON.parse(data.assessorials);
                                this.apData = data.assessorial;
                              }  
                              console.log('Ap Assesss', this.apData)
                            })}
                            if (element.reddawayAccessArArray !==undefined && element.reddawayAccessArArray.length >0)  {
                              this.arData = element.reddawayAccessArArray;
              
                            } else {
                            this.parseArSetMasterData.forEach((data:any) => {
                              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
                              if (data.companyName === "REDDAWAY") {
                                data.assessorial = JSON.parse(data.assessorials);
                                this.arData = data.assessorial;
                              }
                              console.log('Ap Assesss', this.apData)
                            });
                            element.reddawayAccessApArray = this.apData;
                            element.reddawayAccessArArray = this.arData;
                          }
                          element.reddawayAccessApArray = this.apData;
                            element.reddawayAccessArArray = this.arData;
            // element.reddawaySelected = true;
            if (index === this.invoiceDetails['values'].length - 1) {
              this.tableVables();
            }
          } else {
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === "REDDAWAY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }  
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === "REDDAWAY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            });
            element.reddawayAccessApArray = this.apData;
            element.reddawayAccessArArray = this.arData;
            console.log(element.rateResponse);
            this.newValues = [];
            // this.loader = true;
            this.processingLoader = true;
            // this.spinner.show();
            this.loader = true;

            element.forteCarrier = this.invoiceDetails['carrier'];
            let userObject = {};
            userObject = {
              shipmentDate: element.shipmentDate,
              carrier: element.customerCarrier,
              typeOfInvoice: element.typeOfInvoice,
              forteCarrier: this.invoiceDetails['carrier'],
              originZip: element.originZip,
              originCity: element.originCity,
              originState: element.originState,
              destinationZip: element.destinationZip,
              destinationCity: element.destinationCity,
              destinationState: element.destinationState,
              pallets: element.pallets,
              class: element.class,
              weight: element.weight,
              classWeight : element.classWeight,

              fuelCharge: element.fuelCharge,
              invoiceAmount: element.invoiceAmount,
              assessorial: element.assessorial,
              companyId: this.companyInformation.id,
              salesRepId: this.companyInformation.idSalesRep,
              companyName: this.companyInformation.companyName,
              pieces: element.pallets,
              assessorialCharge: element.assessorialCharge,
              createdVia: 'Application',
              id: 0
            }
            console.log(userObject)
            await this.callCarrier(userObject, element, index);

          }
        });
      }
    }
  }

  callCarrier(userObject:any, element:any, index:any) {
    return new Promise((resolve, reject) => {
      this.invoiceService.saveUploadedInvoiceNew(userObject).subscribe((res: any) => {
        console.log('second', res);

        this.fullLength = this.invoiceDetails['values'].length;
        if (res.result != 'Validation Error' && res.result != 'Invoice Data Empty' && res.result != 'Invalid Class' && res.result != 'false') {
          if (element.forteCarrier === 'FEDEX_FREIGHT_ECONOMY') {
            let stringifiedObject = JSON.parse(res.result.rateResponse);
            element.rateResponse.fedexEcoAp = stringifiedObject.fedexEcoAp;
            element.rateResponse.fedexEcoAr = stringifiedObject.fedexEcoAr;
            element.rateResponse = JSON.stringify(element.rateResponse);
            element.economyRules = res.result.rules;
            element.class = null;
            element.weight = null;
            console.log(element);
            if (element.economyCostplusFactor !== null && element.economyCostplusFactor !== undefined) {
              this.costplusFactor = element.economyCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            // let notes = "Carrier:" + this.invoiceDetails['carrier'] + "↵";
            // let newValueNote;
            // if (notes.includes('↵')) {
            //   newValueNote = notes.replace(/↵/g, '\n');
            //   console.log(newValueNote);
            // }
            // this.notesEnter = newValueNote;
            // element.notes = newValueNote;

            this.invoiceService.updateInvoiceInfo(element).subscribe((response: any) => {
              console.log(response);
              this.count = this.count + 1;
              this.responseLength = this.count;
              console.log('count', this.count);
              console.log('startcout', this.count);
              if (this.count === this.invoiceDetails['values'].length) {
                this.processingLoader = false;
                this.spinner.hide();
                this.loader = false;


                console.log('newValues', this.invoiceDetails['values']);
                // this.invoiceDetails['value`s'] = this.newValues;
                for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
                  console.log('start');
                  this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
                  console.log(this.invoiceDetails['values'][i].rateResponse);
                  let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
                  this.invoiceDetails['values'][i].shipmentDate = newDate;
                  this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
                  this.invoiceDetails['values'][i].selected = true;
                  this.invoiceDetails['values'][i].economySelected = true;
                  this.invoiceDetails['values'][i].editedDiscounted = false;
                  this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
                }
                this.tableVables();
              }
            });
                  this.parseSetMasterData.forEach((data:any) => {
        console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
        if (data.companyName === "FEDEX ECONOMY") {
          data.assessorial = JSON.parse(data.assessorials);
          this.apData = data.assessorial;
        }
        console.log('Ap Assesss', this.apData)
      })
      this.parseArSetMasterData.forEach((data:any) => {
        console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
        if (data.companyName === "FEDEX ECONOMY") {
          data.assessorial = JSON.parse(data.assessorials);
          this.arData = data.assessorial;
        }
        console.log('Ap Assesss', this.apData)
      })
      element.fedexEcoAccessApArray = this.apData;
      element.fedexEcoAccessArArray = this.arData;

            // this.updatedDataInvoice(element);

          } else if (element.forteCarrier === 'FEDEX_FREIGHT_PRIORITY') {
            let stringifiedObject = JSON.parse(res.result.rateResponse);
            element.rateResponse.fedexPriAp = stringifiedObject.fedexPriAp;
            element.rateResponse.fedexPriAr = stringifiedObject.fedexPriAr;
            element.rateResponse = JSON.stringify(element.rateResponse);
            element.priorityRules = res.result.rules;
            element.class = null;
            element.weight = null;
            console.log(element);
            if (element.priorityCostplusFactor !== null && element.priorityCostplusFactor !== undefined) {
              this.costplusFactor = element.priorityCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            this.invoiceService.updateInvoiceInfo(element).subscribe((response: any) => {
              console.log(response);
              this.count = this.count + 1;
              this.responseLength = this.count;
              if (this.count === this.invoiceDetails['values'].length) {
                this.processingLoader = false;
                this.spinner.hide();
                this.loader = false;

                console.log('newValues', this.invoiceDetails['values']);
                // this.invoiceDetails['values'] = this.newValues;
                for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
                  console.log('start');
                  this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
                  console.log(this.invoiceDetails['values'][i].rateResponse);
                  let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
                  this.invoiceDetails['values'][i].shipmentDate = newDate;
                  this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
                  this.invoiceDetails['values'][i].selected = true;
                  this.invoiceDetails['values'][i].prioritySelected = true;
                  this.invoiceDetails['values'][i].editedDiscounted = false;
                  this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
                }
                this.tableVables();
              }
            });
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === "FEDEX PRIORITY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === "FEDEX PRIORITY") {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            });
            element.fedexPriAccessApArray = this.apData;
            element.fedexPriAccessArArray = this.arData;

          } else if (element.forteCarrier === 'YRC') {
            let stringifiedObject = JSON.parse(res.result.rateResponse);
           
            element.rateResponse.yrcAp = stringifiedObject.yrcAp;
            element.rateResponse.yrcAr = stringifiedObject.yrcAr;
            element.rateResponse = JSON.stringify(element.rateResponse);
            element.yrcRules = res.result.rules;
            element.class = null;
            element.weight = null;
            console.log(element);
            if (element.yrcCostplusFactor !== null && element.yrcCostplusFactor !== undefined) {
              this.costplusFactor = element.yrcCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            this.invoiceService.updateInvoiceInfo(element).subscribe((response: any) => {
              console.log(response);
              this.count = this.count + 1;
              this.responseLength = this.count;
              console.log(this.count)
              if (this.count === this.invoiceDetails['values'].length) {
                this.processingLoader = false;
                this.spinner.hide();
                this.loader = false;

                console.log('newValues', this.invoiceDetails['values']);
                // this.invoiceDetails['values'] = this.newValues;
                for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
                  console.log('start');
                  
                  this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
                  console.log(this.invoiceDetails['values'][i].rateResponse);
                  let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
                  this.invoiceDetails['values'][i].shipmentDate = newDate;
                  this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
                  this.invoiceDetails['values'][i].selected = true;
                  this.invoiceDetails['values'][i].yrcSelected = true;
                  this.invoiceDetails['values'][i].editedDiscounted = false;

                  this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
                }
                this.tableVables();
              }
            });
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === element.forteCarrier) {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === element.forteCarrier) {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            })
            element.yrcAcessApArray = this.apData;
            element.yrcAccessArArray = this.arData;

          } else if (element.forteCarrier === 'REDDAWAY') {
            let stringifiedObject = JSON.parse(res.result.rateResponse);
            element.rateResponse.reddawayAp = stringifiedObject.reddawayAp;
            element.rateResponse.reddawayAr = stringifiedObject.reddawayAr;
            element.rateResponse = JSON.stringify(element.rateResponse);
            element.reddawayRules = res.result.rules;
            element.class = null;
            element.weight = null;
            console.log(element);
            if (element.reddawayCostplusFactor !== null && element.reddawayCostplusFactor !== undefined) {
              this.costplusFactor = element.reddawayCostplusFactor;
              this.costplusToggle = true;
            } else {
              this.costplusFactor = '';
              this.costplusToggle = false;
            }
            this.invoiceService.updateInvoiceInfo(element).subscribe((response: any) => {
              console.log(response);
              this.count = this.count + 1;
              this.responseLength = this.count;
              if (this.count === this.invoiceDetails['values'].length) {
                this.processingLoader = false;
                this.spinner.hide();
                this.loader = false;

                console.log('newValues', this.invoiceDetails['values']);
                // this.invoiceDetails['values'] = this.newValues;
                for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
                  console.log('start');
                  this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
                  console.log(this.invoiceDetails['values'][i].rateResponse);
                  let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
                  this.invoiceDetails['values'][i].shipmentDate = newDate;
                  this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
                  this.invoiceDetails['values'][i].selected = true;
                  this.invoiceDetails['values'][i].reddawaySelected = true;
                  this.invoiceDetails['values'][i].editedDiscounted = false;

                  this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
                }
                this.tableVables();
              }
            });
            this.parseSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
              if (data.companyName === element.forteCarrier) {
                data.assessorial = JSON.parse(data.assessorials);
                this.apData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            })
            this.parseArSetMasterData.forEach((data:any) => {
              console.log(this.invoiceDetails['carrier'], 'this.parseArSetMasterData.forEach((data:any)', data);
              if (data.companyName === element.forteCarrier) {
                data.assessorial = JSON.parse(data.assessorials);
                this.arData = data.assessorial;
              }
              console.log('Ap Assesss', this.apData)
            })
            element.reddawayAcessApArray = this.apData;
            element.reddawayAcessArArray = this.arData;

          }

        } 
        // else {
        //   this.count = this.count + 1;
        //   this.invoiceDetails['values'].splice(index,1);
        // }
        // if             (res !== undefined) {
        // console.log('startcout', this.count);
        // if (this.count === this.invoiceDetails['values'].length) {
        //   this.processingLoader = false;
        //   this.spinner.hide();

        //   console.log('newValues', this.invoiceDetails['values']);
        //   // this.invoiceDetails['values'] = this.newValues;
        //   for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        //     console.log('start');
        //     // this.invoiceDetails['values'][i].rateResponse = JSON.parse(this.invoiceDetails['values'][i].rateResponse);
        //     console.log(this.invoiceDetails['values'][i].rateResponse);
        //     let newDate = moment(this.invoiceDetails['values'][i].shipmentDate).format('MM/DD/YY');
        //     this.invoiceDetails['values'][i].shipmentDate = newDate;
        //     this.invoiceDetails['values'][i].retrievedTableDataFlag = true;
        //     // this.invoiceDetails['values'][i].selected = true;
        //     this.invoiceDetails['values'][i].createdOn = this.getValidTimeZone(this.invoiceDetails['values'][i].createdOn);
        //   }
        //   this.tableVables();
        // }
        // }
        resolve(true);
      });
    });
  }

  isJSON(value:any) {
    console.log(value);
    try {
      return JSON.parse(value);
    } catch (e) {
      return value;
    }
  }
  updatedDataInvoice(element:any) {
    console.log(element);
    element.rateResponse = JSON.stringify(element.rateResponse);
    console.log(element);

    this.invoiceService.updateInvoiceInfo(element).subscribe((response: any) => {
      console.log(response);
    });
  }

  getRules() {
    let pushArray = [];
    let apicarrier;
    this.rulesForBusiness = []
    this.customerService.getAllCompanyDataByIdWorkbook(this.accessToken, this.companyInformation.id).subscribe(data => {
      this.companyResponse = data;
      console.log('this.companyResponse', this.companyResponse);
      if (this.companyResponse.length > 0) {
        this.companyResponse[0].BusinessRulesNew.forEach((element:any) => {
          element.customerId = this.companyInformation.id;
          // element.specificStateList1 = JSON.parse(element.specificStateList1);
          // element.specificStateList2 = JSON.parse(element.specificStateList2);
          //  element.specificCityList1 = JSON.parse(element.specificCityList1);
          //  element.specificCityList2 = JSON.parse(element.specificCityList2);
          //  element.fakValue = element.fak;
          //  element.stateFrom = element.specificStateList1;
          //  element.stateTo = element.specificStateList2;
          //  element.cityFrom = element.specificCityList1;
          //  element.cityTo = element.specificCityList2;



        });
        console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
        if (this.temporaryArray.length > 0) {
          // if (this.companyRulesArray.length > 0) {
          // this.companyRulesArray = this.temporaryArray.concat(this.companyResponse[0].BusinessRulesNew);
          this.companyRulesArray = this.companyResponse[0].BusinessRulesNew;

          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            ele.sameRule = false;
            ele.ruleExist = true;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          this.temporaryArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            // ele.sameRule = false;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          // }

        } else {
          this.companyRulesArray = this.companyResponse[0].BusinessRulesNew;
          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            ele.sameRule = false;
            ele.ruleExist = true;
            ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            ele.specificCityList2 = JSON.parse(ele.specificCityList2);
          })
        }
        console.log('companyrulesArray', this.companyRulesArray);
        // this.companyRulesArray.forEach((el, index) => {
        //   el.tempId = index + 1;
        // })
        this.temporaryArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        })
        this.filterArrayValues(this.companyRulesArray);
        // this.filterArrayValues(this.temporaryArray);



      } else {
        console.log(this.companyInformation)
        this.filteredRulesArray = [];
      }
    });
  }

  getRules1() {
    let pushArray = [];
    let apicarrier;
    this.rulesForBusiness = []
    if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
      apicarrier = 'FEDEX ECONOMY';
    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
      apicarrier = 'FEDEX PRIORITY';
    } else {
      apicarrier = this.invoiceDetails['carrier'];
    }
    this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, apicarrier).subscribe(data => {
      this.companyResponse = data;
      console.log('this.companyResponse', this.companyResponse);
      if (this.companyResponse.length > 0) {
        this.companyResponse.forEach((element:any) => {
          element.customerId = this.companyInformation.id;
          // element.specificStateList1 = JSON.parse(element.specificStateList1);
          // element.specificStateList2 = JSON.parse(element.specificStateList2);
          //  element.specificCityList1 = JSON.parse(element.specificCityList1);
          //  element.specificCityList2 = JSON.parse(element.specificCityList2);
          //  element.fakValue = element.fak;
          //  element.stateFrom = element.specificStateList1;
          //  element.stateTo = element.specificStateList2;
          //  element.cityFrom = element.specificCityList1;
          //  element.cityTo = element.specificCityList2;



        });
        console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
        if (this.temporaryArray.length > 0) {
          // if (this.companyRulesArray.length > 0) {
          // this.companyRulesArray = this.temporaryArray.concat(this.companyResponse[0].BusinessRulesNew);
          this.companyRulesArray = this.companyResponse;

          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            // ele.sameRule = false;
            // ele.ruleExist = true;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          this.temporaryArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            // ele.sameRule = false;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          // }

        } else {
          this.companyRulesArray = this.companyResponse;
          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            // ele.sameRule = false;
            // ele.ruleExist = true;
            ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            ele.specificCityList2 = JSON.parse(ele.specificCityList2);
          })
        }
        console.log('companyrulesArray', this.companyRulesArray);
        // this.companyRulesArray.forEach((el, index) => {
        //   el.tempId = index + 1;
        // })
        this.temporaryArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        })
        this.filterArrayValues(this.companyRulesArray);
        // this.filterArrayValues(this.temporaryArray);



      } else {
        console.log(this.companyInformation)
        this.filteredRulesArray = [];
      }
    });
  }



  addRules() {
    //  this.setCustomerObject();
    // this.router.navigate(['/company']);
    let pushArray:any = [];
    let apicarrier;
    this.rulesForBusiness = []
    this.ruleForm.patchValue({
      carrierType: this.invoiceDetails['carrier']
    });
    if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
      apicarrier = 'FEDEX ECONOMY';
    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
      apicarrier = 'FEDEX PRIORITY';
    } else {
      apicarrier = this.invoiceDetails['carrier'];
    }
    if (this.selectedAnalyticsCodeData === undefined) {
      if (this.companyResponse === undefined) {
        this.getRules();
      } else {
        if (this.temporaryArray.length > 0) {
          // if (this.companyRulesArray.length > 0) {
          // this.companyRulesArray = this.temporaryArray.concat(this.companyResponse[0].BusinessRulesNew);
          this.companyRulesArray = this.companyResponse[0].BusinessRulesNew;

          this.companyRulesArray.forEach((ele:any) => {
            // ele.fakRange = ele.fakRange;
            // ele.fak = ele.fak;
            // ele.fakValue = ele.fak;
            // ele.sameRule = false;
            // ele.ruleExist = true;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          this.temporaryArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            // ele.sameRule = false;
            //  if (ele.specificCityList1))
            console.log(typeof ele.specificCityList1 === 'string');
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = this.isJSON(ele.specificStateList1);
            // ele.specificStateList2 = this.isJSON(ele.specificStateList2);
            // ele.specificCityList2 = this.isJSON(ele.specificCityList2);
          });
          // }

        }

        console.log('companyrulesArray', this.companyRulesArray);
        // this.companyRulesArray.forEach((el, index) => {
        //   el.tempId = index + 1;
        // })
        this.temporaryArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        })
        this.filterArrayValues(this.companyRulesArray);
      }

    } else {
      console.log('weyrfweytrfwet');
      let temporaryArray = [];
      let datadirections, discountData, discountValue;
      this.fxfeApArray = [];
this.fxfeArArray = [];
this.fxfpApArray = [];
this.fxfpArArray = [];
this.yrcApArray = [];
this.yrcArArray = [];
this.reddawayApArray = [];
this.reddawayArArray = [];
this.fedexRowspan = 0;
this.priorityrowspan = 0;
this.yrcrowspan = 0;
this.reddawayrowspan = 0;
// this.getRules1();
if (this.companyResponse === undefined) {
  this.getRules1();

} else {
      // this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, apicarrier).subscribe((elem: any) => {
        let elem= this.companyResponse
        console.log(elem);
        elem.forEach((el:any) => {
          el.toggleEnabled = true
        })
        let datarules;
        let object = {
          companyName: this.companyInformation.companyName,
          BusinessRulesNew: []
        }
        console.log(object)
        pushArray.push(object);
        this.companyResponse = pushArray;
        this.companyRulesArray = elem.filter((e:any) => e.status=== 'Existing');
        temporaryArray = elem.filter((f:any) => f.status === 'Proposed');
        if (temporaryArray.length > 0) {
          this.temporaryArray = this.temporaryArray.concat(temporaryArray);
        }
        console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
        if (this.temporaryArray.length > 0) {
          // this.companyRulesArray = this.temporaryArray.concat(elem);
          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            // ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            // ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            // ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            if (ele.sameRule === undefined) {
              ele.sameRule = true;
            } else {
              ele.sameRule = ele.sameRule;

            }
          });
          this.temporaryArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            if (typeof ele.specificCityList1 === 'string') {
              ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            }
            if (typeof ele.specificCityList2 === 'string') {
              ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            }
            if (typeof ele.specificStateList1 === 'string') {
              ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            }
            if (typeof ele.specificStateList2 === 'string') {
              ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            }
            // ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            // ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            // ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            // ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            if (ele.sameRule === undefined) {
              ele.sameRule = true;
            } else {
              ele.sameRule = ele.sameRule;

            }
          });

        } else {
          // this.companyRulesArray = elem;
          this.companyRulesArray.forEach((ele:any) => {
            ele.fakRange = ele.fakRange;
            ele.fak = ele.fak;
            ele.fakValue = ele.fak;
            ele.specificStateList1 = JSON.parse(ele.specificStateList1);
            ele.specificStateList2 = JSON.parse(ele.specificStateList2);
            ele.specificCityList1 = JSON.parse(ele.specificCityList1);
            ele.specificCityList2 = JSON.parse(ele.specificCityList2);
            if (ele.sameRule === undefined) {
              ele.sameRule = true;
            } else {
              ele.sameRule = ele.sameRule;

            }
          })
        }
        console.log('companyrulesArray', this.companyRulesArray);
        this.companyRulesArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        });
        this.temporaryArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        })
        this.filterArrayValues(this.companyRulesArray);
        // this.filterArrayValues(this.temporaryArray);



        // let object = {
        //   companyName : this.companyInformation.companyName,
        //   BusinessRulesNew: pushArray
        // }
        // let temp = [];
        // temp.push(object);
        // this.companyResponse = temp;
      }
      // this.companyResponse[0].BusinessRulesNew = this.finalArray;
    }
    $('#RuleModal').modal('show');
    
    if (this.invoiceDetails['carrier'] === 'YRC') {
      this.directionsArray = ['INTERSTATE', 'INTRASTATE', 'SPECIAL RULES'];
    } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
      this.directionsArray = ['REGIONAL DIRECT INTRASTATE', 'REGIONAL DIRECT INTERSTATE', 'REGIONAL INDIRECT', 'SPECIAL RULES'];
    } else {
      this.directionsArray = ['REGIONAL', 'INTER REGIONAL', 'INTRASTATE', 'SPECIAL RULES'];
    }
  }

  addRules1() {
    let apicarrier;
    this.ruleForm.patchValue({
      carrierType: this.invoiceDetails['carrier']
    });
    if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
      apicarrier = 'FEDEX ECONOMY';
    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
      apicarrier = 'FEDEX PRIORITY';
    } else {
      apicarrier = this.invoiceDetails['carrier'];
    }
    if (this.selectedAnalyticsCodeData === undefined) {
      if (this.companyResponse === undefined) {
        this.getRules();
      }
      //  else {
      //   if (this.temporaryArray.length > 0) {
      //     this.companyRulesArray.forEach((ele:any) => {
      //       console.log(typeof ele.specificCityList1 === 'string');
      //       if (typeof ele.specificCityList1 === 'string') {
      //         ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      //       }
      //       if (typeof ele.specificCityList2 === 'string') {
      //         ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      //       }
      //       if (typeof ele.specificStateList1 === 'string') {
      //         ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      //       }
      //       if (typeof ele.specificStateList2 === 'string') {
      //         ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      //       }
      //     });
      //     this.temporaryArray.forEach((ele:any) => {
      //       ele.fakRange = ele.fakRange;
      //       ele.fak = ele.fak;
      //       ele.fakValue = ele.fak;
      //       console.log(typeof ele.specificCityList1 === 'string');
      //       if (typeof ele.specificCityList1 === 'string') {
      //         ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      //       }
      //       if (typeof ele.specificCityList2 === 'string') {
      //         ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      //       }
      //       if (typeof ele.specificStateList1 === 'string') {
      //         ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      //       }
      //       if (typeof ele.specificStateList2 === 'string') {
      //         ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      //       }
      //     });
      //   }
      // }
    } else {
//       let datadirections, discountData, discountValue;
//       let temporaryArray = [], pushArray:any = [];
//       this.fxfeApArray = [];
// this.fxfeArArray = [];
// this.fxfpApArray = [];
// this.fxfpArArray = [];
// this.yrcApArray = [];
// this.yrcArArray = [];
// this.reddawayApArray = [];
// this.reddawayArArray = [];
// this.fedexRowspan = 0;
// this.priorityrowspan = 0;
// this.yrcrowspan = 0;
// this.reddawayrowspan = 0;
// // if (this.filteredRulesArray.length === 0) {
//       this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, apicarrier).subscribe((elem: any) => {
//         console.log(elem);
//         elem.forEach((el:any) => {
//           el.toggleEnabled = true
//         })
//         let datarules;
//         let object = {
//           companyName: this.companyInformation.companyName,
//           BusinessRulesNew: []
//         }
//         console.log(object)
//         pushArray.push(object);
//         this.companyResponse = pushArray;
//         this.companyRulesArray = elem.filter((e:any) => e.status=== 'Existing');
//         temporaryArray = elem.filter((f:any) => f.status === 'Proposed');
//         // if (temporaryArray.length > 0) {
//         //   this.temporaryArray = this.temporaryArray.concat(temporaryArray);
//         // }
//         this.temporaryArray = temporaryArray
//       });
    // }
    if (this.companyResponse === undefined) {
      this.getRules1();
    }
  }

  if (this.filteredRulesArray.length > 0) {
    this.filteredRulesArray.forEach((mm:any) => {
      console.log('mm',mm);
      if (mm.toggleEnabled === false) {
        this.companyRulesArray.forEach((nn:any) => {
          console.log('nn',nn)
          if(mm.id === nn.id) {
            nn.toggleEnabled = mm.toggleEnabled;
            nn.ruleExist = mm.ruleExist;
          }
          })
      }
     
    })
  }

    this.companyRulesArray.forEach((ele:any) => {
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      console.log(typeof ele.specificCityList1 === 'string');
      if (typeof ele.specificCityList1 === 'string') {
        ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      }
      if (typeof ele.specificCityList2 === 'string') {
        ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      }
      if (typeof ele.specificStateList1 === 'string') {
        ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      }
      if (typeof ele.specificStateList2 === 'string') {
        ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      }
    });
    this.temporaryArray.forEach((ele:any) => {
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      console.log(typeof ele.specificCityList1 === 'string');
      if (typeof ele.specificCityList1 === 'string') {
        ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      }
      if (typeof ele.specificCityList2 === 'string') {
        ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      }
      if (typeof ele.specificStateList1 === 'string') {
        ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      }
      if (typeof ele.specificStateList2 === 'string') {
        ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      }
    });
    // this.filterArrayValues(this.companyRulesArray);
    // this.filterArrayValues1(this.temporaryArray);

    setTimeout(() => {
      this.filterArrayValues(this.companyRulesArray);
    this.filterArrayValues1(this.temporaryArray);
      $('#RuleModal').modal('show');
    }, 1000);

  }

 


  showCompanyRulesArray() {
    
  }
  setCustomerObject() {
    
  }

  
  saveDataRequest(formValue:any, ApFormValue:any, ArFormValue:any) {
    $('#requestModal').modal('show');
    let date, month, hour, minutes, seconds;
    var today = new Date();
    var sec = today.getSeconds();
    var min = today.getMinutes();
    var hr = today.getHours();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    var yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    this.savinganalyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;

  }

  filterArrayValues(arrayValue:any) {
    let apicarrier:any;
    if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
      apicarrier = 'FEDEX ECONOMY';
    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
      apicarrier = 'FEDEX PRIORITY';
    } else {
      apicarrier = this.invoiceDetails['carrier'];
    }
    this.filteredRulesArray = arrayValue.filter((e:any) => e.type === apicarrier);
    this.filteredLength = this.filteredRulesArray.length + 1;
    console.log(this.enabletempId);
    this.filteredRulesArray.forEach((ele:any) => {
      if (this.enabletempId.length > 0) {
        this.enabletempId.forEach((obj:any) => {
          if (ele.tempId === obj.tempId) {
            ele.toggleEnabled = false;
          }
        })
      } else {
        if (ele.toggleEnabled === undefined) {
          ele.toggleEnabled = true;
        }
      }
    })

    console.log('companyrulesArray', this.filteredRulesArray);
    this.filteredRulesArray.forEach((res:any) => {
      if (res.toggleEnabled === undefined) {
        console.log('123345');
        res.toggleEnabled = true;
      }
    })
  }

  filterArrayValues1(arrayValue:any) {
    let apicarrier:any;
    if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
      apicarrier = 'FEDEX ECONOMY';
    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
      apicarrier = 'FEDEX PRIORITY';
    } else {
      apicarrier = this.invoiceDetails['carrier'];
    }
    this.temporaryArray = arrayValue.filter((e:any) => e.type === apicarrier);
    this.filteredLength = this.temporaryArray.length + 1;
    console.log(this.enabletempId);
    this.temporaryArray.forEach((ele:any) => {
      if (this.enabletempId.length > 0) {
        this.enabletempId.forEach((obj:any) => {
          if (ele.tempId === obj.tempId) {
            ele.toggleEnabled = false;
          }
        })
      } else {
        if (ele.toggleEnabled === undefined) {
          ele.toggleEnabled = true;
        }
      }
    })

    console.log('companyrulesArray', this.temporaryArray);
    this.temporaryArray.forEach((res:any) => {
      if (res.toggleEnabled === undefined) {
        console.log('123345');
        res.toggleEnabled = true;
      }
    })
  }


  saveData(formValue:any, ApFormValue:any, ArFormValue:any) {
    this.invoiceService.setTrafficDataEnable(this.trafficDataEnable);
    let apiArray = [];
    console.log(formValue, ApFormValue, ArFormValue);
    let fxfpAnalyticsCode, yrcAnalyticsCode, fxfeAnalyticsCode, reddawayAnalyticsCode, analyticsCode;
    let date, month, hour, minutes, seconds;
    var today = new Date();
    var sec = today.getSeconds();
    var min = today.getMinutes();
    var hr = today.getHours();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    var yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    // if (formValue.carrier === 'FEDEX PRIORITY') {
    //   analyticsCode = companyName + '_' + 'FXFP' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'FEDEX ECONOMY') {
    //   analyticsCode = companyName + '_' + 'FXFE' + '_' +  yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'YRC') {
    //   analyticsCode = companyName + '_' + 'YRC' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'REDDAWAY') {
    //   analyticsCode = companyName + '_' + 'REDDAWAY' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // }
    analyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;
    // this.savinganalyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;

    this.selectedValues = 0;
    this.updatedValues = 0;
    console.log('this.', this.invoiceDetails['values']);
    if (formValue.carrier === 'YRC') {
      let fedexObject, fedexPriObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let aparr:any = [];
        let ararr:any = [];
        if (this.invoiceDetails['values'][i].yrcAccessApArray !== undefined) {
          aparr = this.invoiceDetails['values'][i].yrcAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr = this.apData;
        }
        if (this.invoiceDetails['values'][i].yrcAccessArArray !== undefined) {
          ararr = this.invoiceDetails['values'][i].yrcAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr = this.arData;
        }
        let aparr1:any = [];
        let ararr1:any = [];
        if (this.invoiceDetails['values'][i].fedexEcoAccessApArray !== undefined) {
          aparr1 = this.invoiceDetails['values'][i].fedexEcoAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr1 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexEcoAccessArArray !== undefined) {
          ararr1 = this.invoiceDetails['values'][i].fedexEcoAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr1 = this.arData;
        }
        let aparr2:any = [];
        let ararr2:any = [];
        if (this.invoiceDetails['values'][i].fedexPriAccessApArray !== undefined) {
          aparr2 = this.invoiceDetails['values'][i].fedexPriAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr2 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexPriAccessArArray !== undefined) {
          ararr2 = this.invoiceDetails['values'][i].fedexPriAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr2 = this.arData;
        }
        let aparr3:any = [];
        let ararr3:any = [];
        if (this.invoiceDetails['values'][i].reddawayAccessApArray !== undefined) {
          aparr3 = this.invoiceDetails['values'][i].reddawayAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr3 = this.apData;
        }
        if (this.invoiceDetails['values'][i].reddawayAccessArArray !== undefined) {
          ararr3 = this.invoiceDetails['values'][i].reddawayAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr3 = this.arData;
        }
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.editApAccess,
          arAccess: this.editArAccess,
          yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
            yrcararray: ararr,
            ecoaparray: aparr1,
            ecoararray: ararr1,
            priaparray: aparr2,
            priararray: ararr2,
            redaparray: aparr3,
            redararray: ararr3,
            ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
                    yrcararray: ararr,
                    ecoaparray: aparr1,
                    ecoararray: ararr1,
                    priaparray: aparr2,
                    priararray: ararr2,
                    redaparray: aparr3,
                    redararray: ararr3,
                    ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
            yrcararray: ararr,
            ecoaparray: aparr1,
            ecoararray: ararr1,
            priaparray: aparr2,
            priararray: ararr2,
            redaparray: aparr3,
            redararray: ararr3,
            priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
                    yrcararray: ararr,
                    ecoaparray: aparr1,
                    ecoararray: ararr1,
                    priaparray: aparr2,
                    priararray: ararr2,
                    redaparray: aparr3,
                    redararray: ararr3,
                    priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

                  }
                }
              }
            })
          })
        }
        console.log(this.reddawayValues)

        if (this.reddawayValues !== undefined) {
          console.log(this.reddawayValues)
          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
          arAccess: this.editArAccess,
            yrcaparray: aparr,
            yrcararray: ararr,
            ecoaparray: aparr1,
            ecoararray: ararr1,
            priaparray: aparr2,
            priararray: ararr2,
            redaparray: aparr3,
            redararray: ararr3,
            redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

          }
        } else {
          console.log(this.reddawayValues)

          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                console.log('2', obj)
                console.log('3', element)

                if (element.companyName === 'REDDAWAY') {
                  console.log('4', element)

                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
          arAccess: this.editArAccess,
                    yrcaparray: aparr,
                    yrcararray: ararr,
                    ecoaparray: aparr1,
                    ecoararray: ararr1,
                    priaparray: aparr2,
                    priararray: ararr2,
                    redaparray: aparr3,
                    redararray: ararr3,
                    redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

                  }
                }
              }
            })
          })

        }
        console.log(reddawayObject);
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        console.log('savedata', this.invoiceDetails['values'][i]);
        let tempObject = {
          yrcRate: userObject,
          fxfeRate: fedexObject,
          fxfpRate: fedexPriObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected,
          yrcshowEdit : this.invoiceDetails['values'][i].yrcshowEdit,
          economyshowEdit : this.invoiceDetails['values'][i].economyshowEdit,
          priorityshowEdit : this.invoiceDetails['values'][i].priorityshowEdit,
          reddawayshowEdit : this.invoiceDetails['values'][i].reddawayshowEdit          
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'FEDEX_FREIGHT_ECONOMY' || formValue.carrier === 'FEDEX ECONOMY') {

      // apiArray = [];
      // for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
      //   let userObject = {
      //     apDiscount: formValue.apDiscount,
      //     apAmc: formValue.apAmc,
      //     arDiscount: formValue.arDiscount,
      //     arAmc: formValue.arAmc,
      //     apAssessorialName: ApFormValue.accessorials,
      //     apCost: ApFormValue.cost,
      //     apMin: ApFormValue.min,
      //     apMax: ApFormValue.max,
      //     arAssessorialName: ArFormValue.accessorials,
      //     arCost: ArFormValue.cost,
      //     arMin: ArFormValue.min,
      //     arMax: ArFormValue.max,
      //     apAccess: this.apEditValue,
      //     arAccess: this.arAccessEditValue
      //   }
      //   let allRules = <any>{}
      //   const yrc = this.invoiceDetails['values'][i].yrcRules;
      //   const ecoRules = this.invoiceDetails['values'][i].economyRules;
      //   const priRules = this.invoiceDetails['values'][i].priorityRules;
      //   const redRules = this.invoiceDetails['values'][i].reddawayRules;
      //   if(yrc !== undefined) {
      //     allRules['yrcRules'] = yrc;
      //   }
      //   if(ecoRules !== undefined) {
      //     allRules['economyRules'] = ecoRules;
      //   }
      //   if (priRules !==undefined) {
      //     allRules['priorityRules'] = priRules;
      //   }
      //   if (redRules !==undefined) {
      //     allRules['reddawayRules'] = redRules;
      //   }
      //   let newObject = {
      //     invoiceId: this.invoiceDetails['values'][i].id,
      //     carrier: this.invoiceDetails['values'][i].forteCarrier,
      //     forteResponse: JSON.stringify(userObject),
      //     selected: this.invoiceDetails['values'][i].selected,
      //     rules: JSON.stringify(allRules)

      //   }
      //   apiArray.push(newObject);

      // }
      let yrcObject, fedexPriObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let aparr:any = [];
        let ararr:any = [];
        if (this.invoiceDetails['values'][i].yrcAccessApArray !== undefined) {
          aparr = this.invoiceDetails['values'][i].yrcAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr = this.apData;
        }
        if (this.invoiceDetails['values'][i].yrcAccessArArray !== undefined) {
          ararr = this.invoiceDetails['values'][i].yrcAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr = this.arData;
        }
        let aparr1:any = [];
        let ararr1:any = [];
        if (this.invoiceDetails['values'][i].fedexEcoAccessApArray !== undefined) {
          aparr1 = this.invoiceDetails['values'][i].fedexEcoAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr1 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexEcoAccessArArray !== undefined) {
          ararr1 = this.invoiceDetails['values'][i].fedexEcoAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr1 = this.arData;
        }
        let aparr2:any = [];
        let ararr2:any = [];
        if (this.invoiceDetails['values'][i].fedexPriAccessApArray !== undefined) {
          aparr2 = this.invoiceDetails['values'][i].fedexPriAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr2 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexPriAccessArArray !== undefined) {
          ararr2 = this.invoiceDetails['values'][i].fedexPriAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr2 = this.arData;
        }
        let aparr3:any = [];
        let ararr3:any = [];
        if (this.invoiceDetails['values'][i].reddawayAccessApArray !== undefined) {
          aparr3 = this.invoiceDetails['values'][i].reddawayAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr3 = this.apData;
        }
        if (this.invoiceDetails['values'][i].reddawayAccessArArray !== undefined) {
          ararr3 = this.invoiceDetails['values'][i].reddawayAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr3 = this.arData;
        }
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.editApAccess,
          arAccess: this.editArAccess,
          yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

          }
        } else {
          console.log(this.parseSetMasterData, this.parseSetMasterData);
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

                  }
                }
              }
            })
          })
        }
        if (this.reddawayValues !== undefined) {

          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                if (element.companyName === 'REDDAWAY') {
                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
          arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

                  }
                }
              }
            })
          })

        }
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: userObject,
          fxfpRate: fedexPriObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected,
          yrcshowEdit : this.invoiceDetails['values'][i].yrcshowEdit,
          economyshowEdit : this.invoiceDetails['values'][i].economyshowEdit,
          priorityshowEdit : this.invoiceDetails['values'][i].priorityshowEdit,
          reddawayshowEdit : this.invoiceDetails['values'][i].reddawayshowEdit    
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'FEDEX_FREIGHT_PRIORITY' || formValue.carrier === 'FEDEX PRIORITY') {

      let yrcObject, fedexObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let aparr:any = [];
        let ararr:any = [];
        if (this.invoiceDetails['values'][i].yrcAccessApArray !== undefined) {
          aparr = this.invoiceDetails['values'][i].yrcAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr = this.apData;
        }
        if (this.invoiceDetails['values'][i].yrcAccessArArray !== undefined) {
          ararr = this.invoiceDetails['values'][i].yrcAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr = this.arData;
        }
        let aparr1:any = [];
        let ararr1:any = [];
        if (this.invoiceDetails['values'][i].fedexEcoAccessApArray !== undefined) {
          aparr1 = this.invoiceDetails['values'][i].fedexEcoAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr1 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexEcoAccessArArray !== undefined) {
          ararr1 = this.invoiceDetails['values'][i].fedexEcoAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr1 = this.arData;
        }
        let aparr2:any = [];
        let ararr2:any = [];
        if (this.invoiceDetails['values'][i].fedexPriAccessApArray !== undefined) {
          aparr2 = this.invoiceDetails['values'][i].fedexPriAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr2 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexPriAccessArArray !== undefined) {
          ararr2 = this.invoiceDetails['values'][i].fedexPriAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr2 = this.arData;
        }
        let aparr3:any = [];
        let ararr3:any = [];
        if (this.invoiceDetails['values'][i].reddawayAccessApArray !== undefined) {
          aparr3 = this.invoiceDetails['values'][i].reddawayAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr3 = this.apData;
        }
        if (this.invoiceDetails['values'][i].reddawayAccessArArray !== undefined) {
          ararr3 = this.invoiceDetails['values'][i].reddawayAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr3 = this.arData;
        }
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.editApAccess,
          arAccess: this.editArAccess,
          yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

                  }
                }
              }
            })
          })
        }
        if (this.reddawayValues !== undefined) {

          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
            arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                if (element.companyName === 'REDDAWAY') {
                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
          arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

                  }
                }
              }
            })
          })

        }
        // let allRules = <any>{}
        // // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const yrc = this.invoiceDetails['values'][i].yrcRules;
        // if (yrc !== undefined) {
        //   allRules['yrcRules'] = yrc;
        // }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;

        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: fedexObject,
          fxfpRate: userObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected,
          yrcshowEdit : this.invoiceDetails['values'][i].yrcshowEdit,
          economyshowEdit : this.invoiceDetails['values'][i].economyshowEdit,
          priorityshowEdit : this.invoiceDetails['values'][i].priorityshowEdit,
          reddawayshowEdit : this.invoiceDetails['values'][i].reddawayshowEdit    
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'REDDAWAY') {


      let yrcObject, fedexPriObject, fedexObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let aparr:any = [];
        let ararr:any = [];
        if (this.invoiceDetails['values'][i].yrcAccessApArray !== undefined) {
          aparr = this.invoiceDetails['values'][i].yrcAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr = this.apData;
        }
        if (this.invoiceDetails['values'][i].yrcAccessArArray !== undefined) {
          ararr = this.invoiceDetails['values'][i].yrcAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "YRC") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr = this.arData;
        }
        let aparr1:any = [];
        let ararr1:any = [];
        if (this.invoiceDetails['values'][i].fedexEcoAccessApArray !== undefined) {
          aparr1 = this.invoiceDetails['values'][i].fedexEcoAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr1 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexEcoAccessArArray !== undefined) {
          ararr1 = this.invoiceDetails['values'][i].fedexEcoAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "FEDEX ECONOMY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr1 = this.arData;
        }
        let aparr2:any = [];
        let ararr2:any = [];
        if (this.invoiceDetails['values'][i].fedexPriAccessApArray !== undefined) {
          aparr2 = this.invoiceDetails['values'][i].fedexPriAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr2 = this.apData;
        }
        if (this.invoiceDetails['values'][i].fedexPriAccessArArray !== undefined) {
          ararr2 = this.invoiceDetails['values'][i].fedexPriAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "FEDEX PRIORITY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr2 = this.arData;
        }
        let aparr3:any = [];
        let ararr3:any = [];
        if (this.invoiceDetails['values'][i].reddawayAccessApArray !== undefined) {
          aparr3 = this.invoiceDetails['values'][i].reddawayAccessApArray;
        } else {
          this.parseSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data:any)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.apData = data.assessorial;
            }
            console.log('Ap Assesss', this.apData)
          });
          aparr3 = this.apData;
        }
        if (this.invoiceDetails['values'][i].reddawayAccessArArray !== undefined) {
          ararr3 = this.invoiceDetails['values'][i].reddawayAccessArArray;
        } else {
          this.parseArSetMasterData.forEach((data:any) => {
            console.log(this.invoiceDetails['carrier'], 'this.parseSetMasterData.forEach((data)', data);
            if (data.companyName === "REDDAWAY") {
              data.assessorial = JSON.parse(data.assessorials);
              this.arData = data.assessorial;
            }
            console.log('Ap Assesss', this.arData)
          });
          ararr3 = this.arData;
        }
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.editApAccess,
          arAccess: this.editArAccess,
          yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          redArDiscount: this.invoiceDetails['values'][i].redchangedArDiscount

        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
          arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
          arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          yrcArDiscount: this.invoiceDetails['values'][i].yrcchangedArDiscount

                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
          arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
                    arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          priArDiscount: this.invoiceDetails['values'][i].prichangedArDiscount

                  }
                }
              }
            })
          })
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.editApAccess,
          arAccess: this.editArAccess,
            yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.editApAccess,
          arAccess: this.editArAccess,
                    yrcaparray: aparr,
          yrcararray: ararr,
          ecoaparray: aparr1,
          ecoararray: ararr1,
          priaparray: aparr2,
          priararray: ararr2,
          redaparray: aparr3,
          redararray: ararr3,
          ecoArDiscount: this.invoiceDetails['values'][i].ecochangedArDiscount

                  }
                }
              }
            })
          })

        }
        // let allRules = <any>{}
        // // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const yrc = this.invoiceDetails['values'][i].yrcRules;
        // if (yrc !== undefined) {
        //   allRules['yrcRules'] = yrc;
        // }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: fedexObject,
          fxfpRate: fedexPriObject,
          reddawayRate: userObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected,
          yrcshowEdit : this.invoiceDetails['values'][i].yrcshowEdit,
          economyshowEdit : this.invoiceDetails['values'][i].economyshowEdit,
          priorityshowEdit : this.invoiceDetails['values'][i].priorityshowEdit,
          reddawayshowEdit : this.invoiceDetails['values'][i].reddawayshowEdit    
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    }
    console.log(this.apData, this.arData);
    let costplusArray = [];
    if (this.invoiceDetails['values'][0].yrcCostplusFactor !== null) {
      costplusArray.push({ "carrier": 'YRC', 'factor': this.invoiceDetails['values'][0].yrcCostplusFactor })
    }
    if (this.invoiceDetails['values'][0].reddawayCostplusFactor !== null) {
      costplusArray.push({ "carrier": 'REDDAWAY', 'factor': this.invoiceDetails['values'][0].reddawayCostplusFactor })
    }
    if (this.invoiceDetails['values'][0].economyCostplusFactor !== null) {
      costplusArray.push({ "carrier": 'FEDEX ECONOMY', 'factor': this.invoiceDetails['values'][0].economyCostplusFactor })
    }
    if (this.invoiceDetails['values'][0].priorityCostplusFactor !== null) {
      costplusArray.push({ "carrier": 'FEDEX PRIORITY', 'factor': this.invoiceDetails['values'][0].priorityCostplusFactor })
    }

    if (this.companyInformation.costPlus === true) {
      // costplusArray = this.companyInformation.costPlusFactor 
      this.companyInformation.costPlusFactor.forEach((ele:any) => {
        costplusArray.push(ele);

      })
    
     }

    let apiObject = {
      analyticsCode: this.savinganalyticsCode,
      companyId: this.companyInformation.id,
      notes: this.notesEnter + '\n' + this.savinganalyticsCode,
      updateRate: apiArray,
      costPlus : costplusArray
    }
    console.log(apiObject);
    let beforefinalArray:any = [];
    let Sone = 0;
    let finalData;
    let apiArrayNew:any = [];
    console.log("testing1",this.companyRulesArray);
    console.log(this.temporaryArray);
    console.log("testing", this.existingRulesChanged);
    if (this.existingRulesChanged.length > 0) {
    this.companyRulesArray.forEach((el:any) => {
      this.existingRulesChanged.forEach((ob:any) => {
        if(el.id === ob.id) {
          el.ruleExist = ob.ruleExist;
        }
      })
    });
  } 
    console.log("testing2",this.companyRulesArray);

    if (this.temporaryArray.length > 0) {
      this.companyRulesArray.forEach((ele:any) => {
        ele.status = 'Existing'
      })
      this.temporaryArray.forEach((ele:any) => {
        // if (ele.ruleExist === false) {
        ele.status = 'Proposed'
        // } else {
        //   ele.status = 'Existing'

        // }
      });
      apiArrayNew = this.companyRulesArray.concat(this.temporaryArray);
    } else {
          this.companyRulesArray.forEach((ele:any) => {
        ele.status = 'Existing'
      });
      apiArrayNew = this.companyRulesArray
    }
    if (apiArrayNew.length > 0) {
      Sone = apiArrayNew.length ;

      for (let s = 0; s < apiArrayNew.length; s++) {
        if (apiArrayNew[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          apiArrayNew[s].type = 'FEDEX ECONOMY';
        } else if (apiArrayNew[s].type === 'FEDEX_FREIGHT_PRORITY') {
          apiArrayNew[s].type = 'FEDEX PRIORITY';
        } else {
          apiArrayNew[s].type = apiArrayNew[s].type;
        }
        finalData = {
          directions: apiArrayNew[s].directions,
          fakRange: apiArrayNew[s].fakRange.length > 0 ? apiArrayNew[s].fakRange : [],
          fak: apiArrayNew[s].fakRange.length > 0 ? apiArrayNew[s].fakRange : [],
          fakValue: apiArrayNew[s].fakRange.length > 0 ? apiArrayNew[s].fakRange : [],
          classRange: '',
          customerId: this.companyInformation.id,
          category: apiArrayNew[s].category,
          type: apiArrayNew[s].type,
          classification: [],
          specificStateList1: JSON.stringify(apiArrayNew[s].specificStateList1.length > 0 ? apiArrayNew[s].specificStateList1 : []),
          specificStateList2: JSON.stringify(apiArrayNew[s].specificStateList2.length > 0 ? apiArrayNew[s].specificStateList2 : []),
          specificCityList1: JSON.stringify(apiArrayNew[s].specificCityList1.length > 0 ? apiArrayNew[s].specificCityList1 : []),
          specificCityList2: JSON.stringify(apiArrayNew[s].specificCityList2.length > 0 ? apiArrayNew[s].specificCityList2 : []),
          specificStateFlag: apiArrayNew[s].specificStateFlag,
          specificZipFlag: apiArrayNew[s].specificZipFlag,
          liftGate: apiArrayNew[s].liftGate,
          residential: apiArrayNew[s].residential,
          limitedAccessDelivery: apiArrayNew[s].limitedAccessDelivery,
          insideDelivery: apiArrayNew[s].insideDelivery,
          notify: apiArrayNew[s].notify,
          singleShipment: apiArrayNew[s].singleShipment,
          deliveryAppointmentRequired: apiArrayNew[s].deliveryAppointmentRequired,
          discount: apiArrayNew[s].discount,
          minCharge: apiArrayNew[s].minCharge,
          createdOn: new Date(),
          ruleExist: apiArrayNew[s].ruleExist,
          companyId: this.companyInformation.id,
          status: apiArrayNew[s].status,
          id: 0
        };
        beforefinalArray.push(finalData);
        console.log(beforefinalArray);
        // this.companyRulesArray = this.companyRulesArray.splice(1);
        // this.companyRulesArray.push(finalData);

        console.log(beforefinalArray.length, this.arrayValues.length, Sone);
        let responseValue, responseValueAfter;
        if (beforefinalArray.length === Sone) {
          this.invoiceService.saveInvoiceInfoNew(apiObject, beforefinalArray).subscribe((res: any) => {
            console.log(res);
            if (res.result === true) {
              this.toastr.success('Invoice information is stored successfully');
              // this.saveworkbookRule();
              this.loader = false;
              $('#requestModal').modal('hide');
              this.router.navigate(['/uploadWorksheet']);
            }
          });
        }
      }
    } else { 
      console.log(beforefinalArray);
      this.invoiceService.saveInvoiceInfoNew(apiObject, beforefinalArray).subscribe((res: any) => {
        console.log(res);
        if (res.result === true) {
          this.toastr.success('Invoice information is stored successfully');
          // this.saveworkbookRule();
          this.loader = false;
          $('#requestModal').modal('hide');
          this.router.navigate(['/uploadWorksheet']);
        }
      });
    }

  }

  saveData2(formValue:any, ApFormValue:any, ArFormValue:any) {
    this.invoiceService.setTrafficDataEnable(this.trafficDataEnable);
    let apiArray = [];
    console.log(formValue, ApFormValue, ArFormValue);
    let fxfpAnalyticsCode, yrcAnalyticsCode, fxfeAnalyticsCode, reddawayAnalyticsCode, analyticsCode;
    let date, month, hour, minutes, seconds;
    var today = new Date();
    var sec = today.getSeconds();
    var min = today.getMinutes();
    var hr = today.getHours();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    var yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    // if (formValue.carrier === 'FEDEX PRIORITY') {
    //   analyticsCode = companyName + '_' + 'FXFP' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'FEDEX ECONOMY') {
    //   analyticsCode = companyName + '_' + 'FXFE' + '_' +  yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'YRC') {
    //   analyticsCode = companyName + '_' + 'YRC' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // } else if (formValue.carrier === 'REDDAWAY') {
    //   analyticsCode = companyName + '_' + 'REDDAWAY' + '_' + yyyy +  month + date + hour + minutes + seconds;
    // }
    analyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;
    // this.savinganalyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;

    this.selectedValues = 0;
    this.updatedValues = 0;
    console.log('this.', this.invoiceDetails['values']);
    if (formValue.carrier === 'YRC') {
      let fedexObject, fedexPriObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
        }
        console.log(this.reddawayValues)

        if (this.reddawayValues !== undefined) {
          console.log(this.reddawayValues)
          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          console.log(this.reddawayValues)

          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                console.log('2', obj)
                console.log('3', element)

                if (element.companyName === 'REDDAWAY') {
                  console.log('4', element)

                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })

        }
        console.log(reddawayObject);
        // let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        console.log('savedata', this.invoiceDetails['values'][i]);
        let tempObject = {
          yrcRate: userObject,
          fxfeRate: fedexObject,
          fxfpRate: fedexPriObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'FEDEX_FREIGHT_ECONOMY' || formValue.carrier === 'FEDEX ECONOMY') {

      // apiArray = [];
      // for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
      //   let userObject = {
      //     apDiscount: formValue.apDiscount,
      //     apAmc: formValue.apAmc,
      //     arDiscount: formValue.arDiscount,
      //     arAmc: formValue.arAmc,
      //     apAssessorialName: ApFormValue.accessorials,
      //     apCost: ApFormValue.cost,
      //     apMin: ApFormValue.min,
      //     apMax: ApFormValue.max,
      //     arAssessorialName: ArFormValue.accessorials,
      //     arCost: ArFormValue.cost,
      //     arMin: ArFormValue.min,
      //     arMax: ArFormValue.max,
      //     apAccess: this.apEditValue,
      //     arAccess: this.arAccessEditValue
      //   }
      //   let allRules = <any>{}
      //   const yrc = this.invoiceDetails['values'][i].yrcRules;
      //   const ecoRules = this.invoiceDetails['values'][i].economyRules;
      //   const priRules = this.invoiceDetails['values'][i].priorityRules;
      //   const redRules = this.invoiceDetails['values'][i].reddawayRules;
      //   if(yrc !== undefined) {
      //     allRules['yrcRules'] = yrc;
      //   }
      //   if(ecoRules !== undefined) {
      //     allRules['economyRules'] = ecoRules;
      //   }
      //   if (priRules !==undefined) {
      //     allRules['priorityRules'] = priRules;
      //   }
      //   if (redRules !==undefined) {
      //     allRules['reddawayRules'] = redRules;
      //   }
      //   let newObject = {
      //     invoiceId: this.invoiceDetails['values'][i].id,
      //     carrier: this.invoiceDetails['values'][i].forteCarrier,
      //     forteResponse: JSON.stringify(userObject),
      //     selected: this.invoiceDetails['values'][i].selected,
      //     rules: JSON.stringify(allRules)

      //   }
      //   apiArray.push(newObject);

      // }
      let yrcObject, fedexPriObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          console.log(this.parseSetMasterData, this.parseSetMasterData);
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
        }
        if (this.reddawayValues !== undefined) {

          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                if (element.companyName === 'REDDAWAY') {
                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })

        }
        // let allRules = <any>{}
        // // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const yrc = this.invoiceDetails['values'][i].yrcRules;
        // if (yrc !== undefined) {
        //   allRules['yrcRules'] = yrc;
        // }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: userObject,
          fxfpRate: fedexPriObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'FEDEX_FREIGHT_PRIORITY' || formValue.carrier === 'FEDEX PRIORITY') {

      let yrcObject, fedexObject, reddawayObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
        }
        if (this.reddawayValues !== undefined) {

          reddawayObject = {
            apAmc: this.reddawayValues.apAmc,
            arAmc: this.reddawayValues.arAmc,
            apDiscount: this.reddawayValues.apDiscount,
            arDiscount: this.reddawayValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'REDDAWAY') {
                if (element.companyName === 'REDDAWAY') {
                  reddawayObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })

        }
        // let allRules = <any>{}
        // // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const yrc = this.invoiceDetails['values'][i].yrcRules;
        // if (yrc !== undefined) {
        //   allRules['yrcRules'] = yrc;
        // }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;

        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: fedexObject,
          fxfpRate: userObject,
          reddawayRate: reddawayObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    } else if (formValue.carrier === 'REDDAWAY') {


      let yrcObject, fedexPriObject, fedexObject;
      apiArray = [];
      for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        if (this.yrcFormValues !== undefined) {

          yrcObject = {
            apAmc: this.yrcFormValues.apAmc,
            arAmc: this.yrcFormValues.arAmc,
            apDiscount: this.yrcFormValues.apDiscount,
            arDiscount: this.yrcFormValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'YRC') {
                if (element.companyName === 'YRC') {
                  yrcObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
          // fedexObject = {
          //   apAmc: this.workbookForm.value.apAmc,
          //   arAmc: this.workbookForm.value.arAmc,
          //   apDiscount: this.workbookForm.value.apDiscount,
          //   arDiscount: this.workbookForm.value.arDiscount,
          //   apAssessorialName: this.accessorialFormAP.value.accessorials,
          //   apCost: this.accessorialFormAP.value.cost,
          //   apMin: this.accessorialFormAP.value.min,
          //   apMax: this.accessorialFormAP.value.max,
          //   arAssessorialName: this.accessorialFormAR.value.accessorials,
          //   arCost: this.accessorialFormAR.value.cost,
          //   arMin: this.accessorialFormAR.value.min,
          //   arMax: this.accessorialFormAR.value.max,
          //   apAccess: this.apEditValue,
          //   arAccess: this.arAccessEditValue
          // }
        }
        if (this.fedexPriorityValues !== undefined) {

          fedexPriObject = {
            apAmc: this.fedexPriorityValues.apAmc,
            arAmc: this.fedexPriorityValues.arAmc,
            apDiscount: this.fedexPriorityValues.apDiscount,
            arDiscount: this.fedexPriorityValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX PRIORITY') {
                if (element.companyName === 'FEDEX PRIORITY') {
                  fedexPriObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })
        }
        if (this.fedexEconomyValues !== undefined) {

          fedexObject = {
            apAmc: this.fedexEconomyValues.apAmc,
            arAmc: this.fedexEconomyValues.arAmc,
            apDiscount: this.fedexEconomyValues.apDiscount,
            arDiscount: this.fedexEconomyValues.arDiscount,
            apAssessorialName: this.accessorialFormAP.value.accessorials,
            apCost: this.accessorialFormAP.value.cost,
            apMin: this.accessorialFormAP.value.min,
            apMax: this.accessorialFormAP.value.max,
            arAssessorialName: this.accessorialFormAR.value.accessorials,
            arCost: this.accessorialFormAR.value.cost,
            arMin: this.accessorialFormAR.value.min,
            arMax: this.accessorialFormAR.value.max,
            apAccess: this.apEditValue,
            arAccess: this.arAccessEditValue
          }
        } else {
          this.parseSetMasterData.forEach((obj:any) => {
            this.parseArSetMasterData.forEach((element:any) => {
              if (obj.companyName === 'FEDEX ECONOMY') {
                if (element.companyName === 'FEDEX ECONOMY') {
                  fedexObject = {
                    apAmc: obj.amc,
                    arAmc: element.amc,
                    apDiscount: obj.discount,
                    arDiscount: element.discount,
                    apAssessorialName: this.accessorialFormAP.value.accessorials,
                    apCost: this.accessorialFormAP.value.cost,
                    apMin: this.accessorialFormAP.value.min,
                    apMax: this.accessorialFormAP.value.max,
                    arAssessorialName: this.accessorialFormAR.value.accessorials,
                    arCost: this.accessorialFormAR.value.cost,
                    arMin: this.accessorialFormAR.value.min,
                    arMax: this.accessorialFormAR.value.max,
                    apAccess: this.apEditValue,
                    arAccess: this.arAccessEditValue
                  }
                }
              }
            })
          })

        }
        // let allRules = <any>{}
        // // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        // const yrc = this.invoiceDetails['values'][i].yrcRules;
        // if (yrc !== undefined) {
        //   allRules['yrcRules'] = yrc;
        // }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let allRules = <any>{}
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        const yrc = this.invoiceDetails['values'][i].yrcRules;
        if (yrc !== undefined) {
          allRules['yrcRules'] = yrc;
        } else {
          allRules['yrcRules'] = {'ap':[],'ar':[]};
        }
        // const ecoRules = this.invoiceDetails['values'][i].economyRules;
        // const priRules = this.invoiceDetails['values'][i].priorityRules;
        // const redRules = this.invoiceDetails['values'][i].reddawayRules;
        let ecoRules,priRules,redRules;
        // allRules['yrcRules'] = this.invoiceDetails['values'][i].yrcRules;
        if (this.invoiceDetails['values'][i].economyRules !== undefined) {
           ecoRules = this.invoiceDetails['values'][i].economyRules;

        } else {
          ecoRules = {'ap':[],'ar':[]};
        }
        if (this.invoiceDetails['values'][i].priorityRules !== undefined) {
          priRules = this.invoiceDetails['values'][i].priorityRules;

       } else {
        priRules = {'ap':[],'ar':[]};
       }
       if (this.invoiceDetails['values'][i].reddawayRules !== undefined) {
        redRules = this.invoiceDetails['values'][i].reddawayRules;

     } else {
      redRules = {'ap':[],'ar':[]};
     }

        if (ecoRules !== undefined) {
          allRules['economyRules'] = ecoRules;
        }
        if (priRules !== undefined) {
          allRules['priorityRules'] = priRules;
        }
        if (redRules !== undefined) {
          allRules['reddawayRules'] = redRules;
        }
        let tempObject = {
          yrcRate: yrcObject,
          fxfeRate: fedexObject,
          fxfpRate: fedexPriObject,
          reddawayRate: userObject,
          yrcSelected: this.invoiceDetails['values'][i].yrcSelected,
          reddawaySelected: this.invoiceDetails['values'][i].reddawaySelected,
          economySelected: this.invoiceDetails['values'][i].economySelected,
          prioritySelected: this.invoiceDetails['values'][i].prioritySelected
        }
        let newObject = {
          invoiceId: this.invoiceDetails['values'][i].id,
          carrier: this.invoiceDetails['values'][i].forteCarrier,
          forteResponse: JSON.stringify(tempObject),
          selected: this.invoiceDetails['values'][i].selected,
          rules: JSON.stringify(allRules)

        }
        apiArray.push(newObject);

      }
    }
    let apiObject = {
      analyticsCode: this.savinganalyticsCode,
      companyId: this.companyInformation.id,
      notes: this.notesEnter + '\n' + this.savinganalyticsCode,
      updateRate: apiArray
    }
    console.log(apiObject);
    let beforefinalArray:any = [];
    let Sone = 0;
    let finalData;
    let apiArrayNew:any = [];
    console.log("testing1",this.companyRulesArray);
    console.log(this.temporaryArray);
    console.log("testing", this.existingRulesChanged);
    this.companyRulesArray.forEach((el:any) => {
      this.existingRulesChanged.forEach((ob:any) => {
        if(el.id === ob.id) {
          el.ruleExist = ob.ruleExist;
        }
      })
    });
    console.log("testing2",this.companyRulesArray);

    if (this.temporaryArray.length > 0) {
      this.companyRulesArray.forEach((ele:any) => {
        ele.status = 'Existing'
      })
      this.temporaryArray.forEach((ele:any) => {
        // if (ele.ruleExist === false) {
        ele.status = 'Proposed'
        // } else {
        //   ele.status = 'Existing'

        // }
      });
      apiArrayNew = this.companyRulesArray.concat(this.temporaryArray);
    } else {
          this.companyRulesArray.forEach((ele:any) => {
        ele.status = 'Existing'
      });
      apiArrayNew = this.companyRulesArray
    }
    if (apiArrayNew.length > 0) {
      Sone = apiArrayNew.length ;

      for (let s = 0; s < apiArrayNew.length; s++) {
        if (apiArrayNew[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          apiArrayNew[s].type = 'FEDEX ECONOMY';
        } else if (apiArrayNew[s].type === 'FEDEX_FREIGHT_PRORITY') {
          apiArrayNew[s].type = 'FEDEX PRIORITY';
        } else {
          apiArrayNew[s].type = apiArrayNew[s].type;
        }
        finalData = {
          directions: apiArrayNew[s].directions,
          fakRange: apiArrayNew[s].fakRange.length > 0 ? apiArrayNew[s].fakRange : [],
          fak: apiArrayNew[s].fakValue.length > 0 ? apiArrayNew[s].fakValue : [],
          fakValue: apiArrayNew[s].fakValue.length > 0 ? apiArrayNew[s].fakValue : [],
          classRange: '',
          customerId: this.companyInformation.id,
          category: apiArrayNew[s].category,
          type: apiArrayNew[s].type,
          classification: [],
          specificStateList1: JSON.stringify(apiArrayNew[s].specificStateList1.length > 0 ? apiArrayNew[s].specificStateList1 : []),
          specificStateList2: JSON.stringify(apiArrayNew[s].specificStateList2.length > 0 ? apiArrayNew[s].specificStateList2 : []),
          specificCityList1: JSON.stringify(apiArrayNew[s].specificCityList1.length > 0 ? apiArrayNew[s].specificCityList1 : []),
          specificCityList2: JSON.stringify(apiArrayNew[s].specificCityList2.length > 0 ? apiArrayNew[s].specificCityList2 : []),
          specificStateFlag: apiArrayNew[s].specificStateFlag,
          specificZipFlag: apiArrayNew[s].specificZipFlag,
          liftGate: apiArrayNew[s].liftGate,
          residential: apiArrayNew[s].residential,
          limitedAccessDelivery: apiArrayNew[s].limitedAccessDelivery,
          insideDelivery: apiArrayNew[s].insideDelivery,
          notify: apiArrayNew[s].notify,
          singleShipment: apiArrayNew[s].singleShipment,
          deliveryAppointmentRequired: apiArrayNew[s].deliveryAppointmentRequired,
          discount: apiArrayNew[s].discount,
          minCharge: apiArrayNew[s].minCharge,
          createdOn: new Date(),
          ruleExist: apiArrayNew[s].ruleExist,
          companyId: this.companyInformation.id,
          status: apiArrayNew[s].status,
          id: 0
        };
        beforefinalArray.push(finalData);
        console.log(beforefinalArray);
        // this.companyRulesArray = this.companyRulesArray.splice(1);
        // this.companyRulesArray.push(finalData);

        console.log(beforefinalArray.length, this.arrayValues.length, Sone);
        let responseValue, responseValueAfter;
        if (beforefinalArray.length === Sone) {
          this.invoiceService.saveInvoiceInfoNew(apiObject, beforefinalArray).subscribe((res: any) => {
            console.log(res);
            if (res.result === true) {
              this.toastr.success('Invoice information is stored successfully');
              // this.saveworkbookRule();
              this.loader = false;
              $('#requestModal').modal('hide');
              // this.router.navigate(['/uploadWorksheet']);
            }
          });
        }
      }
    } else {
      console.log(beforefinalArray);
      this.invoiceService.saveInvoiceInfoNew(apiObject, beforefinalArray).subscribe((res: any) => {
        console.log(res);
        if (res.result === true) {
          this.toastr.success('Invoice information is stored successfully');
          // this.saveworkbookRule();
          this.loader = false;
          $('#requestModal').modal('hide');
          // this.router.navigate(['/uploadWorksheet']);
        }
      });
    }

  }

  changeName() {
    this.showEditAnalyticsCode = true;
  }

  viewMore(businessRule:any) {
    this.viewFakArray = [];
    const fakRange = JSON.parse(businessRule.fakRange);
    const fak = JSON.parse(businessRule.fak);
    if (fakRange.length === 0 || fak.length === 0) {
      this.viewFakArray = [];
      this.showViewFAKValues = false;
    } else {
      for (let f = 0; f < fakRange.length; f++) {
        const data = fakRange[f].split('-');
        const data1 = data[0];
        const data2 = data[1];
        const fakData = fak[f];
        const fakValue = { fakRangeFrom: data1, fakRangeTo: data2, fakValue: fakData };
        this.viewFakArray.push(fakValue);
        this.showViewFAKValues = true;
      }
      if (this.viewFakArray.length > 0) {
        this.showFak = true;
      } else {
        this.showFak = false;
      }
    }
  }

  saveData1(formValue:any, ApFormValue:any, ArFormValue:any) {
    // this.trafficDataEnable = [];
    this.trafficDataEnable.values.forEach((obj:any) => {
      obj.rateResponse = JSON.stringify(obj.rateResponse);
      if (obj.fxfpRate !== null) {
        obj.fxfpRate = JSON.stringify(obj.fxfpRate);
      }
      if (obj.fxfeRate !== null) {
        obj.fxfeRate = JSON.stringify(obj.fxfeRate);
      }
      if (obj.yrcRate !== null) {
        obj.yrcRate = JSON.stringify(obj.yrcRate);
      }
      if (obj !== null) {
        obj.reddawayRate = JSON.stringify(obj.reddawayRate);
      }
    });
    this.invoiceService.setTrafficDataEnable(this.trafficDataEnable);

    console.log(formValue, ApFormValue, ArFormValue);
    let fxfpAnalyticsCode, yrcAnalyticsCode, fxfeAnalyticsCode, reddawayAnalyticsCode;
    let date, month, hour, minutes, seconds;
    let today = new Date();
    let sec = today.getSeconds();
    let min = today.getMinutes();
    let hr = today.getHours();
    let dd = today.getDate();
    let mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    let yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    if (formValue.carrier === 'FEDEX PRIORITY') {
      fxfpAnalyticsCode = companyName + '_' + 'FXFP' + '_' + yyyy + month + date + hour + minutes + seconds;
    } else if (formValue.carrier === 'FEDEX ECONOMY') {
      fxfeAnalyticsCode = companyName + '_' + 'FXFE' + '_' + yyyy + month + date + hour + minutes + seconds;
    } else if (formValue.carrier === 'YRC') {
      yrcAnalyticsCode = companyName + '_' + 'YRC' + '_' + yyyy + month + date + hour + minutes + seconds;
    } else if (formValue.carrier === 'REDDAWAY') {
      reddawayAnalyticsCode = companyName + '_' + 'REDDAWAY' + '_' + yyyy + month + date + hour + minutes + seconds;
    }
    this.selectedValues = 0;
    this.updatedValues = 0;
    for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
      console.log(this.invoiceDetails['values'][i]);
      this.selectedValues = this.selectedValues + 1;
      if (formValue.carrier === 'FEDEX PRIORITY') {
        let newObject = [{
          test: this.notesEnter + '↵' + fxfpAnalyticsCode
        }]
        this.invoiceDetails['values'][i].notes = JSON.stringify(this.notesEnter +
          '\n' + fxfpAnalyticsCode);
        this.invoiceDetails['values'][i].fxfpAnalyticsCode = fxfpAnalyticsCode;
        if (ApFormValue.accessorials === '') {
          this.apEditValue = false;
        } else {
          this.apEditValue = true;
        }
        if (ArFormValue.accessorials === '') {
          this.arAccessEditValue = false;
        } else {
          this.arAccessEditValue = true;
        }

        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'][i].fxfpRate = JSON.stringify(userObject);
        if (this.invoiceDetails['values'][i].fxfeRate !== undefined && this.invoiceDetails['values'][i].fxfeRate !== null) {
          if (this.invoiceDetails['values'][i].fxfeRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfeRate = JSON.stringify(this.invoiceDetails['values'][i].fxfeRate);
          }
        }
        if (this.invoiceDetails['values'][i].yrcRate !== undefined && this.invoiceDetails['values'][i].yrcRate !== null) {
          if (this.invoiceDetails['values'][i].yrcRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].yrcRate = JSON.stringify(this.invoiceDetails['values'][i].yrcRate);
          }
        }
        if (this.invoiceDetails['values'][i].reddawayRate !== undefined && this.invoiceDetails['values'][i].reddawayRate !== null) {
          if (this.invoiceDetails['values'][i].reddawayRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].reddawayRate = JSON.stringify(this.invoiceDetails['values'][i].reddawayRate);
          }
        }
        if (this.selectedAnalyticsCodeData === undefined) {
          this.updateDataInvoice(this.invoiceDetails['values'][i], i);
        } else {
          this.createNewDataInvoice(this.invoiceDetails['values'][i], i);
        }

      } else if (formValue.carrier === 'FEDEX ECONOMY') {
        let newObject = [{
          test: this.notesEnter + '↵' + fxfeAnalyticsCode
        }]
        this.invoiceDetails['values'][i].notes = JSON.stringify(this.notesEnter +
          '\n' + fxfeAnalyticsCode);

        this.invoiceDetails['values'][i].fxfeAnalyticsCode = fxfeAnalyticsCode;
        if (ApFormValue.accessorials === '') {
          this.apEditValue = false;
        } else {
          this.apEditValue = true;
        }
        if (ArFormValue.accessorials === '') {
          this.arAccessEditValue = false;
        } else {
          this.arAccessEditValue = true;
        }

        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'][i].fxfeRate = JSON.stringify(userObject);
        if (this.invoiceDetails['values'][i].fxfpRate !== undefined && this.invoiceDetails['values'][i].fxfpRate !== null) {
          if (this.invoiceDetails['values'][i].fxfpRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfpRate = JSON.stringify(this.invoiceDetails['values'][i].fxfpRate);
          }
        }
        if (this.invoiceDetails['values'][i].yrcRate !== undefined && this.invoiceDetails['values'][i].yrcRate !== null) {
          if (this.invoiceDetails['values'][i].yrcRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].yrcRate = JSON.stringify(this.invoiceDetails['values'][i].yrcRate);
          }
        }
        if (this.invoiceDetails['values'][i].reddawayRate !== undefined && this.invoiceDetails['values'][i].reddawayRate !== null) {
          if (this.invoiceDetails['values'][i].reddawayRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].reddawayRate = JSON.stringify(this.invoiceDetails['values'][i].reddawayRate);
          }
        }
        if (this.selectedAnalyticsCodeData === undefined) {
          this.updateDataInvoice(this.invoiceDetails['values'][i], i);
        } else {
          this.createNewDataInvoice(this.invoiceDetails['values'][i], i);
        }

      } else if (formValue.carrier === 'YRC') {

        let newObject = [{
          test: this.notesEnter + '↵' + yrcAnalyticsCode
        }]

        this.invoiceDetails['values'][i].notes = JSON.stringify(this.notesEnter +
          '\n' + yrcAnalyticsCode);

        this.invoiceDetails['values'][i].yrcAnalyticsCode = yrcAnalyticsCode;
        if (ApFormValue.accessorials === '') {
          this.apEditValue = false;
        } else {
          this.apEditValue = true;
        }
        if (ArFormValue.accessorials === '') {
          this.arAccessEditValue = false;
        } else {
          this.arAccessEditValue = true;
        }

        let userObject = {
          apDiscount: this.invoiceDetails['values'][i].finalAPDiscount,
          apAmc: formValue.apAmc,
          arDiscount: this.invoiceDetails['values'][i].finalARDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'][i].yrcRate = JSON.stringify(userObject);
        if (this.invoiceDetails['values'][i].fxfpRate !== undefined && this.invoiceDetails['values'][i].fxfpRate !== null) {
          if (this.invoiceDetails['values'][i].fxfpRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfpRate = JSON.stringify(this.invoiceDetails['values'][i].fxfpRate);
          }
        }
        if (this.invoiceDetails['values'][i].fxfeRate !== undefined && this.invoiceDetails['values'][i].fxfeRate !== null) {
          if (this.invoiceDetails['values'][i].fxfeRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfeRate = JSON.stringify(this.invoiceDetails['values'][i].fxfeRate);
          }
        }
        if (this.invoiceDetails['values'][i].reddawayRate !== undefined && this.invoiceDetails['values'][i].reddawayRate !== null) {
          if (this.invoiceDetails['values'][i].reddawayRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].reddawayRate = JSON.stringify(this.invoiceDetails['values'][i].reddawayRate);
          }
        }
        this.invoiceDetails['values'][i].isSaved = true;
        console.log(this.invoiceDetails['values'][i], this.invoiceDetails['values'][i].id);
        this.loader = true;
        if (this.selectedAnalyticsCodeData === undefined) {
          this.updateDataInvoice(this.invoiceDetails['values'][i], i);
        } else {
          this.createNewDataInvoice(this.invoiceDetails['values'][i], i);
        }
      } else if (formValue.carrier === 'REDDAWAY') {
        this.invoiceDetails['values'][i].reddawayAnalyticsCode = reddawayAnalyticsCode;
        if (ApFormValue.accessorials === '') {
          this.apEditValue = false;
        } else {
          this.apEditValue = true;
        }
        if (ArFormValue.accessorials === '') {
          this.arAccessEditValue = false;
        } else {
          this.arAccessEditValue = true;
        }

        let userObject = {
          apDiscount: formValue.apDiscount,
          apAmc: formValue.apAmc,
          arDiscount: formValue.arDiscount,
          arAmc: formValue.arAmc,
          apAssessorialName: ApFormValue.accessorials,
          apCost: ApFormValue.cost,
          apMin: ApFormValue.min,
          apMax: ApFormValue.max,
          arAssessorialName: ArFormValue.accessorials,
          arCost: ArFormValue.cost,
          arMin: ArFormValue.min,
          arMax: ArFormValue.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'][i].reddawayRate = JSON.stringify(userObject);
        if (this.invoiceDetails['values'][i].fxfpRate !== undefined) {
          if (this.invoiceDetails['values'][i].fxfpRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfpRate = JSON.stringify(this.invoiceDetails['values'][i].fxfpRate);
          }
        }
        if (this.invoiceDetails['values'][i].fxfeRate !== undefined) {
          if (this.invoiceDetails['values'][i].fxfeRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].fxfeRate = JSON.stringify(this.invoiceDetails['values'][i].fxfeRate);
          }
        }
        if (this.invoiceDetails['values'][i].yrcRate !== undefined) {
          if (this.invoiceDetails['values'][i].yrcRate.apDiscount !== undefined) {
            this.invoiceDetails['values'][i].yrcRate = JSON.stringify(this.invoiceDetails['values'][i].yrcRate);
          }
        }
        this.updateDataInvoice(this.invoiceDetails['values'][i], i);

      }
    }
  }

  updateDataInvoice(object:any, index:any) {
    // if (this.selectedAnalyticsCodeData === undefined) {
    this.invoiceService.updateInvoiceInfo(object).subscribe((response: any) => {
      console.log(response);
      if (response !== undefined) {
        this.updatedValues = this.updatedValues + 1;
      }
      if (this.updatedValues === this.selectedValues) {
        this.toastr.success('Invoice information is stored successfully');
        this.loader = false;
        this.router.navigate(['/uploadWorksheet']);

      }
    });
    // } else {
    //   console.log(this.invoiceDetails['values']);
    // }
  }

  createNewDataInvoice(element:any, index:any) {
    let userObject = {};
    userObject = {
      shipmentDate: element.shipmentDate,
      carrier: element.customerCarrier,
      typeOfInvoice: element.typeOfInvoice,
      forteCarrier: this.invoiceDetails['carrier'],
      originZip: element.originZip,
      originCity: element.originCity,
      originState: element.originState,
      destinationZip: element.destinationZip,
      destinationCity: element.destinationCity,
      destinationState: element.destinationState,
      pallets: element.pallets,
      class: element.class,
      weight: element.weight,
      fuelCharge: element.fuelCharge,
      invoiceAmount: element.invoiceAmount,
      assessorial: element.assessorial,
      companyId: this.companyInformation.id,
      salesRepId: this.companyInformation.idSalesRep,
      companyName: this.companyInformation.companyName,
      pieces: element.pallets,
      assessorialCharge: element.assessorialCharge,
      createdVia: 'Application',
      // selected: eleme/nt.selected,
      id: 0
    };
    this.loader = true;
    this.invoiceService.saveUploadedInvoiceNew(userObject).subscribe((res: any) => {
      console.log('second', res);
      if (res.result != 'Validation Error' && res.result != 'Invoice Data Empty' && res.result != 'Invalid Class' && res.result != 'false') {
        this.invoiceDetails['values'][index].id = res.result.id;
        this.invoiceDetails['values'][index].selected = element.selected;
        console.log('InvoiceNewData', this.invoiceDetails['values'])
        this.updateDataInvoice(this.invoiceDetails['values'][index], index);
      }
    });
  }
  editAmcCheckrate(event:any, type:any) {
    console.log(event);
    console.log(this.workbookForm.value);
    console.log(this.invoiceDetails);
    if (event.keyCode === 13 || event.keyCode === 9) {
      if (type === 'APAmc') {
        this.workbookForm.patchValue({
          apAmc: event.target.value
        });
        this.editValue = true;
        this.editAPAMC = true;
        $('#APDiscount').focus();
        event.preventDefault();
      } else if (type === 'ARAmc') {
        this.workbookForm.patchValue({
          arAmc: event.target.value
        });
        this.editArValue = true;
        this.editARAMC = true;

        $('#ARDiscount').focus();
        event.preventDefault();
      } else if (type === 'APDiscount') {
        this.workbookForm.patchValue({
          apDiscount: event.target.value
        });
        this.editValue = true;
        this.editAPDiscountValue = true
        $('#ARAmc').focus();
        event.preventDefault();
      } else if (type === 'ARDiscount') {
        this.workbookForm.patchValue({
          arDiscount: event.target.value
        });

        this.editArValue = true;
        this.editARDiscountValue = true

        // $('#save').focus();
        event.preventDefault();
      }
      if (this.invoiceDetails['carrier'] === 'YRC') {
        this.yrcFormValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue

        }
      } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
        this.fedexEconomyValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
      } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
        this.fedexPriorityValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
      } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        this.reddawayValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
      }
      console.log('yrcformvalues', this.yrcFormValues);
      console.log(this.inboundArray);
      console.log(this.outboundArray);
      this.resultForYRCArray = [];
      this.resultForReddawayArray = [];
      this.resultArray = [];
      this.resultForPriorityArray = [];
      this.tableVables();
    }

  }

  editAmcCheckrate1(event:any, type:any) {
    console.log(event);
    console.log(this.workbookForm.value);
    console.log(this.invoiceDetails);
    if (event.keyCode === 9) {
      if (type === 'APAmc') {
        this.workbookForm.patchValue({
          apAmc: event.target.value
        });
        this.editValue = true;
        $('#APDiscount').focus();
        event.preventDefault();
      } else if (type === 'ARAmc') {
        this.workbookForm.patchValue({
          arAmc: event.target.value
        });
        this.editArValue = true;
        $('#ARDiscount').focus();
        event.preventDefault();
      } else if (type === 'APDiscount') {
        this.workbookForm.patchValue({
          apDiscount: event.target.value
        });
        this.editValue = true;
        $('#ARAmc').focus();
        event.preventDefault();
      } else if (type === 'ARDiscount') {
        this.workbookForm.patchValue({
          arDiscount: event.target.value
        });
        this.editArValue = true;
        // $('#save').focus();
        event.preventDefault();
      }
      console.log(this.inboundArray);
      console.log(this.outboundArray);
      this.resultForYRCArray = [];
      this.resultForReddawayArray = [];
      // this.resultArray = [];
      this.resultForPriorityArray = [];
      this.tableVables();
    }

  }
  checkForZipCodes(zipcode:any, type:any) {
    console.log('zip', zipcode, type, this.companyDetails)
    this.zipCodeErrorResponseForDestination = false;
    // this.zipCodeErrorResponseForOrigin = false;
    // this.fillTypeOfInvoice();
    this.pricingInfoService.getCityState(zipcode).subscribe((response:any) => {
      if (type === 'origin') {
        return this.zipcodeResponseOrigin = response[0].city;
      } else {
        return this.zipcodeResponseDestination = response[0].city;

      }
      // if (this.zipcodeResponse.length > 0) {
      //   if (type == 'origin') {
      //     this.invoiceForm.patchValue({ originCity: this.zipcodeResponse[0].city, originState: this.zipcodeResponse[0].state });
      //   } else {
      //     this.invoiceForm.patchValue({ destinationCity: this.zipcodeResponse[0].city, destinationState: this.zipcodeResponse[0].state });
      //   }
      // } else {
      //   if (type == 'origin') {
      //     this.zipCodeErrorResponseForDestination = false;
      //     this.zipCodeErrorResponseForOrigin = true;
      //   } else {
      //     this.zipCodeErrorResponseForOrigin = false;
      //     this.zipCodeErrorResponseForDestination = true;
      //   }
      // }
    });
  }
  optimizeValues() {
    console.log(this.invoiceDetails['values']);
    let newValue;
    for (let i = 0; i < this.invoiceDetails['values'].length; i++) {
      newValue = Number(((this.invoiceDetails['values'][i].invoiceAmount - this.invoiceDetails['values'][i].arFinalRate) / this.invoiceDetails['values'][i].invoiceAmount) * 100).toFixed(2);
      console.log(newValue);
      this.invoiceDetails['values'][i].optimizeValue = newValue;
      newValue = 0;

    }
  }

  editAccessorials(data:any, type:any, event:any,index:any) {


    if (type === 'AR') {
      this.editARAcc = true;
      this.editAPAcc = false;
      this.editARIndex = index;
      console.log(data);
      this.accessorialFormAR.patchValue({
        accessorials: data.name,
        cost: data.cost,
        min: data.min,
        max: data.max
      });
      setTimeout(() => {
        $('#costAr').focus();
      }, 500);
    }
    if (type === 'AP') {
      this.editAPAcc = true;
      this.editARAcc = false;
      this.editAPIndex = index;

      console.log(data);
      this.accessorialFormAP.patchValue({
        accessorials: data.name,
        cost: data.cost,
        min: data.min,
        max: data.max
      });
      console.log(this.editAPIndex);
// console.log(this.apData);

console.log(this.apData);
      setTimeout(() => {
        $('#costAp').focus();
      }, 500);
    }
  }

  accessTab(event:any, type:any) {
    console.log(event, type);

    if (event.keyCode === 13) {
      console.log(event, type);
      console.log(this.apData[this.editAPIndex]);
      console.log(this.arData, this.editARIndex);
      if (type === 'costAp') {
        $('#minAp').focus();
        this.accessorialFormAP.patchValue({
          costAp: event.target.value
        });
        this.editApAccess = true;
        console.log('this.accessorialFormAP', this.accessorialFormAP.value);
        console.log('this.accessorialFormAR', this.accessorialFormAR.value);
        this.apData[this.editAPIndex].cost=  this.accessorialFormAP.value.cost;
        console.log(this.apData[this.editAPIndex]);

      } else if (type === 'minAp') {
        $('#maxAp').focus();
        this.accessorialFormAP.patchValue({
          minAp: event.target.value
        });
        this.editApAccess = true;
        this.apData[this.editAPIndex].min=  this.accessorialFormAP.value.min;

      } else if (type === 'maxAp') {
        // $('#save').focus();
        $('#apassessorial-view').modal('hide');

        this.accessorialFormAP.patchValue({
          maxAp: event.target.value
        });
        this.editApAccess = true;
        
        this.apData[this.editAPIndex].max=  this.accessorialFormAP.value.max;
        this.editAPIndex = undefined;


      } else if (type === 'costAr') {
        $('#minAr').focus();
        this.accessorialFormAP.patchValue({
          costAr: event.target.value
        });
        this.arData[this.editARIndex].cost=  this.accessorialFormAR.value.cost;

        this.editArAccess = true;
      } else if (type === 'minAr') {
        $('#maxAr').focus();
        this.accessorialFormAP.patchValue({
          minAr: event.target.value
        });
        this.arData[this.editARIndex].min=  this.accessorialFormAR.value.min;

        this.editArAccess = true;
      } else if (type === 'maxAr') {
        // $('#save').focus();
        $('#arassessorial-view').modal('hide');

        this.accessorialFormAP.patchValue({
          maxAr: event.target.value
        });
        this.arData[this.editARIndex].max=  this.accessorialFormAR.value.max;

        this.editArAccess = true;
        this.editARIndex = undefined;

      }
      if (this.invoiceDetails['carrier'] === 'YRC') {
        this.yrcFormValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue

        }
        this.invoiceDetails['values'].forEach((el:any) => {
          el.yrcAccessApArray = this.apData;
          el.yrcAccessArArray = this.arData;
        })
      } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
        this.fedexEconomyValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'].forEach((el:any) => {
          el.fedexEcoAccessApArray = this.apData;
          el.fedexEcoAccessArArray = this.arData;
        })
      } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
        this.fedexPriorityValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'].forEach((el:any) => {
          el.fedexPriAccessApArray = this.apData;
          el.fedexPriAccessArArray = this.arData;
        })
      } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        this.reddawayValues = {
          apAmc: this.workbookForm.value.apAmc,
          arAmc: this.workbookForm.value.arAmc,
          apDiscount: this.workbookForm.value.apDiscount,
          arDiscount: this.workbookForm.value.arDiscount,
          apAssessorialName: this.accessorialFormAP.value.accessorials,
          apCost: this.accessorialFormAP.value.cost,
          apMin: this.accessorialFormAP.value.min,
          apMax: this.accessorialFormAP.value.max,
          arAssessorialName: this.accessorialFormAR.value.accessorials,
          arCost: this.accessorialFormAR.value.cost,
          arMin: this.accessorialFormAR.value.min,
          arMax: this.accessorialFormAR.value.max,
          apAccess: this.apEditValue,
          arAccess: this.arAccessEditValue
        }
        this.invoiceDetails['values'].forEach((el:any) => {
          el.reddawayAccessApArray = this.apData;
          el.reddawayAccessArArray = this.arData;
        })
      }
      this.tableVables();
    }
    console.log('this.accessorialFormAP', this.accessorialFormAP);
    console.log('this.accessorialFormAR', this.accessorialFormAR);
    console.log(this.apData,
      this.arData);

  }
  checkForSelected(value1:any, index:any, data:any) {
    console.log(value1);
    console.log('');
    console.log(this.outboundArray);
    console.log(this.inboundArray);
    console.log(this.thirdPartyArray);
    let value = value1.target.checked;
    if (data === 'outbound') {
      for (let i = 0; i < this.outboundArray.length; i++) {
        this.outboundArray[index].selected = value;
        if (this.invoiceDetails['carrier'] === 'YRC') {
          this.outboundArray[index].yrcSelected = value;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
          this.outboundArray[index].economySelected = value;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
          this.outboundArray[index].prioritySelected = value;
        } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
          this.outboundArray[index].reddawaySelected = value;
        }
      }
      console.log(this.outboundArray);
    } else if (data === 'inbound') {
      for (let i = 0; i < this.inboundArray.length; i++) {
        if (value === true) {
          this.inboundArray[index].selected = true;
        } else {
          this.inboundArray[index].selected = false;
        }
        if (this.invoiceDetails['carrier'] === 'YRC') {
          this.inboundArray[index].yrcSelected = value;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
          this.inboundArray[index].economySelected = value;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
          this.inboundArray[index].prioritySelected = value;
        } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
          this.inboundArray[index].reddawaySelected = value;
        }
      }
      console.log(this.inboundArray);
    } else if (data === 'thirdParty') {
      for (let i = 0; i < this.thirdPartyArray.length; i++) {
        if (value === true) {
          this.thirdPartyArray[index].selected = true;
        } else {
          this.thirdPartyArray[index].selected = false;
        }

        if (this.invoiceDetails['carrier'] === 'YRC') {
          this.thirdPartyArray[index].yrcSelected = this.thirdPartyArray[index].selected;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
          this.thirdPartyArray[index].economySelected = this.thirdPartyArray[index].selected;
        } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
          this.thirdPartyArray[index].prioritySelected = value;
        } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
          this.thirdPartyArray[index].reddawaySelected = value;
        }
      }
      console.log(this.thirdPartyArray);
    }
    this.invoiceDetails['values'] = [];
    this.invoiceDetails['values'] = this.invoiceDetails['values'].concat(this.outboundArray, this.inboundArray, this.thirdPartyArray);
    console.log('checkforcarrier', this.invoiceDetails);

    this.tableVables();
  }

  viewAssessorialDetails(item:any, type:any) {
    console.log('item', item);
    this.showTableForViewAssessorials = true;
    //this.viewAssessorialArray = item.assessorial;
    this.viewAssessorialArray = item;
    this.viewAssessorialArray.companyName = this.companyInformation.companyName;
    this.finalApAssess = 0;
    this.finalArAssess = 0;
    console.log('this.viewAssessorialArray', this.viewAssessorialArray);
    if (type === 'apAssess') {
      this.showApCost = true;
      this.showArCost = false;
      for (let i = 0; i < this.viewAssessorialArray.length; i++) {
        this.finalApAssess = Number(this.finalApAssess) + Number(this.viewAssessorialArray[i].apCost);
      }
      console.log(this.finalApAssess);
    } else {
      this.showApCost = false;
      this.showArCost = true;
      for (let i = 0; i < this.viewAssessorialArray.length; i++) {
        this.finalArAssess = this.finalArAssess + Number(this.viewAssessorialArray[i].arCost);
      }
    }
  
    // this.finalApAssess = 0;
    // this.finalArAssess = 0;
    // setTimeout(() => {
    //   $('#view-assessorial').modal('show');

    // }, 2000);
  }
  routeToInvoiceWorkBook() {
    if (this.selectedAnalyticsCodeData === undefined) {
      this.trafficDataEnable.values.forEach((obj:any) => {
        obj.rateResponse = JSON.stringify(obj.rateResponse)
        if (obj.fxfpRate !== null) {
          obj.fxfpRate = JSON.stringify(obj.fxfpRate);
        }
        if (obj.fxfeRate !== null) {
          obj.fxfeRate = JSON.stringify(obj.fxfeRate);
        }
        if (obj.yrcRate !== null) {
          obj.yrcRate = JSON.stringify(obj.yrcRate);
        }
        if (obj !== null) {
          obj.reddawayRate = JSON.stringify(obj.reddawayRate);
        }
      });
      this.trafficDataEnable.invalidData = this.invalidInputData;
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataEnable);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/trafficdatanew']);
    } else if (this.selectedAnalyticsCodeData !== undefined) {
      this.trafficDataSavedData.values.forEach((obj:any) => {
        obj.rateResponse = JSON.stringify(obj.rateResponse)
        if (obj.fxfpRate !== null) {
          obj.fxfpRate = JSON.stringify(obj.fxfpRate);
        }
        if (obj.fxfeRate !== null) {
          obj.fxfeRate = JSON.stringify(obj.fxfeRate);
        }
        if (obj.yrcRate !== null) {
          obj.yrcRate = JSON.stringify(obj.yrcRate);
        }
        if (obj !== null) {
          obj.reddawayRate = JSON.stringify(obj.reddawayRate);
        }
      });
      this.trafficDataSavedData.invalidData = this.invalidInputData;
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/trafficdatanew']);
    } else {
      let object = '';
      this.invoiceService.setSocketData(object);
      let uploaded = undefined;
      this.invoiceService.setUploadedData(uploaded);
      this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      // this.invoiceService.setTrafficDataEnable(this.trafficDataSavedData);
      this.router.navigate(['/trafficdatanew']);
    }
  }


  checkSpecialInstructionsCount(event:any) {
    console.log(event);
  }

  applyRuleduplicate(ruleFormValue:any) {
    console.log(ruleFormValue);
    let fullArray:any = [];
    this.fullArray = [];
    this.applyRuleValue = true;
    const assessorialValues = { liftGate: '', residential: '', limitedAccess: '', notify: '', insideDelivery: '', singleShipment: '', deliveryAppointmentRequired: '' };
    if (this.assessorialArrayRule.length > 0) {
      for (let a = 0; a < this.assessorialArrayRule.length; a++) {
        if (this.assessorialArrayRule[a].assessorialName === 'LiftGate Service') {
          assessorialValues.liftGate = this.assessorialArrayRule[a].charge;
        } else if (this.assessorialArrayRule[a].assessorialName === 'Residential Delivery') {
          assessorialValues.residential = this.assessorialArrayRule[a].charge;
        } else if (this.assessorialArrayRule[a].assessorialName === 'Limited Access Delivery') {
          assessorialValues.limitedAccess = this.assessorialArrayRule[a].charge;
        } else if (this.assessorialArrayRule[a].assessorialName === 'Notify') {
          assessorialValues.notify = this.assessorialArrayRule[a].charge;
        } else if (this.assessorialArrayRule[a].assessorialName === 'Single Shipment') {
          assessorialValues.singleShipment = this.assessorialArrayRule[a].charge;
        } else if (this.assessorialArrayRule[a].assessorialName === 'Delivery Appointment Required') {
          assessorialValues.deliveryAppointmentRequired = this.assessorialArrayRule[a].charge;
        } else {
          assessorialValues.insideDelivery = this.assessorialArrayRule[a].charge;
        }
      }
      this.finalAssessorial.push(assessorialValues);
    }
    const data = {
      type: ruleFormValue.carrierType,
      category: ruleFormValue.category,
      directions: ruleFormValue.directions,
      discount: ruleFormValue.discount,
      minCharge: ruleFormValue.minimumCharge,
      liftGate: assessorialValues.liftGate ? assessorialValues.liftGate : '',
      residential: assessorialValues.residential ? assessorialValues.residential : '',
      limitedAccessDelivery: assessorialValues.limitedAccess ? assessorialValues.limitedAccess : '',
      insideDelivery: assessorialValues.insideDelivery ? assessorialValues.insideDelivery : '',
      notify: assessorialValues.notify ? assessorialValues.notify : '',
      singleShipment: assessorialValues.singleShipment ? assessorialValues.singleShipment : '',
      deliveryAppointmentRequired: assessorialValues.deliveryAppointmentRequired ? assessorialValues.deliveryAppointmentRequired : '',
      charge: ruleFormValue.charge,
      presentFakValue: ruleFormValue.presentFakValue,
      fakRange: this.finalFakArray.length > 0 ? this.finalFakArray : [],
      fakValue: this.finalFakClass.length > 0 ? this.finalFakClass : [],
      specialRule: ruleFormValue.specialRule,
      specificZipFlag: ruleFormValue.specificZipFlag,
      stateFrom: this.specificStateFrom.length > 0 ? this.specificStateFrom : [],
      stateTo: this.specificStateTo.length > 0 ? this.specificStateTo : [],
      cityFrom: this.specificCityFrom.length > 0 ? this.specificCityFrom : [],
      cityTo: this.specificCityTo.length > 0 ? this.specificCityTo : []
    };
    this.invoiceDetails['values'].forEach((element:any) => {
      let apiObject = {
        carrier: this.invoiceDetails['carrier'],
        typeOfInvoice: element.typeOfInvoice,
        originZip: element.originZip,
        originState: element.originState,
        destinationZip: element.destinationZip,
        destinationState: element.destinationState,
        pallets: element.pallets,
        class: element.class,
        weight: element.weight,
        fuelCharge: element.fuelCharge,
        invoiceAmount: element.invoiceAmount,
        assessorial: element.assessorial,
        companyId: this.companyInformation.id,
        pieces: element.pallets,
        assessorialCharge: element.assessorialCharge,
        rateResponse: element.rateResponse,
        slNo: element.slNo,
        id: element.id,
        shipmentDate: element.shipmentDate,
        selected: element.selected
      }
      fullArray.push(apiObject);
    });
    console.log('full', fullArray);
    //  finalData = {
    //   directions: this.arrayValues[s].directions,
    //   fakRange: JSON.stringify(this.arrayValues[s].fakRange.length > 0 ? this.arrayValues[s].fakRange : []),
    //   fak: JSON.stringify(this.arrayValues[s].fakValue.length > 0 ? this.arrayValues[s].fakValue : []),
    //   classRange: '',
    //   customerId: 0,
    //   category: this.arrayValues[s].category,
    //   type: this.arrayValues[s].type,
    //   classification: [],
    //   specificStateList1: JSON.stringify(this.arrayValues[s].stateFrom.length > 0 ? this.arrayValues[s].stateFrom : []),
    //   specificStateList2: JSON.stringify(this.arrayValues[s].stateTo.length > 0 ? this.arrayValues[s].stateTo : []),
    //   specificCityList1: JSON.stringify(this.arrayValues[s].cityFrom.length > 0 ? this.arrayValues[s].cityFrom : []),
    //   specificCityList2: JSON.stringify(this.arrayValues[s].cityTo.length > 0 ? this.arrayValues[s].cityTo : []),
    //   specificStateFlag: this.arrayValues[s].specialRule,
    //   specificZipFlag: this.arrayValues[s].specificZipFlag,
    //   liftGate: this.arrayValues[s].liftGate,
    //   residential: this.arrayValues[s].residential,
    //   limitedAccessDelivery: this.arrayValues[s].limitedAccessDelivery,
    //   insideDelivery: this.arrayValues[s].insideDelivery,
    //   notify: this.arrayValues[s].notify,
    //   singleShipment: this.arrayValues[s].singleShipment,
    //   deliveryAppointmentRequired: this.arrayValues[s].deliveryAppointmentRequired,
    //   discount: this.arrayValues[s].discount,
    //   minCharge: this.arrayValues[s].minCharge,
    //   createdOn: ''
    // };
    //  this.invoiceService.applyNewRule(fullArray).subscribe((res:any) => {
    //    console.log(res);
    //  })
    $('#RuleModal').modal('hide');
  }

  addWorkbookRules() {
    this.showAddRule = true;
  }
  applyRule(ruleFormValue:any) {
    console.log('customerForm', ruleFormValue, this.finalDirections);
    let fromTo;
    let fakClass;
    let fullArray:any = [];
    this.applyRuleValue = true;
    this.arrayValues = [];
    if (ruleFormValue.category === '' && ruleFormValue.carrierType === '' &&
      ruleFormValue.directions === '' && ruleFormValue.discount === '' &&
      ruleFormValue.minimumCharge === '') {
      this.showErrorMessageOnAddRules = true;
      this.arrayValues = [];
    } else {
      if (ruleFormValue.category === '' || ruleFormValue.carrierType === '' ||
        ruleFormValue.directions === '' || ruleFormValue.discount === '' ||
        ruleFormValue.minimumCharge === '') {
        this.showErrorMessageOnAddRules = true;
        // this.enableSaveButton = false;
      } else {
        this.showErrorMessageOnAddRules = true;
        if (this.fakArray.length > 0) {
          this.showFak = true;
          for (let i = 0; i < this.fakArray.length; i++) {
            if (this.fakArray[i].fakRangeTo !== '') {
              fromTo = this.fakArray[i].fakRangeFrom + '-' + this.fakArray[i].fakRangeTo;
              fakClass = this.fakArray[i].fakValue;
              this.finalFakArray.push(fromTo);
              this.finalFakClass.push(fakClass);
            } else if (this.fakArray[i].fakRangeTo === '') {
              fromTo = this.fakArray[i].fakRangeFrom;
              fakClass = this.fakArray[i].fakValue;
              this.finalFakArray.push(fromTo);
              this.finalFakClass.push(fakClass);
            } else {

            }
          }
        } else {
          this.showFak = false;
        }
        const assessorialValues = { liftGate: '', residential: '', limitedAccess: '', notify: '', insideDelivery: '', singleShipment: '', deliveryAppointmentRequired: '' };
        if (this.assessorialArrayRule.length > 0) {
          for (let a = 0; a < this.assessorialArrayRule.length; a++) {
            if (this.assessorialArrayRule[a].assessorialName === 'LiftGate Service') {
              assessorialValues.liftGate = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Residential Delivery') {
              assessorialValues.residential = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Limited Access Delivery') {
              assessorialValues.limitedAccess = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Notify') {
              assessorialValues.notify = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Single Shipment') {
              assessorialValues.singleShipment = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Delivery Appointment Required') {
              assessorialValues.deliveryAppointmentRequired = this.assessorialArrayRule[a].charge;
            } else {
              assessorialValues.insideDelivery = this.assessorialArrayRule[a].charge;
            }
          }
          this.finalAssessorial.push(assessorialValues);
        }
        let formCarrierType;
        if (ruleFormValue.carrierType === 'FEDEX_FREIGHT_ECONOMY') {
          formCarrierType = 'FEDEX ECONOMY'
        } else if (ruleFormValue.carrierType === 'FEDEX_FREIGHT_PRIORITY') {
          formCarrierType = 'FEDEX PRIORITY'
        } else {
          formCarrierType = ruleFormValue.carrierType;
        }
        const data = {
          type: formCarrierType,
          category: ruleFormValue.category,
          directions: ruleFormValue.directions,
          discount: ruleFormValue.discount,
          minCharge: ruleFormValue.minimumCharge,
          liftGate: assessorialValues.liftGate ? assessorialValues.liftGate : '',
          residential: assessorialValues.residential ? assessorialValues.residential : '',
          limitedAccessDelivery: assessorialValues.limitedAccess ? assessorialValues.limitedAccess : '',
          insideDelivery: assessorialValues.insideDelivery ? assessorialValues.insideDelivery : '',
          notify: assessorialValues.notify ? assessorialValues.notify : '',
          singleShipment: assessorialValues.singleShipment ? assessorialValues.singleShipment : '',
          deliveryAppointmentRequired: assessorialValues.deliveryAppointmentRequired ? assessorialValues.deliveryAppointmentRequired : '',
          charge: ruleFormValue.charge,
          presentFakValue: ruleFormValue.presentFakValue,
          fakRange: JSON.stringify(this.finalFakArray.length > 0 ? this.finalFakArray : []),
          fakValue: JSON.stringify(this.finalFakClass.length > 0 ? this.finalFakClass : []),
          fak: JSON.stringify(this.finalFakClass.length > 0 ? this.finalFakClass : []),
          specialRule: ruleFormValue.specialRule,
          specificZipFlag: ruleFormValue.specificZipFlag,
          stateFrom: this.specificStateFrom.length > 0 ? this.specificStateFrom : [],
          stateTo: this.specificStateTo.length > 0 ? this.specificStateTo : [],
          cityFrom: this.specificCityFrom.length > 0 ? this.specificCityFrom : [],
          cityTo: this.specificCityTo.length > 0 ? this.specificCityTo : [],
          sameRule: true,
          ruleExist : true
        };
        if (this.arrayValues.length > 0) {
          let arrayValuesNew = [];

          if (this.temporaryArray.length > 0) {
            arrayValuesNew = this.companyRulesArray.concat(this.temporaryArray);
          } else {
            arrayValuesNew = this.companyRulesArray;

          }
          const sameRules = arrayValuesNew.filter(function (obj:any) {
            return obj.directions === data.directions;
          });
          if (sameRules.length > 0) {
            this.showErrorMessageOnSameRule = true;
            data.sameRule = true;
            console.log(data);
            this.arrayValues.push(data);

            // this.enableSaveButton = false;
          } else {
            data.sameRule = false;
            console.log(data);
            this.arrayValues.push(data);
            console.log('this.arrayValues', this.arrayValues);
            this.showTableDetail = true;
            this.showErrorMessageOnAddRules = false;
            // this.enableSaveButton = true;
          }
        } else {
          let arrayValuesNew:any = [];
          let temporaryValuesNew:any = [];
          this.companyRulesArray.forEach((obj:any) => {
            obj.sameRule = true;
          })
          // .filter((e:any) => arr[e]).map((e:any) => arr[e]);

          arrayValuesNew = this.companyRulesArray.filter(function (obj:any) {
            if (obj.type === data.type) {
               obj.directions === data.directions;
            }
          });
          // arrayValuesNew = this.companyRulesArray.filter((obj1:any) => )
          if (this.temporaryArray.length > 0) {
            temporaryValuesNew = this.temporaryArray.filter(function (obj:any) {
              if (obj.type === data.type) {
                 obj.directions === data.directions;
              }
            });
          }
          console.log(arrayValuesNew);

          if (arrayValuesNew.length > 0) {
            let obj;
            for (let j = 0; j < arrayValuesNew.length; j++) {
              obj = arrayValuesNew[j];
              console.log(data);
              console.log(j);
              if (obj.category === data.category) {
                console.log('obj', obj);
                if (obj.directions === data.directions) {
                  if (data.directions === 'INTERSTATE' || data.directions === 'REGIONAL' || data.directions === 'INTER REGIONAL' || data.directions === 'REGIONAL INDIRECT') {
                    arrayValuesNew[j].sameRule = false;
                    data.sameRule = true;
                    data.ruleExist = true;
                    if (j === arrayValuesNew.length - 1) {
                      if (temporaryValuesNew.length > 0) {
                        this.arrayValues = [];
                        // Swal(data.directions + ' rule already exists!', {
                        //   icon: "error"
                        // });
                        //  for (let k = 0; k < temporaryValuesNew.length ; k++) {

                        //  }
                      } else {
                        obj.sameRule = false;
                        obj.ruleExist = false;
                        data.sameRule = true;
                        data.ruleExist = true;
                        this.arrayValues.push(data);

                      }
                    }

                  } else if (data.directions === 'INTRASTATE') {
                    if (obj.category === data.category) {
                      console.log(data, obj);

                      if ((obj.specificStateList1[0] === data.stateFrom[0]) && (obj.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                        this.arrayValues = [];
                        console.log('12')
                        obj.sameRule = false;
                        obj.ruleExist = false;

                        data.sameRule = true;
                        data.ruleExist = true;
                        if (j === arrayValuesNew.length - 1) {
                          if (temporaryValuesNew.length > 0) {
                            let element;
                            for (let k = 0; k < temporaryValuesNew.length; k++) {
                              element = temporaryValuesNew[k];
                              if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                                if (k === temporaryValuesNew.length - 1) {
                                  this.arrayValues = [];
                                  // Swal.fire(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                  //   icon: "error"
                                  // });
                                }
                              } else {
                                obj.sameRule = false;
                                data.sameRule = true;
                                data.ruleExist = true;
                                this.arrayValues.push(data);
                              }
                            }
                          } else {
                            obj.sameRule = false;
                            obj.ruleExist = false;
                            data.sameRule = true;
                            data.ruleExist = true;
                            this.arrayValues.push(data);
                          }
                        }
                        //   swal(data.directions + " rule with " + data.stateFrom[0] + ' already exists!', {
                        //     icon: "error"
                        //  });
                        break;
                        //  alert(data.directions + " rule with " + data.stateFrom[0] + ' laready exists');
                      } else if ((obj.specificCityList1[0] === data.cityFrom[0]) && (obj.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                        this.arrayValues = [];
                        console.log(data, obj);
                        obj.sameRule = false;
                        data.sameRule = true;
                        data.ruleExist = true;
                        console.log(j)
                        // if (j === arrayValuesNew.length - 1) {
                        if (temporaryValuesNew.length > 0) {
                          let element;
                          for (let k = 0; k < temporaryValuesNew.length; k++) {
                            element = temporaryValuesNew[k];
                            if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else {
                              obj.sameRule = false;
                              obj.ruleExist = false;
                              data.sameRule = true;
                              data.ruleExist = true;
                              this.arrayValues.push(data);
                              break;
                            }
                          }
                        } else {
                          obj.sameRule = false;
                          obj.ruleExist = false;
                          data.sameRule = true;
                          data.ruleExist = true;
                          this.arrayValues.push(data);
                          break;

                        }
                        //  }


                      } else {
                        obj.sameRule = true;
                        data.sameRule = true;
                        data.ruleExist = false;
                        // this.arrayValues.push(data);
                        if (j === arrayValuesNew.length - 1) {
                          if (temporaryValuesNew.length > 0) {
                            let element;
                            for (let k = 0; k < temporaryValuesNew.length; k++) {
                              element = temporaryValuesNew[k];
                              if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                                if (k === temporaryValuesNew.length - 1) {
                                  this.arrayValues = [];
                                  // swal(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                  //   icon: "error"
                                  // });
                                }
                              } else if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                                if (k === temporaryValuesNew.length - 1) {
                                  this.arrayValues = [];
                                  // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                                  //   icon: "error"
                                  // });
                                }
                              } else {
                                obj.sameRule = false;
                                data.sameRule = true;
                                data.ruleExist = false;
                                this.arrayValues.push(data);
                              }
                            }
                          } else {
                            obj.sameRule = false;
                            data.sameRule = true;
                            data.ruleExist = false;
                            this.arrayValues.push(data);

                          }
                        }
                        // break;
                      }
                    } else {
                      obj.sameRule = false;
                      data.sameRule = true;
                      data.ruleExist = false;
                      // this.arrayValues.push(data);
                      if (j === arrayValuesNew.length - 1) {
                        this.arrayValues.push(data);
                      }
                    }
                  } else if (data.directions === 'SPECIAL RULES') {
                    if ((obj.specificStateList1[0] === data.stateFrom[0]) && (obj.specificStateList2[0] === data.stateTo[0]) && (obj.specificStateList1.length > 0 && obj.specificStateList2.length > 0)
                      && (data.stateFrom.length > 0 && data.stateTo.length > 0)) {
                      obj.sameRule = false;
                      obj.ruleExist = false;

                      data.sameRule = true;
                      data.ruleExist = true;

                      this.arrayValues.push(data);
                      console.log('data');
                      break;

                    } else if ((obj.specificCityList1[0] === data.cityFrom[0]) && (obj.specificCityList2[0] === data.cityTo[0])) {
                      obj.sameRule = false;
                      data.sameRule = true;
                      obj.ruleExist = false;

                      data.ruleExist = true;
                      this.arrayValues.push(data);
                      console.log('data2');
                      break;

                      // } 
                      // else if ((obj.specificStateList1[0] === data.stateFrom[0]) && (obj.specificCityList2[0] === data.stateTo[0])) {
                      //   obj.sameRule = false;
                      //   data.sameRule = true;
                      //   data.ruleExist = true;
                      //   this.arrayValues.push(data);

                    } else if ((obj.specificCityList1[0] === data.cityFrom[0]) && (obj.specificStateList2[0] === data.stateTo[0]) &&
                      (obj.specificCityList1.length > 0 && obj.specificStateList2.length > 0) && (data.cityFrom.length > 0 && data.stateTo.length > 0)) {
                      obj.sameRule = false;
                      data.sameRule = true;
                      data.ruleExist = true;
                      obj.ruleExist = false;

                      this.arrayValues.push(data);
                      console.log('data2');
                      break;
                    } else if ((obj.specificCityList2[0] === data.cityTo[0]) && (obj.specificStateList1[0] === data.stateFrom[0]) &&
                      (obj.specificCityList2.length > 0 && obj.specificStateList1.length > 0) && (data.cityTo.length > 0 && data.stateFrom.length > 0)) {
                      obj.sameRule = false;
                      data.sameRule = true;
                      obj.ruleExist = false;

                      data.ruleExist = true;
                      this.arrayValues.push(data);
                      console.log('data2');
                      break;
                    } else {
                      obj.sameRule = true;
                      data.sameRule = true;
                      data.ruleExist = false;
                      obj.ruleExist = false;

                      this.arrayValues.push(data);
                      console.log('data3');
                      break;

                    }
                  } else if (data.directions === 'REGIONAL DIRECT INTRASTATE') {
                    if ((obj.specificStateList1[0] === data.stateFrom[0]) && (obj.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                      this.arrayValues = [];
                      console.log('12')
                      obj.sameRule = false;
                      obj.ruleExist = false;

                      data.sameRule = true;
                      data.ruleExist = true;
                      if (j === arrayValuesNew.length - 1) {
                        if (temporaryValuesNew.length > 0) {
                          let element;
                          for (let k = 0; k < temporaryValuesNew.length; k++) {
                            element = temporaryValuesNew[k];
                            if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else {
                              obj.sameRule = false;
                              data.sameRule = true;
                              obj.ruleExist = false;

                              data.ruleExist = true;
                              this.arrayValues.push(data);
                            }
                          }
                        } else {
                          obj.sameRule = false;
                          data.sameRule = true;
                          obj.ruleExist = false;

                          data.ruleExist = true;
                          this.arrayValues.push(data);
                        }
                      }
                      //   swal(data.directions + " rule with " + data.stateFrom[0] + ' already exists!', {
                      //     icon: "error"
                      //  });
                      break;
                      //  alert(data.directions + " rule with " + data.stateFrom[0] + ' laready exists');
                    } else if ((obj.specificCityList1[0] === data.cityFrom[0]) && (obj.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                      this.arrayValues = [];
                      console.log(data, obj);
                      obj.sameRule = false;
                      obj.ruleExist = false;

                      data.sameRule = true;
                      data.ruleExist = true;
                      console.log(j)
                      // if (j === arrayValuesNew.length - 1) {
                      if (temporaryValuesNew.length > 0) {
                        let element;
                        for (let k = 0; k < temporaryValuesNew.length; k++) {
                          element = temporaryValuesNew[k];
                          if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                            if (k === temporaryValuesNew.length - 1) {
                              this.arrayValues = [];
                              // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                              //   icon: "error"
                              // });
                            }
                          } else {
                            obj.sameRule = false;
                            data.sameRule = true;
                            data.ruleExist = true;
                            obj.ruleExist = false;

                            this.arrayValues.push(data);
                            break;
                          }
                        }
                      } else {
                        obj.sameRule = false;
                        data.sameRule = true;
                        obj.ruleExist = false;

                        data.ruleExist = true;
                        this.arrayValues.push(data);
                        break;

                      }
                      //  }


                    } else {
                      obj.sameRule = true;
                      data.sameRule = true;
                      obj.ruleExist = false;

                      data.ruleExist = false;
                      // this.arrayValues.push(data);
                      if (j === arrayValuesNew.length - 1) {
                        if (temporaryValuesNew.length > 0) {
                          let element;
                          for (let k = 0; k < temporaryValuesNew.length; k++) {
                            element = temporaryValuesNew[k];
                            if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else {
                              obj.sameRule = false;
                              data.sameRule = true;
                              obj.ruleExist = false;

                              data.ruleExist = false;
                              this.arrayValues.push(data);
                            }
                          }
                        } else {
                          obj.sameRule = false;
                          data.sameRule = true;
                          obj.ruleExist = false;

                          data.ruleExist = false;
                          this.arrayValues.push(data);

                        }
                      }
                      // break;
                    }
                  } else if (data.directions === 'REGIONAL DIRECT INTERSTATE') {
                    if ((obj.specificStateList1[0] === data.stateFrom[0]) && (obj.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                      this.arrayValues = [];
                      console.log('12')
                      obj.sameRule = false;
                      data.sameRule = true;
                      obj.ruleExist = false;

                      data.ruleExist = true;
                      if (j === arrayValuesNew.length - 1) {
                        if (temporaryValuesNew.length > 0) {
                          let element;
                          for (let k = 0; k < temporaryValuesNew.length; k++) {
                            element = temporaryValuesNew[k];
                            if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else {
                              obj.sameRule = false;
                              obj.ruleExist = false;

                              data.sameRule = true;
                              data.ruleExist = true;
                              this.arrayValues.push(data);
                            }
                          }
                        } else {
                          obj.sameRule = false;
                          data.sameRule = true;
                          obj.ruleExist = false;

                          data.ruleExist = true;
                          this.arrayValues.push(data);
                        }
                      }
                      //   swal(data.directions + " rule with " + data.stateFrom[0] + ' already exists!', {
                      //     icon: "error"
                      //  });
                      break;
                      //  alert(data.directions + " rule with " + data.stateFrom[0] + ' laready exists');
                    } else if ((obj.specificCityList1[0] === data.cityFrom[0]) && (obj.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                      this.arrayValues = [];
                      console.log(data, obj);
                      obj.ruleExist = false;

                      obj.sameRule = false;
                      data.sameRule = true;
                      data.ruleExist = true;
                      console.log(j)
                      // if (j === arrayValuesNew.length - 1) {
                      if (temporaryValuesNew.length > 0) {
                        let element;
                        for (let k = 0; k < temporaryValuesNew.length; k++) {
                          element = temporaryValuesNew[k];
                          if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                            if (k === temporaryValuesNew.length - 1) {
                              this.arrayValues = [];
                              // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                              //   icon: "error"
                              // });
                            }
                          } else {
                            obj.sameRule = false;
                            data.sameRule = true;
                            obj.ruleExist = false;

                            data.ruleExist = true;
                            this.arrayValues.push(data);
                            break;
                          }
                        }
                      } else {
                        obj.sameRule = false;
                        obj.ruleExist = false;

                        data.sameRule = true;
                        data.ruleExist = true;
                        this.arrayValues.push(data);
                        break;

                      }
                      //  }


                    } else {
                      obj.sameRule = true;
                      // obj.ruleExist = false;

                      data.sameRule = true;
                      data.ruleExist = false;
                      // this.arrayValues.push(data);
                      if (j === arrayValuesNew.length - 1) {
                        if (temporaryValuesNew.length > 0) {
                          let element;
                          for (let k = 0; k < temporaryValuesNew.length; k++) {
                            element = temporaryValuesNew[k];
                            if ((element.specificStateList1[0] === data.stateFrom[0]) && (element.specificStateList1.length > 0 && data.stateFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.stateFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else if ((element.specificCityList1[0] === data.cityFrom[0]) && (element.specificCityList1.length > 0 && data.cityFrom.length > 0)) {
                              if (k === temporaryValuesNew.length - 1) {
                                this.arrayValues = [];
                                // swal(data.directions + ' rule ' + data.cityFrom[0] + ' already exists!', {
                                //   icon: "error"
                                // });
                              }
                            } else {
                              obj.sameRule = false;
                              data.sameRule = true;
                              // obj.ruleExist = false;

                              data.ruleExist = false;
                              this.arrayValues.push(data);
                            }
                          }
                        } else {
                          obj.sameRule = false;
                          data.sameRule = true;
                          // obj.ruleExist = false;

                          data.ruleExist = false;
                          this.arrayValues.push(data);

                        }
                      }
                      // break;
                    }
                  }
                } else {
                  obj.sameRule = true;
                  data.sameRule = true;
                  data.ruleExist = false;
                  if (j === arrayValuesNew.length - 1) {
                    this.arrayValues.push(data);
                  }
                }
              } else {
                obj.sameRule = true;
                data.sameRule = true;
                data.ruleExist = false;
                if (j === arrayValuesNew.length - 1) {
                  this.arrayValues.push(data);
                }
              }
            }
          } else {
            // obj.sameRule = false;
            data.sameRule = true;
            data.ruleExist = true;
            // this.arrayValues.push(data);
            // if (j === arrayValuesNew.length - 1) {
            this.arrayValues.push(data);
            // }
          }


          this.showTableDetail = true;
          this.showErrorMessageOnAddRules = false;
          console.log('this.arrayValues New', arrayValuesNew);
          if (arrayValuesNew.length > 0) {
          this.existingRulesChanged.push(arrayValuesNew[0]);
          } else {

          }
          console.log('existingRulesChanged', this.existingRulesChanged);
          if (arrayValuesNew.length > 1) {
            arrayValuesNew.forEach((ele1:any) => {
              this.companyRulesArray.forEach((obj1:any) => {
                if (ele1.id === obj1.id) {
                  obj1.ruleExist = ele1.ruleExist;
                }
              })
              
            })
          }

        }

            console.log('this.arrayValues New', this.companyRulesArray);

        console.log('this.arrayValues New', this.arrayValues);
        this.concatArray(this.arrayValues)
        this.ruleForm.patchValue({
          category: '',
          directions: '',
          discount: '',
          minimumCharge: '',
          assessorialName: '',
          charge: '',
          presentFakValue: 'No',
          fakRange: '',
          fakValue: '',
          specialRule: '',
          fromCityState: '',
          toCityState: ''
        });
        this.specificCityFrom = [];
        this.specificCityTo = [];
        this.assessorialArray = [];
        this.finalFakArray = [];
        this.finalFakClass = [];
        this.fakArray = [];
        this.showFakValues = false;
        this.showFAKTable = false;
        this.showAssessorials = false;
        this.assessorialArrayRule = [];
      }
    }
    this.ruleAppliedArray = [];
    this.invoiceDetails['values'].forEach((element:any) => {
      // if (element.showRule !== true) {
      let apiObject = {
        carrier: this.invoiceDetails['carrier'],
        typeOfInvoice: element.typeOfInvoice,
        originZip: element.originZip,
        originState: element.originState,
        destinationZip: element.destinationZip,
        destinationState: element.destinationState,
        pallets: element.pallets,
        class: element.class,
        weight: element.weight,
        fuelCharge: element.fuelCharge,
        invoiceAmount: element.invoiceAmount,
        assessorial: element.assessorial,
        companyId: this.companyInformation.id,
        pieces: element.pallets,
        assessorialCharge: element.assessorialCharge,
        rateResponse: element.rateResponse,
        slNo: element.slNo,
        id: element.id,
        shipmentDate: element.shipmentDate,
        selected: element.selected,
        rules: element.rules,
        selectedCarrier: this.invoiceDetails['carrier']

      }

      fullArray.push(apiObject);
      // } 
      // else {
      //   this.ruleAppliedArray.push(element);
      // }
    });
    console.log('full', fullArray);
    console.log('array', this.arrayValues);
    this.fullArray = fullArray;
    // this.updateNewRule(ruleFormValue, fullArray);

  }

  concatArray(value:any) {
    let finalData;
    let newlyAddedArray = [];
    // this.companyResponse[0].BusinessRulesNew = [];
    if (this.arrayValues.length > 0) {
      for (let s = 0; s < this.arrayValues.length; s++) {
        if (this.arrayValues[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          this.arrayValues[s].type = 'FEDEX ECONOMY';
        } else if (this.arrayValues[s].type === 'FEDEX_FREIGHT_PRORITY') {
          this.arrayValues[s].type = 'FEDEX PRIORITY';
        } else {
          this.arrayValues[s].type = this.arrayValues[s].type;
        }
        finalData = {
          directions: this.arrayValues[s].directions,
          fakRange: this.arrayValues[s].fakRange.length > 0 ? this.arrayValues[s].fakRange : [],
          fak: this.arrayValues[s].fakValue.length > 0 ? this.arrayValues[s].fakValue : [],
          fakValue: this.arrayValues[s].fakValue.length > 0 ? this.arrayValues[s].fakValue : [],
          classRange: '',
          customerId: this.companyInformation.id,
          category: this.arrayValues[s].category,
          type: this.arrayValues[s].type,
          classification: [],
          specificStateList1: this.arrayValues[s].stateFrom.length > 0 ? this.arrayValues[s].stateFrom : [],
          specificStateList2: this.arrayValues[s].stateTo.length > 0 ? this.arrayValues[s].stateTo : [],
          specificCityList1: this.arrayValues[s].cityFrom.length > 0 ? this.arrayValues[s].cityFrom : [],
          specificCityList2: this.arrayValues[s].cityTo.length > 0 ? this.arrayValues[s].cityTo : [],
          specificStateFlag: this.arrayValues[s].specialRule,
          specificZipFlag: this.arrayValues[s].specificZipFlag,
          liftGate: this.arrayValues[s].liftGate,
          residential: this.arrayValues[s].residential,
          limitedAccessDelivery: this.arrayValues[s].limitedAccessDelivery,
          insideDelivery: this.arrayValues[s].insideDelivery,
          notify: this.arrayValues[s].notify,
          singleShipment: this.arrayValues[s].singleShipment,
          deliveryAppointmentRequired: this.arrayValues[s].deliveryAppointmentRequired,
          discount: this.arrayValues[s].discount,
          minCharge: this.arrayValues[s].minCharge,
          createdOn: new Date(),
          toggleEnabled: true,
          sameRule: this.arrayValues[s].sameRule,
          ruleExist : this.arrayValues[s].ruleExist,
          companyId: this.companyInformation.id,
          id: 0
        };
        let finalData1 = {
          directions: this.arrayValues[s].directions,
          fakRange: JSON.stringify(this.arrayValues[s].fakRange.length > 0 ? this.arrayValues[s].fakRange : []),
          fak: JSON.stringify(this.arrayValues[s].fakValue.length > 0 ? this.arrayValues[s].fakValue : []),
          fakValue: JSON.stringify(this.arrayValues[s].fakValue.length > 0 ? this.arrayValues[s].fakValue : []),
          classRange: '',
          customerId: this.companyInformation.id,
          category: this.arrayValues[s].category,
          type: this.arrayValues[s].type,
          classification: [],
          specificStateList1: JSON.stringify(this.arrayValues[s].stateFrom.length > 0 ? this.arrayValues[s].stateFrom : []),
          specificStateList2: JSON.stringify(this.arrayValues[s].stateTo.length > 0 ? this.arrayValues[s].stateTo : []),
          specificCityList1: JSON.stringify(this.arrayValues[s].cityFrom.length > 0 ? this.arrayValues[s].cityFrom : []),
          specificCityList2: JSON.stringify(this.arrayValues[s].cityTo.length > 0 ? this.arrayValues[s].cityTo : []),
          specificStateFlag: this.arrayValues[s].specialRule,
          specificZipFlag: this.arrayValues[s].specificZipFlag,
          liftGate: this.arrayValues[s].liftGate,
          residential: this.arrayValues[s].residential,
          limitedAccessDelivery: this.arrayValues[s].limitedAccessDelivery,
          insideDelivery: this.arrayValues[s].insideDelivery,
          notify: this.arrayValues[s].notify,
          singleShipment: this.arrayValues[s].singleShipment,
          deliveryAppointmentRequired: this.arrayValues[s].deliveryAppointmentRequired,
          discount: this.arrayValues[s].discount,
          minCharge: this.arrayValues[s].minCharge,
          createdOn: new Date(),

          companyId: this.companyInformation.id,
          id: 0
        };
        // this.companyRulesArray.push(finalData);
        this.temporaryArray.push(finalData);
        console.log('this.temporaryArray', this.temporaryArray);
        this.temporaryArray.forEach((el:any, index:any) => {
          el.tempId = index + 1;
        })
        console.log(this.companyRulesArray);
        this.filterArrayValues(this.companyRulesArray);

      }
      // this.companyResponse[0].BusinessRulesNew = this.companyResponse[0].BusinessRulesNew.concat(newlyAddedArray);
      // console.log(this.companyResponse);
    }
  }
  getFromCity(from:any, rules:any, form:any) {
    console.log('from', from, rules, form);
    this.specificStateFrom = [];
    this.specificCityFrom = [];
    if (from !== '') {
      from = from.toUpperCase();
      if (rules === 'SPECIAL RULES') {
        const variableOne = from.charAt(0);
        const newOne = /^[0-9]+$/i.test(variableOne);
        if (newOne === false) {
          if (form.carrierType === 'REDDAWAY' && form.directions === 'SPECIAL RULES') {
            if (from === 'ALL WEST') {
              from = from;
              this.showErrorMessageSpecificStateFrom = false;
              this.specificStateFrom.push(from);
              this.specificCityFrom = [];
              console.log('this.specificStateFrom', this.specificStateFrom);
            } else {
              if (this.reddawayRuleStates.length > 0) {
                for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                  if (from === this.reddawayRuleStates[e]) {
                    from = from;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    this.specificCityFrom = [];
                    console.log('this.specificStateFrom', this.specificStateFrom);
                    break;
                  } else {
                    this.showErrorMessageSpecificStateFrom = true;
                  }
                }
              }
            }
          } else if (form.carrierType === 'YRC' && form.directions === 'SPECIAL RULES') {
            from.toUpperCase();
            if (from === 'ALL') {
              from = from;
              this.showErrorMessageSpecificStateFrom = false;
              this.specificStateFrom.push(from);
              this.specificCityFrom = [];
              console.log('this.specificStateFrom', this.specificStateFrom);
            } else {
              if (this.states.length > 0) {
                for (let e = 0; e < this.states.length; e++) {
                  if (from === this.states[e]) {
                    from = from;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    this.specificCityFrom = [];
                    break;
                  }
                  else {
                    this.showErrorMessageSpecificStateFrom = true;
                    this.specificStateFrom = [];
                    this.specificCityFrom = [];
                  }
                }
              }
            }
          } else if (form.carrierType === 'FEDEX PRIORITY' ||
            form.carrierType === 'FEDEX ECONOMY' && form.directions === 'SPECIAL RULES') {
            from.toUpperCase();
            if (from === 'ALL') {
              from = from;
              this.showErrorMessageSpecificStateFrom = false;
              this.specificStateFrom.push(from);
              this.specificCityFrom = [];
              console.log('this.specificStateFrom', this.specificStateFrom);
            } else {
              if (this.states.length > 0) {
                for (let e = 0; e < this.states.length; e++) {
                  if (from === this.states[e]) {
                    from = from;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    this.specificCityFrom = [];
                    break;
                  }
                  else {
                    this.showErrorMessageSpecificStateFrom = true;
                    this.specificStateFrom = [];
                    this.specificCityFrom = [];
                  }
                }
              }
            }
          } else if (form.carrierType === 'REDDAWAY' && rules === 'REGIONAL DIRECT INTRASTATE') {
            if (from == 'SCA') {
              this.showErrorMessageSpecificStateFrom = false;
              this.specificStateFrom.push(from.toUpperCase().slice(1, 3));
              this.specificStateTo.push(from.toUpperCase().slice(1, 3));
              let cityFrom = '900-935';
              this.specificCityFrom.push(cityFrom);
              this.specificCityTo.push(cityFrom);
              this.ruleForm.patchValue({
                specificZipFlag: 'true', specialRule: 'false'
              });
            } else {
              from.toUpperCase();
              if (this.reddawayRuleStates.length > 0) {
                for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                  if (from === this.reddawayRuleStates[e]) {
                    from = from;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    this.specificStateTo.push(from);
                    this.specificCityFrom = [];
                    this.specificCityTo = [];
                    console.log('this.specificStateFrom 12325', this.specificStateFrom);
                    this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                    break;
                  } else {
                    this.showErrorMessageSpecificStateFrom = true;
                  }
                }
              }
            }
          } else if (form.carrierType === 'REDDAWAY' && rules == 'REGIONAL DIRECT INTERSTATE') {
            console.log('910');
            if (from == 'SCA') {
              this.showErrorMessageSpecificStateFrom = false;
              this.specificStateFrom.push(from.toUpperCase().slice(1, 3));
              let cityFrom = '900-935';
              this.specificCityFrom.push(cityFrom);
              // this.specificStateTo.push(from.toUpperCase().slice(1, 3));
              // let cityFrom = '900-935';
              // this.specificCityFrom.push(cityFrom);
              // this.specificCityTo.push(cityFrom);
              this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'true' });
            } else {
              from.toUpperCase();
              if (this.reddawayRuleStates.length > 0) {
                for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                  if (from === this.reddawayRuleStates[e]) {
                    from = from;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    //   this.specificStateTo.push(from);     
                    // this.specificCityFrom = [];
                    // this.specificCityTo = [];
                    console.log('this.specificStateFrom 1232', this.specificStateFrom);
                    this.ruleForm.patchValue({ specialRule: 'true', specificZipFlag: 'false' });
                    break;
                  } else {
                    this.showErrorMessageSpecificStateFrom = true;
                  }
                }
              }
            }
          } else {
            if (this.states.length > 0) {
              for (let e = 0; e < this.states.length; e++) {
                if (from === this.states[e]) {
                  from = from;
                  this.showErrorMessageSpecificStateFrom = false;
                  this.specificStateFrom.push(from);
                  this.specificCityFrom = [];
                  break;
                }
                else {
                  this.showErrorMessageSpecificStateFrom = true;
                  this.specificStateFrom = [];
                  this.specificCityFrom = [];
                }
              }
            }
          }
        } else {
          this.pricingInfoService.getCityState(from).subscribe(getArrayValues => {
            this.getZipcodeValues = getArrayValues;
            if (this.getZipcodeValues.length > 0) {
              for (let t = 0; t < this.getZipcodeValues.length; t++) {
                if (from === this.getZipcodeValues[t].zipCode) {
                  from = this.getZipcodeValues[t].zipCode;
                  this.reddawayState = this.getZipcodeValues[t].state;
                  this.showErrorMessageSpecificStateFrom = false;
                  this.specificCityFrom.push(from);
                  this.specificStateFrom = [];
                } else {
                  this.showErrorMessageSpecificStateFrom = true;
                  this.specificCityFrom = [];
                  this.specificStateFrom = [];
                }
              }
            } else {
              this.showErrorMessageSpecificStateFrom = true;
              this.specificCityFrom = [];
              this.specificStateFrom = [];
            }
          });
        }
      } else if (rules === 'INTRASTATE') {
        this.specificCityTo = [];
        this.specificStateTo = [];
        const variableOne = from.charAt(0);
        const newOne = /^[0-9]+$/i.test(variableOne);
        if (newOne === false) {
          if (this.states.length > 0) {
            for (let e = 0; e < this.states.length; e++) {
              if (from === this.states[e]) {
                from = this.states[e];
                this.showErrorMessageSpecificStateFrom = false;
                this.specificStateFrom.push(from);
                this.specificStateTo.push(from);
                this.specificCityFrom = [];
                break;
              } else {
                this.showErrorMessageSpecificStateFrom = true;
                this.specificStateFrom = [];
                this.specificCityFrom = [];
              }
            }
          }
        } else {
          this.pricingInfoService.getCityState(from).subscribe(getArrayValues => {
            this.getZipcodeValues = getArrayValues;
            if (this.getZipcodeValues.length > 0) {
              for (let t = 0; t < this.getZipcodeValues.length; t++) {
                if (from === this.getZipcodeValues[t].zipCode) {
                  if (rules === 'REGIONAL DIRECT INTRASTATE') {
                    from = this.getZipcodeValues[t].zipCode;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificCityFrom.push(from);
                    this.specificCityTo.push(from);
                    this.specificStateFrom = [];
                    this.specificStateTo = [];
                    this.ruleForm.patchValue({
                      specialRule: 'false', specificZipFlag: 'false'
                    });
                  } else {
                    from = this.getZipcodeValues[t].zipCode;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificCityFrom.push(from);
                    this.specificCityTo.push(from);
                    this.specificStateFrom = [];
                  }
                } else {
                  this.showErrorMessageSpecificStateFrom = true;
                  this.specificCityFrom = [];
                  this.specificStateFrom = [];
                }
              }
            } else {
              this.showErrorMessageSpecificStateFrom = true;
              this.specificCityFrom = [];
              this.specificStateFrom = [];
            }
          });
        }
      }
      else if (rules === 'REGIONAL DIRECT INTRASTATE') {
        console.log('from', from);
        from.toUpperCase();
        const variableOne = from.charAt(0);
        const newOne = /^[0-9]+$/i.test(variableOne);
        if (newOne === false) {
          if (from == 'SCA') {
            this.showErrorMessageSpecificStateFrom = false;
            this.specificStateFrom.push(from.toUpperCase().slice(1, 3));
            this.specificStateTo.push(from.toUpperCase().slice(1, 3));
            let cityFrom = '900-935';
            this.specificCityFrom.push(cityFrom);
            this.specificCityTo.push(cityFrom);
          } else {
            if (this.reddawayRuleStates.length > 0) {
              console.log('from1', from);
              for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                if (from === this.reddawayRuleStates[e]) {
                  console.log('from');
                  from = this.reddawayRuleStates[e];
                  this.showErrorMessageSpecificStateFrom = false;
                  this.specificStateFrom.push(from);
                  this.specificStateTo.push(from);
                  this.specificCityFrom = [];
                  this.specificCityTo = [];
                  this.ruleForm.patchValue({ specialRule: 'true', specificZipFlag: 'false' });
                  break;
                }

              }
            }

            // else {
            //   this.showErrorMessageSpecificStateFrom = true;
            //   this.specificStateFrom = [];
            //   this.specificCityFrom = [];
            // }
          }
        } else {
          console.log('from2', from);
          this.pricingInfoService.getCityState(from).subscribe(getArrayValues => {
            this.getZipcodeValues = getArrayValues;
            if (this.getZipcodeValues.length > 0) {
              for (let t = 0; t < this.getZipcodeValues.length; t++) {
                if (from === this.getZipcodeValues[t].zipCode) {
                  if (rules === 'REGIONAL DIRECT INTRASTATE') {
                    from = this.getZipcodeValues[t].zipCode;
                    this.specificCityFrom = [];
                    this.specificCityTo = [];
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificCityFrom.push(from);
                    this.specificCityTo.push(from);
                    this.specificStateFrom = [];
                    this.specificStateTo = [];
                    this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                  } else {
                    from = this.getZipcodeValues[t].zipCode;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificCityFrom.push(from);
                    this.specificCityTo.push(from);
                    this.specificStateFrom = [];
                    this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                  }
                } else {
                  this.showErrorMessageSpecificStateFrom = true;
                  this.specificCityFrom = [];
                  this.specificStateFrom = [];
                }
              }
            } else {
              this.showErrorMessageSpecificStateFrom = true;
              this.specificCityFrom = [];
              this.specificStateFrom = [];
            }
          });


          // } else {
          //   console.log('1122222');
          //   this.specificStateFrom = [];
          //   this.specificStateTo = [];
          //   this.specificCityFrom = [];
          //   this.specificCityTo = [];
          // }
        }
      }
      else if (rules === 'REGIONAL DIRECT INTERSTATE') {
        console.log('from Inter SCA 1122');
        if (from !== "") {
          const variableOne = from.charAt(0);
          const newOne = /^[0-9]+$/i.test(variableOne);
          if (newOne === false) {

            if (this.reddawayRuleStates.length > 0) {
              console.log('from1', from);


              if (from === 'SCA') {
                this.showErrorMessageSpecificStateFrom = false;
                this.specificStateFrom.push(from.toUpperCase().slice(1, 3));
                let cityFrom = '900-935';
                this.specificCityFrom.push(cityFrom);
                this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'true' });
              } else {
                for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                  if (from === this.reddawayRuleStates[e]) {
                    from = this.reddawayRuleStates[e];
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificStateFrom.push(from);
                    // this.specificStateTo.push(from);
                    // this.specificCityFrom = [];
                    this.ruleForm.patchValue({ specialRule: 'true', specificZipFlag: 'false' });
                    break;
                  }
                }
              }
              // } else{
              //   if (from === 'SCA') {
              //     this.showErrorMessageSpecificStateFrom = false;
              //     this.specificStateFrom.push(from.toUpperCase().slice(1, 3));
              //     let cityFrom = '900-935';
              //     this.specificCityFrom.push(cityFrom);
              //     this.customerForm.patchValue({specialRule: 'false', specificZipFlag: 'true'});
              //   } else {
              //     this.specificStateFrom = [];
              //     //   this.specificCityFrom = [];

              //   }
            }


            // else {
            //   this.specificStateFrom = [];
            //   this.specificCityFrom = [];
            // }
          }
          else {
            console.log('from2', from);
            this.pricingInfoService.getCityState(from).subscribe(getArrayValues => {
              this.getZipcodeValues = getArrayValues;
              if (this.getZipcodeValues.length > 0) {
                for (let t = 0; t < this.getZipcodeValues.length; t++) {
                  if (from === this.getZipcodeValues[t].zipCode) {
                    from = this.getZipcodeValues[t].zipCode;
                    this.showErrorMessageSpecificStateFrom = false;
                    this.specificCityFrom.push(from);
                    // this.specificCityTo.push(from);
                    this.specificStateFrom = [];
                    this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                  } else {
                    this.showErrorMessageSpecificStateFrom = true;
                    this.specificCityFrom = [];
                    this.specificStateFrom = [];
                  }
                }
              } else {
                this.showErrorMessageSpecificStateFrom = true;
                this.specificCityFrom = [];
                this.specificStateFrom = [];
              }
            });
          }
        }
        else {
          this.specificCityFrom = [];
          this.specificStateFrom = [];
        }
      }
      console.log('this.specificStateFrom', this.specificStateFrom);
    } else {
      this.specificCityFrom = [];
      this.specificStateFrom = [];
    }
  }

  getToCity(to:any, rules:any, form:any) {
    console.log('to', to, rules, form);
    this.specificCityTo = [];
    this.specificStateTo = [];
    if (to !== '') {
      to = to.toUpperCase();
      if (rules === 'SPECIAL RULES') {
        const variableOne = to.charAt(0);
        const newOne = /^[0-9]+$/i.test(variableOne);
        if (newOne === false) {
          if (form.carrierType === 'YRC' && form.directions === 'SPECIAL RULES') {
            to.toUpperCase();
            if (to === 'ALL') {
              to = to;
              if (this.specificCityFrom.length > 0) {
                this.specificCityTo.push(to);
                this.specificStateTo = [];
              } else {
                this.specificStateTo.push(to);
                this.specificCityTo = [];
              }
              this.showErrorMessageSpecificStateTo = false;
            } else {
              if (this.states.length > 0) {
                for (let e = 0; e < this.states.length; e++) {
                  if (to === this.states[e]) {
                    to = to;
                    this.showErrorMessageSpecificStateTo = false;
                    this.specificStateTo.push(to);
                    this.specificCityTo = [];
                    break;
                  }
                  else {
                    this.showErrorMessageSpecificStateTo = true;
                    this.specificStateTo = [];
                    this.specificCityTo = [];
                  }
                }
              }
            }

            console.log('this.specificStateTo', this.specificStateTo);
            console.log('this.specificCityTo', this.specificCityTo);
          } else if (form.carrierType === 'REDDAWAY' && form.directions === 'SPECIAL RULES') {
            if (to === 'ALL WEST') {
              to = to;
              this.specificStateTo.push(to);
              this.specificCityTo = [];
              //  if (this.specificCityFrom.length > 0) {
              //    this.specificStateTo.push(to);
              //    this.specificCityTo = [];
              //  } else {
              //    this.specificStateTo.push(to);
              //    this.specificCityTo = [];
              //  }
              this.showErrorMessageSpecificStateTo = false;
            } else {
              if (this.states.length > 0) {
                for (let e = 0; e < this.states.length; e++) {
                  if (to === this.states[e]) {
                    to = to;
                    this.showErrorMessageSpecificStateTo = false;
                    this.specificStateTo.push(to);
                    this.specificCityTo = [];
                    break;
                  }
                  else {
                    this.showErrorMessageSpecificStateTo = true;
                    this.specificStateTo = [];
                    this.specificCityTo = [];
                  }
                }
              }
            }
          } else if (form.carrierType === 'FEDEX ECONOMY' || form.carrierType === 'FEDEX PRIORITY' && form.directions === 'SPECIAL RULES') {
            if (to === 'ALL') {
              to = to;
              if (this.specificCityFrom.length > 0) {
                this.specificCityTo.push(to);
                this.specificStateTo = [];
              } else {
                this.specificStateTo.push(to);
                this.specificCityTo = [];
              }
              this.showErrorMessageSpecificStateTo = false;
            } else {
              if (this.states.length > 0) {
                for (let e = 0; e < this.states.length; e++) {
                  if (to === this.states[e]) {
                    to = to;
                    this.showErrorMessageSpecificStateTo = false;
                    this.specificStateTo.push(to);
                    this.specificCityTo = [];
                    break;
                  }
                  else {
                    this.showErrorMessageSpecificStateTo = true;
                    this.specificStateTo = [];
                    this.specificCityTo = [];
                  }
                }
              }
            }
          } else {
            console.log('this.specificStateTo', this.specificStateTo);
            if (this.states.length > 0) {
              for (let e = 0; e < this.states.length; e++) {
                if (to === this.states[e]) {
                  to = to;
                  this.specificStateTo.push(to);
                  this.specificCityTo = [];
                  this.showErrorMessageSpecificStateTo = false;
                  break;
                } else {
                  this.showErrorMessageSpecificStateTo = true;
                  this.specificStateTo = [];
                  this.specificCityTo = [];
                }
              }
            }
          }
        } else {
          console.log('to1');
          this.pricingInfoService.getCityState(to).subscribe(getArrayValues => {
            this.getZipcodeValues = getArrayValues;
            if (this.getZipcodeValues.length > 0) {
              for (let t = 0; t < this.getZipcodeValues.length; t++) {
                if (to === this.getZipcodeValues[t].zipCode) {
                  to = this.getZipcodeValues[t].zipCode;
                  this.showErrorMessageSpecificStateTo = false;
                  this.specificCityTo.push(to);
                  this.specificStateTo = [];
                } else {
                  this.showErrorMessageSpecificStateTo = true;
                  this.specificStateTo = [];
                  this.specificCityTo = [];
                }
              }
            } else {
              this.showErrorMessageSpecificStateTo = true;
              this.specificStateTo = [];
              this.specificCityTo = [];
              // to = to;
              // this.showErrorMessageSpecificStateTo = false;
              // this.specificCityTo.push(to);
              // this.specificStateTo = [];
            }
          });
        }
      }
      else if (rules === 'REGIONAL DIRECT INTERSTATE') {
        console.log('rules Inter 1342');
        if (to !== "") {
          console.log('rules Inter1');
          if (to !== "") {
            const variableOne = to.charAt(0);
            const newOne = /^[0-9]+$/i.test(variableOne);
            if (newOne === false) {
              if (to === 'SCA') {
                this.showErrorMessageSpecificStateTo = false;
                this.specificStateTo.push(to.toUpperCase().slice(1, 3));
                let cityFrom = '900-935';
                this.specificCityTo.push(cityFrom);
                this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'true' });
              } else
                if (this.reddawayRuleStates.length > 0) {
                  console.log('to1', to);
                  for (let e = 0; e < this.reddawayRuleStates.length; e++) {
                    if (to === this.reddawayRuleStates[e]) {

                      to = this.reddawayRuleStates[e];
                      this.showErrorMessageSpecificStateTo = false;
                      this.specificStateTo.push(to);
                      // this.specificStateTo.push(from);
                      // this.specificCityFrom = [];
                      this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                    }
                  }
                }
              // else {
              //   this.specificStateFrom = [];
              //   this.specificCityFrom = [];
              // }
            }
            else {
              console.log('to2', to);
              this.pricingInfoService.getCityState(to).subscribe(getArrayValues => {
                this.getZipcodeValues = getArrayValues;
                if (this.getZipcodeValues.length > 0) {
                  for (let t = 0; t < this.getZipcodeValues.length; t++) {
                    if (to === this.getZipcodeValues[t].zipCode) {

                      to = this.getZipcodeValues[t].zipCode;
                      this.showErrorMessageSpecificStateTo = false;
                      this.specificCityTo.push(to);
                      // this.specificCityTo.push(from);
                      // this.specificStateFrom = [];
                      this.ruleForm.patchValue({ specialRule: 'false', specificZipFlag: 'false' });
                    } else {
                      this.showErrorMessageSpecificStateTo = true;
                      this.specificCityFrom = [];
                      this.specificStateFrom = [];
                    }
                  }
                } else {
                  this.showErrorMessageSpecificStateTo = true;
                  this.specificCityFrom = [];
                  this.specificStateFrom = [];
                }
              });
            }
          }
        }
        // } else {
        //   this.specificStateFrom = [];
        //   this.specificCityFrom = [];
        // }
      }
    } else {
      this.specificStateTo = [];
      this.specificCityTo = [];
    }
  }

  updateNewRule(customerForm:any, fullArray:any) {
    $('#RuleModal').modal('hide');
    this.loader = true;
    this.spinner.show();

    if (fullArray.length === 0) {
      this.invoiceDetails['values'].forEach((element:any) => {
        // if (element.showRule !== true) {
        let apiObject = {
          carrier: this.invoiceDetails['carrier'],
          typeOfInvoice: element.typeOfInvoice,
          originZip: element.originZip,
          originState: element.originState,
          destinationZip: element.destinationZip,
          destinationState: element.destinationState,
          pallets: element.pallets,
          class: element.class,
          weight: element.weight,
          fuelCharge: element.fuelCharge,
          invoiceAmount: element.invoiceAmount,
          assessorial: element.assessorial,
          companyId: this.companyInformation.id,
          pieces: element.pallets,
          assessorialCharge: element.assessorialCharge,
          rateResponse: element.rateResponse,
          slNo: element.slNo,
          id: element.id,
          shipmentDate: element.shipmentDate,
          selected: element.selected,
          rules: element.rules,
          selectedCarrier: this.invoiceDetails['carrier']
        }

        fullArray.push(apiObject);
      });
    }
    this.beforefinalArray = [];
    this.showErrorMessageRuleAlreadyExist = false;
    this.accessDeniedMsg = false;
    let finalData;
    let apiRulesArray = [];

    let Sone = 0;

    console.log('businessruleold', this.companyRulesArray);
    if (this.companyRulesArray.length > 0) {
      if (this.temporaryArray.length > 0) {
        apiRulesArray = this.companyRulesArray.concat(this.temporaryArray);
      } else {
        apiRulesArray = this.companyRulesArray;
      }
      console.log('this.arrayValues New Update', apiRulesArray);

      for (let s = 0; s < apiRulesArray.length; s++) {
        Sone = Sone + 1;
        if (apiRulesArray[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          apiRulesArray[s].type = 'FEDEX ECONOMY';
        } else if (apiRulesArray[s].type === 'FEDEX_FREIGHT_PRORITY') {
          apiRulesArray[s].type = 'FEDEX PRIORITY';
        } else {
          apiRulesArray[s].type = apiRulesArray[s].type;
        }
        console.log(apiRulesArray);
        finalData = {
          directions: apiRulesArray[s].directions,
          fakRange: apiRulesArray[s].fakRange.length > 0 ? apiRulesArray[s].fakRange : [],
          fakValue: apiRulesArray[s].fak.length > 0 ? apiRulesArray[s].fak : [],
          fak: apiRulesArray[s].fak.length > 0 ? apiRulesArray[s].fak : [],

          classRange: '',
          customerId: this.companyInformation.id,
          category: apiRulesArray[s].category,
          type: apiRulesArray[s].type,
          classification: [],
          specificStateList1: JSON.stringify(apiRulesArray[s].specificStateList1.length > 0 ? apiRulesArray[s].specificStateList1 : []),
          specificStateList2: JSON.stringify(apiRulesArray[s].specificStateList2.length > 0 ? apiRulesArray[s].specificStateList2 : []),
          specificCityList1: JSON.stringify(apiRulesArray[s].specificCityList1.length > 0 ? apiRulesArray[s].specificCityList1 : []),
          specificCityList2: JSON.stringify(apiRulesArray[s].specificCityList2.length > 0 ? apiRulesArray[s].specificCityList2 : []),
          specificStateFlag: apiRulesArray[s].specificStateFlag,
          specificZipFlag: apiRulesArray[s].specificZipFlag,
          liftGate: apiRulesArray[s].liftGate,
          residential: apiRulesArray[s].residential,
          limitedAccessDelivery: apiRulesArray[s].limitedAccessDelivery,
          insideDelivery: apiRulesArray[s].insideDelivery,
          notify: apiRulesArray[s].notify,
          singleShipment: apiRulesArray[s].singleShipment,
          deliveryAppointmentRequired: apiRulesArray[s].deliveryAppointmentRequired,
          discount: apiRulesArray[s].discount,
          minCharge: apiRulesArray[s].minCharge,
          createdOn: new Date(),
          toggleEnabled: apiRulesArray[s].toggleEnabled,
          sameRule: apiRulesArray[s].sameRule,
          ruleExist : apiRulesArray[s].ruleExist,

          companyId: this.companyInformation.id,
          id: 0
        };
        this.beforefinalArray.push(finalData);
        console.log(this.beforefinalArray);
        // this.companyRulesArray = this.companyRulesArray.splice(1);
        // this.companyRulesArray.push(finalData);

        console.log(this.beforefinalArray.length, apiRulesArray.length, s);

      }
      let responseValue, responseValueAfter;

      if (this.beforefinalArray.length === apiRulesArray.length) {
        let apiArrayData = this.beforefinalArray.filter((e:any) => e.toggleEnabled === true);
        let finalapiArrayData = apiArrayData.filter((e:any) => e.sameRule === true);
        console.log(apiArrayData)

        console.log(finalapiArrayData)
        // console.log(apiArrayData);
        this.invoiceService.applyNewRule(fullArray, finalapiArrayData).subscribe((res: any) => {
          console.log(res);
          responseValue = res.result;
          responseValueAfter = res.result.concat(this.ruleAppliedArray);
          let loopLength = 0;
          if (responseValueAfter.length > 0) {
            responseValueAfter.forEach((ele:any) => {
              this.invoiceDetails['values'].forEach((obj:any) => {
                if (ele.id === obj.id) {
                  loopLength = loopLength + 1;
                  if (this.invoiceDetails['carrier'] === 'YRC') {
                    // temporaryResponse.yrcRules = temporaryResponse.rules;
                    obj.yrcRules = ele.rules;
                  } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                    obj.reddawayRules = ele.rules;
                  } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
                    obj.economyRules = ele.rules;
                  } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
                    obj.priorityRules = ele.rules;
                  }
                  // obj.rules = ele.rules;
                }
              });
            });
            if (loopLength === this.invoiceDetails['values'].length) {
              // this.editValue = false;
              // this.editArValue = false;
              this.tableVables();
              // this.saveworkbookRule();

            }
          }
        })
      }
      console.log('Finalapi array', this.finalArray);
    } else {
      let beforefinalArray:any = [];
      let responseValue;
      if (this.temporaryArray.length > 0) { 
        apiRulesArray= [];
        apiRulesArray = this.temporaryArray;
        for (let s = 0; s < apiRulesArray.length; s++) {
          Sone = Sone + 1;
          if (apiRulesArray[s].type === 'FEDEX_FREIGHT_ECONOMY') {
            apiRulesArray[s].type = 'FEDEX ECONOMY';
          } else if (apiRulesArray[s].type === 'FEDEX_FREIGHT_PRORITY') {
            apiRulesArray[s].type = 'FEDEX PRIORITY';
          } else {
            apiRulesArray[s].type = apiRulesArray[s].type;
          }
          finalData = {
            directions: apiRulesArray[s].directions,
            fakRange: apiRulesArray[s].fakRange.length > 0 ? apiRulesArray[s].fakRange : [],
            fakValue: apiRulesArray[s].fakValue.length > 0 ? apiRulesArray[s].fakValue : [],
            fak: apiRulesArray[s].fakValue.length > 0 ? apiRulesArray[s].fakValue : [],
  
            classRange: '',
            customerId: this.companyInformation.id,
            category: apiRulesArray[s].category,
            type: apiRulesArray[s].type,
            classification: [],
            specificStateList1: JSON.stringify(apiRulesArray[s].specificStateList1.length > 0 ? apiRulesArray[s].specificStateList1 : []),
            specificStateList2: JSON.stringify(apiRulesArray[s].specificStateList2.length > 0 ? apiRulesArray[s].specificStateList2 : []),
            specificCityList1: JSON.stringify(apiRulesArray[s].specificCityList1.length > 0 ? apiRulesArray[s].specificCityList1 : []),
            specificCityList2: JSON.stringify(apiRulesArray[s].specificCityList2.length > 0 ? apiRulesArray[s].specificCityList2 : []),
            specificStateFlag: apiRulesArray[s].specificStateFlag,
            specificZipFlag: apiRulesArray[s].specificZipFlag,
            liftGate: apiRulesArray[s].liftGate,
            residential: apiRulesArray[s].residential,
            limitedAccessDelivery: apiRulesArray[s].limitedAccessDelivery,
            insideDelivery: apiRulesArray[s].insideDelivery,
            notify: apiRulesArray[s].notify,
            singleShipment: apiRulesArray[s].singleShipment,
            deliveryAppointmentRequired: apiRulesArray[s].deliveryAppointmentRequired,
            discount: apiRulesArray[s].discount,
            minCharge: apiRulesArray[s].minCharge,
            createdOn: new Date(),
            toggleEnabled: apiRulesArray[s].toggleEnabled,
            sameRule: apiRulesArray[s].sameRule,
            ruleExist : apiRulesArray[s].ruleExist,

            companyId: this.companyInformation.id,
            id: 0
          };
          this.beforefinalArray.push(finalData);
          console.log(this.beforefinalArray);
          // this.companyRulesArray = this.companyRulesArray.splice(1);
          // this.companyRulesArray.push(finalData);
  
          console.log(this.beforefinalArray.length, apiRulesArray.length, s);
  
        }
        let responseValue, responseValueAfter;
  
        if (this.beforefinalArray.length === apiRulesArray.length) {
          let apiArrayData = this.beforefinalArray.filter((e:any) => e.toggleEnabled === true);
          let finalapiArrayData = apiArrayData.filter((e:any) => e.sameRule === true);
          console.log(apiArrayData);
          this.invoiceService.applyNewRule(fullArray, finalapiArrayData).subscribe((res: any) => {
            console.log(res);
            responseValue = res.result;
            responseValueAfter = res.result.concat(this.ruleAppliedArray);
            let loopLength = 0;
            if (responseValueAfter.length > 0) {
              responseValueAfter.forEach((ele:any) => {
                this.invoiceDetails['values'].forEach((obj:any) => {
                  if (ele.id === obj.id) {
                    loopLength = loopLength + 1;
                    if (this.invoiceDetails['carrier'] === 'YRC') {
                      // temporaryResponse.yrcRules = temporaryResponse.rules;
                      obj.yrcRules = ele.rules;
                    } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                      obj.reddawayRules = ele.rules;
                    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
                      obj.economyRules = ele.rules;
                    } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
                      obj.priorityRules = ele.rules;
                    }
                    // obj.rules = ele.rules;
                  }
                });
              });
              if (loopLength === this.invoiceDetails['values'].length) {
                // this.editValue = false;
                // this.editArValue = false;
                this.tableVables();
                // this.saveworkbookRule();
  
              }
            }
          })
        }
      } else {
         beforefinalArray = [];
      
      this.invoiceService.applyNewRule(fullArray, beforefinalArray).subscribe((res: any) => {
        console.log(res);
        responseValue = res.result;
        // responseValueAfter = res.result.concat(this.ruleAppliedArray);
        let loopLength = 0;
        if (responseValue.length > 0) {
          responseValue.forEach((ele:any) => {
            this.invoiceDetails['values'].forEach((obj:any) => {
              if (ele.id === obj.id) {
                loopLength = loopLength + 1;
                if (this.invoiceDetails['carrier'] === 'YRC') {
                  // temporaryResponse.yrcRules = temporaryResponse.rules;
                  obj.yrcRules = ele.rules;
                } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
                  obj.reddawayRules = ele.rules;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX ECONOMY') {
                  obj.economyRules = ele.rules;
                } else if (this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX PRIORITY') {
                  obj.priorityRules = ele.rules;
                }
                // obj.rules = ele.rules;
              }
            });
          });
          if (loopLength === this.invoiceDetails['values'].length) {
            // this.editValue = false;
            // this.editArValue = false;
            this.tableVables();
            // this.saveworkbookRule();

          }
        }
      })
    }
    }
    this.loader = false;
  }
  exportdataOpenModal() {
    $('#exportDataModal').modal('show');
  }
  exportdata() {
    let userDetail;
    $('#exportDataModal').modal('hide');

    this.invoiceDetails['values'].forEach((element:any) => {
      userDetail = {
        'ShipmentDate': element.shipmentDate,
        'Carrier': element.forteCarrier,
        'Pro #': '',
        'OriginZip': element.originZip,
        'OriginState': element.originState,
        'DestinationZip': element.destinationZip,
        'DestinationState': element.destinationState,
        'Class': element.class,
        'Weight': element.weight,
        'Pallets': element.pieces,
        'InvoiceAmount': element.invoiceAmount,
        'FuelCharge': element.fuelCharge,
        'ForteApTotal': element.totalForteApRate,
        'ForteArTotal': element.totalForteRate,
        'Variance': element.variance,
        'ForteApGross': element.apGrossRate,
        'ForteArGross': element.arGrossRate,
        'APDiscountedRate': element.apFinalRate,
        'ARDiscountedRate': element.arFinalRate,
        'ApDiscount': element.finalAPDiscount,
        'ArDiscount': element.finalARDiscount,
        'ApFuelCharge': element.fuelSurChargeApValue,
        'ArFuelCharge': element.fuelSurChargeArValue,
        'ArFuelPercent': element.arFSC + '%',
        'Profit': element.marginRate,
        'Profit %': element.margin + '%'
      }
      this.data.push(userDetail);
    });

    console.log(this.data);

    this.excelService.exportAsExcelFileWorkBook(this.data, 'Report');
    // this.logger = {
    //   'method': 'exportAsExcelFile',
    //   'message': 'Download report details',
    //   'salesrepId': this.salesRepId
    // };
    // this.loggerService.info(this.logger);businessData
  }

  exportTrafficFlow() {
    console.log(this.invoiceDetails);
    console.log(this.companyInformation);
    console.log(this.trafficDataEnable);
    let date, month, hour, minutes, seconds;
    var today = new Date();
    var sec = today.getSeconds();
    var min = today.getMinutes();
    var hr = today.getHours();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    var yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    let fileNameFormat = companyName + '_' + 'TrafficFlow_' + month + date;

    this.exportInboundArray = [];
    this.exportOutboundArray = [];
    this.exportThirdPartyArray = [];
    let filteredArray = []
    if (this.trafficDataEnable.invalidData.length > 0) {
      filteredArray = this.trafficDataEnable['values'].concat(this.trafficDataEnable.invalidData);
    } else {
      filteredArray = this.trafficDataEnable['values'];
    }
    filteredArray.forEach((element:any) => {
      if (element.typeOfInvoice == 'In Bound') {
        this.exportInboundArray.push(element);
      } else if (element.typeOfInvoice == 'Out Bound') {
        this.exportOutboundArray.push(element);
      } else {
        this.exportThirdPartyArray.push(element);
      }
    });
    console.log(filteredArray);
    let apiObject;
    let outObj, inObj, thirdobj;
    // if (this.exportOutboundArray.length >0) {
    //   if (this.exportInboundArray.length > 0) {
    //     if (this.exportThirdPartyArray.length > 0) {
    //       this.exportOutboundArray.forEach((res:any) => {
    //         this.exportInboundArray.forEach((element:any) => {
    //           this.exportThirdPartyArray.forEach((obj:any) => {
    //            apiObject = {
    //              'outboundDate': res.shipmentDate,
    //              'outboundOrigin': res.originZip,
    //              'outboundState': res.originState,
    //              'outboundDestinationZip': res.destinationZip,
    //              'outboundDestinationState': res.destinationState,
    //              'outboundpieces': res.pieces,
    //              'outboundweight': res.weight,
    //              'outboundclass':res.class,
    //              'inboundDate': element.shipmentDate,
    //              'inboundOrigin': element.originZip,
    //              'inboundState': element.originState,
    //              'inboundDestinationZip': element.destinationZip,
    //              'inboundDestinationState': element.destinationState,
    //              'inboundpieces': element.pieces,
    //              'inboundweight': element.weight,
    //              'inboundclass':element.class,
    //              'thirdpartyDate': obj.shipmentDate,
    //              'thirdpartyOrigin': obj.originZip,
    //              'thirdpartyState': obj.originState,
    //              'thirdpartyDestinationZip': obj.destinationZip,
    //              'thirdpartyDestinationState': obj.destinationState,
    //              'thirdpartypieces': obj.pieces,
    //              'thirdpartyweight': obj.weight,
    //              'thirdpartyclass':obj.class,

    //            }
    //            this.exportArray.push(apiObject);
    //            console.log(this.exportArray)
    //           })
    //         })
    //       })
    //     }
    //   }
    // }
    const maxLength = ((this.exportOutboundArray.length > this.exportInboundArray.length) &&
      (this.exportOutboundArray.length > this.exportThirdPartyArray.length)) ? this.exportOutboundArray.length :
      (this.exportInboundArray.length > this.exportThirdPartyArray.length) ? this.exportInboundArray.length :
        this.exportThirdPartyArray.length;
    for (let i = 0; i < maxLength; i++) {
      if (this.exportOutboundArray[i] !== undefined) {
        outObj = {
          'outboundDate': this.exportOutboundArray[i].shipmentDate,
          'outboundOrigin': this.exportOutboundArray[i].originZip,
          'outboundState': this.exportOutboundArray[i].originState,
          'outboundDestinationZip': this.exportOutboundArray[i].destinationZip,
          'outboundDestinationState': this.exportOutboundArray[i].destinationState,
          'outboundpieces': this.exportOutboundArray[i].pieces,
          'outboundweight': this.exportOutboundArray[i].weight,
          'outboundclass': this.exportOutboundArray[i].class
        }
      } else {
        outObj = {
          'outboundDate': '',
          'outboundOrigin': '',
          'outboundState': '',
          'outboundDestinationZip': '',
          'outboundDestinationState': '',
          'outboundpieces': '',
          'outboundweight': '',
          'outboundclass': ''
        }
      }
      if (this.exportThirdPartyArray[i] !== undefined) {
        thirdobj = {
          'thirdDate': this.exportThirdPartyArray[i].shipmentDate,
          'thirdOrigin': this.exportThirdPartyArray[i].originZip,
          'thirdState': this.exportThirdPartyArray[i].originState,
          'thirdDestination': this.exportThirdPartyArray[i].destinationZip,
          'thirdDestinationState': this.exportThirdPartyArray[i].destinationState,
          'thirdPieces': this.exportThirdPartyArray[i].pieces,
          'thirdWeight': this.exportThirdPartyArray[i].weight,
          'thirdClass': this.exportThirdPartyArray[i].class
        }
      } else {
        thirdobj = {
          'thirdDate': '',
          'thirdOrigin': '',
          'thirdState': '',
          'thirdDestination': '',
          'thirdDestinationState': '',
          'thirdPieces': '',
          'thirdWeight': '',
          'thirdClass': ''
        }
      }
      if (this.exportInboundArray[i] !== undefined) {
        inObj = {
          'inbounddate': this.exportInboundArray[i].shipmentDate,
          'inboundorigin': this.exportInboundArray[i].originZip,
          'inboundstate': this.exportInboundArray[i].originState,
          'inbounddestination': this.exportInboundArray[i].destinationZip,
          'inbounddestinationstate': this.exportInboundArray[i].destinationState,
          'inboundpieces': this.exportInboundArray[i].pieces,
          'inboundweight': this.exportInboundArray[i].weight,
          'inboundclass': this.exportInboundArray[i].class
        }
      } else {
        inObj = {
          'inbounddate': '',
          'inboundorigin': '',
          'inboundstate': '',
          'inbounddestination': '',
          'inbounddestinationstate': '',
          'inboundpieces': '',
          'inboundweight': '',
          'inboundclass': ''
        }
      }
      // let temp = {...outObj,...thirdobj};
      let temp = Object.assign(outObj, inObj, thirdobj);
      console.log(temp);
      this.exportArray.push(temp);
      console.log(this.exportArray)
      console.log(Object.assign(outObj, thirdobj, inObj));
    }
    $('#exportDataModal').modal('hide');
    for (let i = 0; i < 8; i++) {
      this.emptyTable.push({ value: 'jefrin' });
    }
    console.log(this.emptyTable);
    console.log(maxLength);
    if (this.exportArray.length === maxLength) {
      console.log('test');
      setTimeout(() => {
        const worksheet: XLSX.WorkSheet = XLSX.utils.table_to_sheet(this.table.nativeElement, { raw: true });
        // const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['Traffic Flow'] };
        const wb: XLSX.WorkBook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, worksheet, 'Traffic Flow');
        XLSX.writeFile(wb, fileNameFormat + '.xlsx');
        outObj = '';
        inObj = '';
        thirdobj = '';
        this.exportArray =[];
      }, 2000);

    }
    // const excelBuffer: any = XLSX.write(wb, { bookType: 'xlsx'});

    // this.excelService.saveAsExcelFileWorkBookTrafficFlow(excelBuffer, 'TrafficData Report');
    // this.excelService.exportAsExcelFileWorkBookTrafficFlow(data, 'TrafficDataReport');
  }

  editWorkBookRule(businessData:any, index:any) {
    console.log(businessData, index);
    this.editRuleIndex = businessData.tempId;
    if (businessData !== undefined || businessData !== {} as any|| businessData !== null) {
      this.editMode = true;
      // this.showBusinessRules = true;
      if (businessData.directions !== '') {
        this.finalDirections.push(businessData.directions);
      } else {
        this.finalDirections = [];
      }
      if (businessData.specificStateFlag === 'true' && businessData.directions === 'SPECIAL RULES') {
        this.showFieldsFrom = true;
        this.showFieldsTo = true;
        this.specificStateFrom = businessData.specificStateList1;
        this.specificStateTo = businessData.specificStateList2;
        this.specificCityFrom = businessData.specificCityList1;
        this.specificCityTo = businessData.specificCityList2;
      } else if (businessData.specificStateFlag === 'true' && businessData.directions === 'INTRASTATE' || businessData.directions === 'REGIONAL DIRECT INTRASTATE') {
        console.log('date0');
        this.showFieldsFrom = true;
        this.showFieldsTo = false;
        console.log('businessData.specificStateList1', businessData.specificStateList1);
        this.specificStateFrom = businessData.specificStateList1;
        this.specificStateTo = businessData.specificStateList2;
        this.specificCityFrom = businessData.specificCityList1;
        this.specificCityTo = businessData.specificCityList2;
      }
      if (businessData.specificZipFlag === 'true') {
        this.showUseZipCodes = true;
      } else {
        this.showUseZipCodes = false;
      }
      if (businessData.type === 'YRC') {
        this.directionsArray = ['INTERSTATE', 'INTRASTATE', 'SPECIAL RULES'];
      } else if (businessData.type === 'REDDAWAY') {
        this.directionsArray = ['REGIONAL DIRECT INTRASTATE', 'REGIONAL DIRECT INTERSTATE', 'REGIONAL INDIRECT', 'SPECIAL RULES'];
      } else {
        this.directionsArray = ['REGIONAL', 'INTER REGIONAL', 'INTRASTATE', 'SPECIAL RULES'];
      }
      let directionMapping;
      if (this.finalDirections.length > 0) {
        directionMapping = this.finalDirections[0];
      } else {
        directionMapping = '';
      }
      this.ruleForm.patchValue({
        category: businessData.category,
        carrierType: businessData.type,
        directions: businessData.directions,
        discount: businessData.discount,
        minimumCharge: businessData.minCharge,
        customerId: businessData.customerId,
        assessorialName: [''],
        charge: [''],
        fakRangeFrom: [''],
        fakRangeTo: [''],
        fakValue: [''],
        specialRule: businessData.specificStateFlag,
        specificZipFlag: businessData.specificZipFlag,
        fromCityState: this.specificStateFrom.length > 0 ? this.specificStateFrom : this.specificCityFrom,
        toCityState: this.specificStateTo.length > 0 ? this.specificStateTo : this.specificCityTo,
        createdOn: businessData.createdOn,
        id: businessData.id
      });
      // if (this.costPlusFlag == true) {
      //   this.customerForm.patchValue({
      //     category: '',
      //     carrierType: ''
      //   });
      // }
      // this.logger = {
      //   'method': 'populateData',
      //   'message': 'Retrieving customer information  and business rules editing a rule',
      //   'businessRuleId': businessData.id
      // };
      // this.loggerService.debug(this.logger);
      this.assessorialArray = [];
      this.fakArray = [];
      const fakRange = JSON.parse(businessData.fakRange);
      const fak = JSON.parse(businessData.fak);
      if (fakRange.length === 0 || fak.length === 0) {
        this.fakArray = [];
        this.showFAKTable = false;
        this.ruleForm.patchValue({ presentFakValue: 'No' });
      } else {
        for (let f = 0; f < fakRange.length; f++) {
          const data = fakRange[f].split('-');
          const data1 = data[0];
          const data2 = data[1];
          const fakData = fak[f];
          const fakValue = { fakRangeFrom: data1, fakRangeTo: data2, fakValue: fakData };
          this.ruleForm.patchValue({ presentFakValue: 'Yes' });
          this.fakArray.push(fakValue);
          this.showFAKTable = true;
          this.showFakValues = true;
        }
      }
      const assessorials = { assessorialName: 'LiftGate Service', charge: businessData.liftGate };
      const assessorials1 = { assessorialName: 'Residential Delivery', charge: businessData.residential };
      const assessorials2 = { assessorialName: 'Inside Delivery', charge: businessData.insideDelivery };
      const assessorials3 = { assessorialName: 'Notify', charge: businessData.notify };
      const assessorials4 = { assessorialName: 'Limited Access Delivery', charge: businessData.limitedAccessDelivery };
      const assessorials5 = { assessorialName: 'Single Shipment', charge: businessData.singleShipment };
      const assessorials6 = { assessorialName: 'Delivery Appointment Required', charge: businessData.deliveryAppointmentRequired }
      if (assessorials.charge === '' && assessorials1.charge === '' &&
        assessorials2.charge === '' && assessorials3.charge === '' && assessorials4.charge === '' && (assessorials5.charge === '' || assessorials5.charge == null) && (assessorials6.charge == '' || assessorials6.charge == null)) {
        this.showAssessorials = false;
      } else {
        this.assessorialArrayRule.push(assessorials, assessorials1, assessorials2, assessorials3, assessorials4, assessorials5, assessorials6);
        console.log(this.assessorialArray);
        this.showAssessorials = true;
      }
      console.log('console.log(this.assessorialArray);', this.assessorialArrayRule);
      // this.showAddCustomer = true;
      // this.showCustomerTable = false;
    }
  }

  // deleteFakValue(fakArray, index) {
  //   this.fakArray.splice(index, 1);
  //   if (this.fakArray.length === 0) {
  //     this.showFakValues = false;
  //     this.showFAKTable = false;
  //     this.ruleForm.patchValue({ presentFakValue: 'No' });
  //     this.showErrorMessage = true;
  //   } else {
  //     this.showFAKTable = true;
  //   }
  // }
  updateapplyRule(ruleFormValue:any) {
    let fromTo;
    let fakClass;
    let fullArray:any = [];
    console.log(ruleFormValue);
    console.log(this.arrayValues);
    if (ruleFormValue.category === '' && ruleFormValue.carrierType === '' &&
      ruleFormValue.directions === '' && ruleFormValue.discount === '' &&
      ruleFormValue.minimumCharge === '') {
      this.showErrorMessageOnAddRules = true;
      this.arrayValues = [];
    } else {
      if (ruleFormValue.category === '' || ruleFormValue.carrierType === '' ||
        ruleFormValue.directions === '' || ruleFormValue.discount === '' ||
        ruleFormValue.minimumCharge === '') {
        this.showErrorMessageOnAddRules = true;
        // this.enableSaveButton = false;
      } else {
        this.showErrorMessageOnAddRules = true;
        if (this.fakArray.length > 0) {
          this.showFak = true;
          for (let i = 0; i < this.fakArray.length; i++) {
            if (this.fakArray[i].fakRangeTo !== '') {
              fromTo = this.fakArray[i].fakRangeFrom + '-' + this.fakArray[i].fakRangeTo;
              fakClass = this.fakArray[i].fakValue;
              this.finalFakArray.push(fromTo);
              this.finalFakClass.push(fakClass);
            } else if (this.fakArray[i].fakRangeTo === '') {
              fromTo = this.fakArray[i].fakRangeFrom;
              fakClass = this.fakArray[i].fakValue;
              this.finalFakArray.push(fromTo);
              this.finalFakClass.push(fakClass);
            } else {

            }
          }
        } else {
          this.showFak = false;
        }
        const assessorialValues = { liftGate: '', residential: '', limitedAccess: '', notify: '', insideDelivery: '', singleShipment: '', deliveryAppointmentRequired: '' };
        if (this.assessorialArrayRule.length > 0) {
          for (let a = 0; a < this.assessorialArrayRule.length; a++) {
            if (this.assessorialArrayRule[a].assessorialName === 'LiftGate Service') {
              assessorialValues.liftGate = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Residential Delivery') {
              assessorialValues.residential = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Limited Access Delivery') {
              assessorialValues.limitedAccess = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Notify') {
              assessorialValues.notify = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Single Shipment') {
              assessorialValues.singleShipment = this.assessorialArrayRule[a].charge;
            } else if (this.assessorialArrayRule[a].assessorialName === 'Delivery Appointment Required') {
              assessorialValues.deliveryAppointmentRequired = this.assessorialArrayRule[a].charge;
            } else {
              assessorialValues.insideDelivery = this.assessorialArrayRule[a].charge;
            }
          }
          this.finalAssessorial.push(assessorialValues);
        }
        console.log(this.companyRulesArray);
        console.log(this.specificCityFrom, this.specificCityFrom, this.specificCityTo, this.specificCityFrom);
        // const data = {
        this.temporaryArray.forEach((ele:any, index:any) => {
          if (ele.tempId === this.editRuleIndex) {
            ele.type = ruleFormValue.carrierType,
              ele.category = ruleFormValue.category,
              ele.directions = ruleFormValue.directions,
              ele.discount = ruleFormValue.discount,
              ele.minCharge = ruleFormValue.minimumCharge,
              ele.liftGate = assessorialValues.liftGate ? assessorialValues.liftGate : '',
              ele.residential = assessorialValues.residential ? assessorialValues.residential : '',
              ele.limitedAccessDelivery = assessorialValues.limitedAccess ? assessorialValues.limitedAccess : '',
              ele.insideDelivery = assessorialValues.insideDelivery ? assessorialValues.insideDelivery : '',
              ele.notify = assessorialValues.notify ? assessorialValues.notify : '',
              ele.singleShipment = assessorialValues.singleShipment ? assessorialValues.singleShipment : '',
              ele.deliveryAppointmentRequired = assessorialValues.deliveryAppointmentRequired ? assessorialValues.deliveryAppointmentRequired : '',
              ele.charge = ruleFormValue.charge,
              ele.presentFakValue = ruleFormValue.presentFakValue,
              ele.fakRange = JSON.stringify(this.finalFakArray.length > 0 ? this.finalFakArray : []),
              ele.fakValue = JSON.stringify(this.finalFakClass.length > 0 ? this.finalFakClass : []),
              ele.specialRule = ruleFormValue.specialRule,
              ele.specificZipFlag = ruleFormValue.specificZipFlag,
              ele.stateFrom = this.specificStateFrom.length > 0 ? this.specificStateFrom : [],
              ele.stateTo = this.specificStateTo.length > 0 ? this.specificStateTo : [],
              ele.cityFrom = this.specificCityFrom.length > 0 ? this.specificCityFrom : [],
              ele.cityTo = this.specificCityTo.length > 0 ? this.specificCityTo : [],
              ele.specificStateList1 = ele.stateFrom.length > 0 ? ele.stateFrom : [],
              ele.specificStateList2 = ele.stateTo.length > 0 ? ele.stateTo : [],
              ele.specificCityList1 = ele.cityFrom.length > 0 ? ele.cityFrom : [],
              ele.specificCityList2 = ele.cityTo.length > 0 ? ele.cityTo : [];
          }
        })
        console.log(this.companyRulesArray);
        this.filterArrayValues(this.companyRulesArray);
        // this.filterArrayValues(this.temporaryArray);


        // };
        // const data = {
        //   directions: this.filteredRulesArray[this.editRuleIndex].directions,
        //   fakRange: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].fakRange.length > 0 ? this.filteredRulesArray[this.editRuleIndex].fakRange : []),
        //   fak: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].fakValue.length > 0 ? this.filteredRulesArray[this.editRuleIndex].fakValue : []),
        //   classRange: '',
        //   customerId: this.companyInformation.id,
        //   category: this.filteredRulesArray[this.editRuleIndex].category,
        //   type: this.filteredRulesArray[this.editRuleIndex].type,
        //   classification: [],
        //   specificStateList1: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].stateFrom.length > 0 ? this.filteredRulesArray[this.editRuleIndex].stateFrom : []),
        //   specificStateList2: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].stateTo.length > 0 ? this.filteredRulesArray[this.editRuleIndex].stateTo : []),
        //   specificCityList1: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].cityFrom.length > 0 ? this.filteredRulesArray[this.editRuleIndex].cityFrom : []),
        //   specificCityList2: JSON.stringify(this.filteredRulesArray[this.editRuleIndex].cityTo.length > 0 ? this.filteredRulesArray[this.editRuleIndex].cityTo : []),
        //   specificStateFlag: this.filteredRulesArray[this.editRuleIndex].specialRule,
        //   specificZipFlag: this.filteredRulesArray[this.editRuleIndex].specificZipFlag,
        //   liftGate: this.filteredRulesArray[this.editRuleIndex].liftGate,
        //   residential: this.filteredRulesArray[this.editRuleIndex].residential,
        //   limitedAccessDelivery: this.filteredRulesArray[this.editRuleIndex].limitedAccessDelivery,
        //   insideDelivery: this.filteredRulesArray[this.editRuleIndex].insideDelivery,
        //   notify: this.filteredRulesArray[this.editRuleIndex].notify,
        //   singleShipment: this.filteredRulesArray[this.editRuleIndex].singleShipment,
        //   deliveryAppointmentRequired: this.filteredRulesArray[this.editRuleIndex].deliveryAppointmentRequired,
        //   discount: this.filteredRulesArray[this.editRuleIndex].discount,
        //   minCharge: this.filteredRulesArray[this.editRuleIndex].minCharge,
        //   createdOn: new Date(),

        //   companyId: this.companyInformation.id,
        //   id: this.filteredRulesArray[this.editRuleIndex].id
        // }
        // this.invoiceService.putWorkBookRule(data).subscribe((response) => {
        //   console.log(response);
        // })
        // this.arrayValues = this.companyResponse[0].BusinessRulesNew;
        this.invoiceDetails['values'].forEach((element:any) => {
          // if (element.showRule !== true) {
          let apiObject = {
            carrier: this.invoiceDetails['carrier'],
            typeOfInvoice: element.typeOfInvoice,
            originZip: element.originZip,
            originState: element.originState,
            destinationZip: element.destinationZip,
            destinationState: element.destinationState,
            pallets: element.pallets,
            class: element.class,
            weight: element.weight,
            fuelCharge: element.fuelCharge,
            invoiceAmount: element.invoiceAmount,
            assessorial: element.assessorial,
            companyId: this.companyInformation.id,
            pieces: element.pallets,
            assessorialCharge: element.assessorialCharge,
            rateResponse: element.rateResponse,
            slNo: element.slNo,
            id: element.id,
            shipmentDate: element.shipmentDate,
            selected: element.selected,
            rules: element.rules,
            selectedCarrier: this.invoiceDetails['carrier']
          }

          fullArray.push(apiObject);
          // } 
          // else {
          //   this.ruleAppliedArray.push(element);
          // }
        });
        console.log('full', fullArray);
        console.log('array', this.arrayValues);
        this.fullArray = fullArray;
        this.buildRuleForm();
        this.editMode = false;
      }
    }
  }

  deleteApplyRule(rule:any, index:any) {
    console.log(rule);
    console.log(this.temporaryArray);
    let fullArray:any = [];

    this.editRuleIndex = rule.tempId;

    // this.companyRulesArray.forEach((ele, index) => {
    //   if (ele.tempId === this.editRuleIndex) {
    //     this.companyRulesArray.splice(index, 1);
    //   }
    // });
    this.temporaryArray.forEach((ele:any, index:any) => {
      if (ele.tempId === this.editRuleIndex) {
        this.temporaryArray.splice(index, 1);
      }
    });
    console.log(this.companyRulesArray);
    this.filterArrayValues(this.companyRulesArray);
    // this.filterArrayValues(this.temporaryArray);

    this.invoiceDetails['values'].forEach((element:any) => {
      // if (element.showRule !== true) {
      let apiObject = {
        carrier: this.invoiceDetails['carrier'],
        typeOfInvoice: element.typeOfInvoice,
        originZip: element.originZip,
        originState: element.originState,
        destinationZip: element.destinationZip,
        destinationState: element.destinationState,
        pallets: element.pallets,
        class: element.class,
        weight: element.weight,
        fuelCharge: element.fuelCharge,
        invoiceAmount: element.invoiceAmount,
        assessorial: element.assessorial,
        companyId: this.companyInformation.id,
        pieces: element.pallets,
        assessorialCharge: element.assessorialCharge,
        rateResponse: element.rateResponse,
        slNo: element.slNo,
        id: element.id,
        shipmentDate: element.shipmentDate,
        selected: element.selected,
        rules: element.rules,
        selectedCarrier: this.invoiceDetails['carrier']
      }

      fullArray.push(apiObject);
      // } 
      // else {
      //   this.ruleAppliedArray.push(element);
      // }
    });
    console.log('full', fullArray);
    console.log('array', this.arrayValues);
    this.fullArray = fullArray;
  }

  disableRule(event:any, rule:any, i:any) {
    console.log(rule);
    console.log(event);
    console.log(this.temporaryArray);
    let fullArray:any = [];

    this.editRuleIndex = rule.tempId;
    if (event.target.checked === false) {
      console.log(rule);
      this.enabletempId.push({ tempId: rule.tempId });
      console.log('this.enabletempId', this.enabletempId);
      // this.companyRulesArray.forEach((ele, index) => {
      //   if (ele.tempId === this.editRuleIndex) {
      //     ele.toggleEnabled = false;
      //   }
      // });
      this.temporaryArray.forEach((ele:any, index:any) => {
        if (ele.tempId === this.editRuleIndex) {
          ele.toggleEnabled = false;
        }
      });
    } else {
      if (this.enabletempId.length > 0) {
        this.enabletempId.forEach((el:any, i:any) => {
          if (el.tempId === rule.tempId) {
            this.enabletempId.splice(i, 1);
          }
        });
      }
      // this.companyRulesArray.forEach((ele, index) => {
      //   if (ele.tempId === this.editRuleIndex) {
      //     ele.toggleEnabled = true;
      //   }
      // });
      this.temporaryArray.forEach((ele:any, index:any) => {
        if (ele.tempId === this.editRuleIndex) {
          ele.toggleEnabled = true;
        }
      });
    }
    // this.companyRulesArray.forEach((ele, index) => {
    //   if (ele.tempId === this.editRuleIndex) {
    //    ele.toggleEnabled = false;
    //   }
    // });
    // this.temporaryArray.forEach((ele, index) => {
    //   if (ele.tempId === this.editRuleIndex) {
    //     ele.toggleEnabled = false;
    //   }
    // });
    console.log(this.companyRulesArray);
    this.filterArrayValues(this.companyRulesArray);
    // this.filterArrayValues(this.temporaryArray);

    this.invoiceDetails['values'].forEach((element:any) => {
      // if (element.showRule !== true) {
      let apiObject = {
        carrier: this.invoiceDetails['carrier'],
        typeOfInvoice: element.typeOfInvoice,
        originZip: element.originZip,
        originState: element.originState,
        destinationZip: element.destinationZip,
        destinationState: element.destinationState,
        pallets: element.pallets,
        class: element.class,
        weight: element.weight,
        fuelCharge: element.fuelCharge,
        invoiceAmount: element.invoiceAmount,
        assessorial: element.assessorial,
        companyId: this.companyInformation.id,
        pieces: element.pallets,
        assessorialCharge: element.assessorialCharge,
        rateResponse: element.rateResponse,
        slNo: element.slNo,
        id: element.id,
        shipmentDate: element.shipmentDate,
        selected: element.selected,
        rules: element.rules,
        selectedCarrier: this.invoiceDetails['carrier']
      }

      fullArray.push(apiObject);
      // } 
      // else {
      //   this.ruleAppliedArray.push(element);
      // }
    });
    console.log('full', fullArray);
    console.log('array', this.arrayValues);
    this.fullArray = fullArray;
  }

  disableRule1(event:any, rule:any, i:any) {
    console.log('business',rule);
    console.log(event);
    console.log(this.temporaryArray);
    let fullArray = [];

    this.editRuleIndex = rule.id;
    if (event.target.checked === false) {
      console.log(rule);
      this.enabletempId.push({ tempId: rule.id });
      console.log('this.enabletempId', this.enabletempId);
      this.companyRulesArray.forEach((ele:any, index:any) => {
        console.log(rule.type === ele.type)
        if(rule.type === ele.type) {

        this.filteredRulesArray.forEach((mem:any) => {
        console.log('condition',ele.id === this.editRuleIndex && mem.id === this.editRuleIndex);
        console.log('condition1',mem, this.editRuleIndex);
        console.log('cond', mem);

        if (ele.id === this.editRuleIndex && mem.id === this.editRuleIndex) {
            ele.toggleEnabled = false;
            ele.sameRule = false;
            ele.ruleExist = false;
            mem.sameRule = false;
            mem.ruleExist = false;
            mem.toggleEnabled = false;
            console.log(ele);
          }  else {
            ele.sameRule = true;
          ele.ruleExist = false;
          mem.sameRule = true;
          mem.ruleExist = true;
          // mem.toggleEnabled = true;
          console.log('el',ele)
          }
      });
    }
      });
      console.log(this.companyRulesArray);
      // this.temporaryArray.forEach((ele, index) => {
      //   if (ele.tempId === this.editRuleIndex) {
      //     ele.toggleEnabled = false;
      //   }
      // });
    } else {
      if (this.enabletempId.length > 0) {
        this.enabletempId.forEach((el:any, i:any) => {
          if (el.id === rule.id) {
            this.enabletempId.splice(i, 1);
          }
        });
      }
      this.companyRulesArray.forEach((ele:any, index:any) => {
        if (ele.id === this.editRuleIndex) {
          console.log(ele);
          ele.toggleEnabled = true;
          ele.sameRule = true;
          ele.ruleExist = false;
        }
      });
    }
  }

  disableRule2() {
    // console.log('business',rule);
    console.log('event', this.filteredRulesArray);
    let fullArray = [];

    // this.editRuleIndex = rule.tempId;
      // console.log(rule);
      // this.enabletempId.push({ tempId: rule.tempId });
      // console.log('this.enabletempId', this.enabletempId);
      this.companyRulesArray.forEach((ele:any, index:any) => {
        this.filteredRulesArray.forEach((mem:any) => {
          if (ele.id === mem.id) {
            ele.sameRule = true;
            ele.ruleExist = false;
            mem.sameRule = true;
            mem.ruleExist = false;
          }
        })
        // if (ele.tempId === this.editRuleIndex) {
          ele.toggleEnabled = false;
        // }
      });
      console.log(this.companyRulesArray)

      // this.temporaryArray.forEach((ele, index) => {
      //   if (ele.tempId === this.editRuleIndex) {
      //     ele.toggleEnabled = false;
      //   }
      // });
    
  }
  selectAll(event:any) {
    console.log(event);
    this.selectAllValue = event.target.checked;
    if (this.workbookForm.value.carrier === 'FEDEX ECONOMY') {
      if (this.outboundArray.length > 0) {
        this.outboundArray.forEach((ele:any) => {
          ele.economySelected = event;
          ele.selected = event;
        });
      }
      if (this.inboundArray.length > 0) {
        this.inboundArray.forEach((elem:any) => {
          elem.economySelected = event;
          elem.selected = event;
        });
      }
      if (this.thirdPartyArray.length > 0) {
        this.thirdPartyArray.forEach((el:any) => {
          el.economySelected = event;
          el.selected = event;
        });
      }
    } else if (this.workbookForm.value.carrier === 'FEDEX PRIORITY') {
      if (this.outboundArray.length > 0) {
        this.outboundArray.forEach((ele:any) => {
          ele.prioritySelected = event;
          ele.selected = event;
        });
      }
      if (this.inboundArray.length > 0) {
        this.inboundArray.forEach((elem:any) => {
          elem.prioritySelected = event;
          elem.selected = event;
        });
      }
      if (this.thirdPartyArray.length > 0) {
        this.thirdPartyArray.forEach((el:any) => {
          el.prioritySelected = event;
          el.selected = event;
        });
      }
    } else if (this.workbookForm.value.carrier === 'YRC') {
      if (this.outboundArray.length > 0) {
        this.outboundArray.forEach((ele:any) => {
          ele.yrcSelected = event.target.checked;
          ele.selected = event.target.checked;
        });
      }
      if (this.inboundArray.length > 0) {
        this.inboundArray.forEach((elem:any) => {
          elem.yrcSelected = event.target.checked;
          elem.selected = event.target.checked;
        });
      }
      if (this.thirdPartyArray.length > 0) {
        this.thirdPartyArray.forEach((el:any) => {
          el.yrcSelected = event.target.checked;
          el.selected = event.target.checked;
        });
      }
    } else if (this.workbookForm.value.carrier === 'REDDAWAY') {
      if (this.outboundArray.length > 0) {
        this.outboundArray.forEach((ele:any) => {
          ele.reddawaySelected = event;
          ele.selected = event;
        });
      }
      if (this.inboundArray.length > 0) {
        this.inboundArray.forEach((elem:any) => {
          elem.reddawaySelected = event;
          elem.selected = event;
        });
      }
      if (this.thirdPartyArray.length > 0) {
        this.thirdPartyArray.forEach((el:any) => {
          el.reddawaySelected = event;
          el.selected = event;
        });
      }
    }
    this.tableVables();

    console.log(this.outboundArray, this.inboundArray, this.thirdPartyArray);

  }

  openRequestApproval() {
    if (this.selectedAnalyticsCodeData !== undefined) {
    // $('#ApprovalRequestModal').modal('show');
     Swal.fire({
  title: "Are you sure ?",
  text: "This analytics sheet will be sent to bruce for approval.",
  icon: "warning"
//  buttons: {
//     cancel: 'No',
//     confirm: "Yes",
//   }
}).then((willDelete) => {
  if (willDelete) {
    // swal("Request for approval sent successfully !", {
    //   icon: "success",
    // }).then((continueflow) => {
   this.sendRequestForapproval();
    // });
    // this.sendApproval();
  } else {
    Swal.fire("Request for approval has been cancelled", 
     "error"
    );
  }
});
  } else {
    let date, month, hour, minutes, seconds;
    var today = new Date();
    var sec = today.getSeconds();
    var min = today.getMinutes();
    var hr = today.getHours();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    if (dd < 10) {
      date = '0' + dd;
    } else {
      date = dd;
    }
    if (mm < 10) {
      month = '0' + mm;
    } else {
      month = mm;
    }
    if (sec < 10) {
      seconds = '0' + sec;
    } else {
      seconds = sec;
    }
    if (min < 10) {
      minutes = '0' + min;
    } else {
      minutes = min;
    }
    if (hr < 10) {
      hour = '0' + hr;
    } else {
      hour = hr;
    }
    var yyyy = today.getFullYear();
    console.log(date, month, yyyy);
    let companyName = (this.companyInformation.companyName).replace(/\s/g, "");
    this.savinganalyticsCode = companyName + '_' + month + date + yyyy + hour + minutes + seconds;
    this.saveData2(this.workbookForm.value, this.accessorialFormAP.value, this.accessorialFormAR.value);

    setTimeout(() => {
      Swal.fire({
        title: "Are you sure ?",
        text: "This analytics sheet will be sent to bruce for approval.",
        icon: "warning",
      //  buttons: {
      //     cancel: 'No',
      //     confirm: "Yes",
      //   }
      }).then((willDelete) => {
        if (willDelete) {
          // swal("Request for approval sent successfully !", {
          //   icon: "success",
          // }).then((continueflow) => {
         this.sendRequestForapproval();
          // });
          // this.sendApproval();
        } else {
          Swal.fire("Request for approval has been cancelled",
            "error"
          );
        }
      });
    }, 7000);
  }
} 
  // sendApproval() {
  //   // $('#ApprovalRequestModal').modal('hide');
  //   alert('Request for approval sent successfully');

  // }
  // closeApproval() {
  //   // $('#ApprovalRequestModal').modal('hide');

  // }
  sendRequestForapproval() {
       if (this.selectedAnalyticsCodeData !==undefined) {
      let apiObject =  {
    "salesRepId": this.companyInformation.idSalesRep,
    "companyId": this.companyInformation.id,
    "analyticsId": this.selectedAnalyticsCodeData.analyticsId,
    "status": "requested"
  }
  this.invoiceService.approvalWorkbookRequest(apiObject).subscribe((res:any) => {
    console.log(res);
    if(res !== undefined ) {
      
      Swal.fire("Your request filename ("+ this.selectedAnalyticsCodeData.filterValue+") has been sent to Bruce for approval successfully!",
      "success",
    )
    } else {
       Swal.fire("There is a problem with sending request.PLease try again !", 
      "error"
    );
    }
  })

      } else {
        let object = this.companyInformation.id;
        this.invoiceService.getAnalyticsCode(object).subscribe((response: any) => {
          console.log(response);
          if (response.length > 0) {
//             response.forEach((el,index) => {
// if(index === response.length - 1) {

// }
//             })
            // response.length -1

            let apiObject =  {
              "salesRepId": this.companyInformation.idSalesRep,
              "companyId": this.companyInformation.id,
              "analyticsId": response[0].id,
              "status": "requested"
            }
            this.invoiceService.approvalWorkbookRequest(apiObject).subscribe((res:any) => {
              console.log(res);
              if(res !== undefined ) {
                
                Swal.fire("Your request filename ("+ this.selectedAnalyticsCodeData.filterValue+") has been sent to Bruce for approval successfully!", 
               "success"
              )
              } else {
                 Swal.fire("There is a problem with sending request.PLease try again !", 
                 "error"
              );
              }
            })
            // this.showFiles = true;
            // this.buildForm();
            // this.analyticsCode = response;

          }
        });
      }
      // else {
      //   swal("Please save the data and ask for approval request", {
      //     icon: "error"
      //  });
      //   // this.saveData(this.workbookForm, this.accessorialFormAP, this.accessorialFormAR)
      //   // swal({
      //   //   title: "Save the data",
      //   //   text: "Please save the data ",
      //   //   icon: "warning",
      //   //  buttons: {
      //   //     cancel: 'No',
      //   //     confirm: "Yes",
      //   //   }
      //   // }).then((willDelete) => {
      //   //   if (willDelete) {
      //   //     // swal("Request for approval sent successfully !", {
      //   //     //   icon: "success",
      //   //     // }).then((continueflow) => {
      //   //    this.sendRequestForapproval();
      //   //     // });
      //   //     // this.sendApproval();
      //   //   } else {
      //   //     swal("Request for approval has been cancelled", {
      //   //        icon: "error"
      //   //     });
      //   //   }
      //   // });
      // }
  }
  openContractPage() {
    this.exportContract1();
  }

  editShippingManager() {

  }

  printContract() {
    let temporaryArray = [];
    let pushArray:any = [];
    let datadirections, discountData, discountValue;
    this.fxfeApArray = [];
this.fxfeArArray = [];
this.fxfpApArray = [];
this.fxfpArArray = [];
this.yrcApArray = [];
this.yrcArArray = [];
this.reddawayApArray = [];
this.reddawayArArray = [];
this.fedexRowspan = 0;
this.priorityrowspan = 0;
this.yrcrowspan = 0;
this.reddawayrowspan = 0;
this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, 'apicarrier').subscribe((elem: any) => {
  console.log(elem);
  console.log(this.temporaryArray);
  let datarules;
  let object = {
    companyName: this.companyInformation.companyName,
    BusinessRulesNew: []
  }
  console.log(object)
  pushArray.push(object);
  this.companyResponse = pushArray;
  console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
  if (this.companyRulesArray.length > 0) {
    console.log(this.companyRulesArray);
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      // ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      // ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      // ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      // ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    // this.companyRulesArray =  this.companyRulesArray.filter(e => e.toggleEnabled === true);

  } else {
  if (this.temporaryArray.length > 0) {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    this.companyRulesArray = this.companyRulesArray.concat(this.temporaryArray)
  } else {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    })
  }
}
  console.log('companyrulesArray', this.companyRulesArray);
  this.companyRulesArray.forEach((el:any, index:any) => {
    el.tempId = index + 1;
  })
  // this.filterArrayValues(this.companyRulesArray);
  let length = 0;
  for (let i =0; i<this.companyRulesArray.length;i++) {
    
    let element = this.companyRulesArray[i];
    if (element.ruleExist === true){

    
    let  zipState;
    if (element.type === 'FEDEX ECONOMY') {
      console.log(element);
      if (element.category === 'AP') {
    
        console.log(element);
if (element.specificStateFlag ==='true') {

if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
} else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
console.log(element.specificCityList1,element.specificCityList2)
zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
} else if ((element.specificStateList1.length >0 || element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 || element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] ;
} else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
}

}
let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist

        }
        this.fxfeApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            console.log(element.specificCityList1,element.specificCityList2)
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfeArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'FEDEX PRIORITY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'YRC') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList2.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificStateList1.length >0 &&  element.specificCityList2.length > 0) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList2[0];
            console.log('sttt',zipState, element);
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
           console.log(element.specificCityList1, element.specificCityList2[0]);
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'REDDAWAY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayArArray.push(fxfeObject);
        length = length + 1;
      }
    
    }
    if (length === this.companyRulesArray.length) {
      break;
    }
  }
  }


  this.fedexRowspan = this.fxfeApArray.length +  this.fxfeArArray.length;
  this.priorityrowspan = this.fxfpApArray.length + this.fxfpArArray.length;
  this.yrcrowspan = this.yrcApArray.length + this.yrcArArray.length;
  this.reddawayrowspan = this.reddawayApArray.length + this.reddawayArArray.length;
  console.log('ECO',this.fxfeApArray,this.fxfeArArray);
  console.log('PRI',this.fxfpApArray,this.fxfpArArray);
  console.log('yrc',this.yrcApArray,this.yrcArArray);
  console.log('red',this.reddawayApArray,this.reddawayArArray);
  let contractarray:any = [];
  this.territoryArray = [];
  this.additionalPricingArray = [];
  this.contractAccessorialsArray = []
  let contractfilterArray = contractarray.concat(this.fxfeApArray,this.fxfeArArray,this.fxfpApArray,this.fxfpArArray,this.yrcApArray,this.yrcArArray,this.reddawayApArray,this.reddawayArArray);
console.log(contractfilterArray);
this.territoryArray = contractfilterArray.filter((f:any) => f.rulesName !== 'SPECIAL RULES');
console.log(this.territoryArray)
 this.additionalPricingArray = contractfilterArray.filter((f:any) => f.rulesName === 'SPECIAL RULES');
 let contractfilterAccessorialsArray = contractfilterArray.filter((f:any) => f.accessorials.length > 0);
 console.log(contractfilterAccessorialsArray);
 contractfilterAccessorialsArray.forEach((mm:any) => {
console.log(mm);
mm.accessorials.forEach((ll:any) => {
  if (ll.charge !== null && ll.charge !== '' && ll.charge !== undefined) {
  this.contractAccessorialsArray.push({"carrier": mm.carrier, 'name':ll.name,'charge':ll.charge});
  }
})
 });
 this.costplusArray = [];
 if (this.companyInformation.costPlusFactor !== undefined) {
  this.costplusArray = this.companyInformation.costPlusFactor 

 }


});
this.showeditContract = true;
    $('#ContractModalNew1').modal('show');
    this.printContract1();
  }
  printContract1() {
    setTimeout(() => {
      console.log('text');
      const printContent = (document.getElementById('section4')as HTMLFormElement).innerHTML;
      const WindowPrt:any = window.open('', '', 'left=0,top=0,width=1400,height=1300,toolbar=0,scrollbars=0,status=0');
      WindowPrt.document.write('<html><head></head><body onload="window.print()">' + printContent + '</body></html>');
      WindowPrt.document.close();
      WindowPrt.focus();
      WindowPrt.print();
      $('#ContractModal2').modal('hide');

      // WindowPrt.close();
  }, 3000);

  }
  showContractModal() {
    console.log('weyrfweytrfwet');
    let temporaryArray = [];
    let pushArray:any = [];
    let datadirections, discountData, discountValue;
    this.fxfeApArray = [];
this.fxfeArArray = [];
this.fxfpApArray = [];
this.fxfpArArray = [];
this.yrcApArray = [];
this.yrcArArray = [];
this.reddawayApArray = [];
this.reddawayArArray = [];
this.fedexRowspan = 0;
this.priorityrowspan = 0;
this.yrcrowspan = 0;
this.reddawayrowspan = 0;
this.displayShipmentName = undefined;
if (this.companyInformation.paymentTerms === null) {
  this.companyInformation.paymentTerms = '20';
}
if (this.companyInformation.specificPricing === false) {
  this.showSecondAddress = true;
} else {
  if (this.companyInformation.specificPricingList.length > 0) {
    if (this.companyInformation.specificPricingList.length >1) {
      this.showSecondAddress = false;
      this.showFirstAddress = true;
     this.companyInformation.specificPricingList.forEach((element:any) => {
       if (element === 'YRC') {
         if (this.displayShipmentName === undefined) {
          this.displayShipmentName = 'YRC';

         } else {
           this.displayShipmentName = this.displayShipmentName + ' and YRC';

         }
       } else if (element === 'FEDEX ECONOMY' || element === 'FEDEX PRIORITY') {
        if (this.displayShipmentName === undefined) {
          this.displayShipmentName = 'Fedex';

         } else {
           this.displayShipmentName = this.displayShipmentName + ' and Fedex';

         }
       }
     })

    } else {
      // this.showSecondAddress = true;
      this.showFirstAddress = true;
      this.companyInformation.specificPricingList.forEach((element:any) => {
        if (element === 'YRC') {
          if (this.displayShipmentName === undefined) {
           this.displayShipmentName = 'YRC';
 
          } else {
            this.displayShipmentName = this.displayShipmentName + ' and YRC';
 
          }
        } else if (element === 'FEDEX ECONOMY' || element === 'FEDEX PRIORITY') {
         if (this.displayShipmentName === undefined) {
           this.displayShipmentName = 'Fedex';
 
          } else {
            this.displayShipmentName = this.displayShipmentName + ' and Fedex';
 
          }
        }
      })
    }
  }
}
this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, 'apicarrier').subscribe((elem: any) => {
  console.log(elem);
  console.log(this.temporaryArray);
  let datarules;
  let object = {
    companyName: this.companyInformation.companyName,
    BusinessRulesNew: []
  }
  console.log(object)
  pushArray.push(object);
  this.companyResponse = pushArray;
  console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
  if (this.companyRulesArray.length > 0) {
    console.log(this.companyRulesArray);
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      // ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      // ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      // ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      // ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    // this.companyRulesArray =  this.companyRulesArray.filter(e => e.toggleEnabled === true);

  } else {
  if (this.temporaryArray.length > 0) {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    this.companyRulesArray = this.companyRulesArray.concat(this.temporaryArray)
  } else {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    })
  }
}
  console.log('companyrulesArray', this.companyRulesArray);
  this.companyRulesArray.forEach((el:any, index:any) => {
    el.tempId = index + 1;
  })
  // this.filterArrayValues(this.companyRulesArray);
  let length = 0;
  for (let i =0; i<this.companyRulesArray.length;i++) {
    
    let element = this.companyRulesArray[i];
    // if (element.ruleExist === true){

    
    let  zipState;
    if (element.type === 'FEDEX ECONOMY') {
      console.log(element);
      if (element.category === 'AP') {
    
        console.log(element);
if (element.specificStateFlag ==='true') {

if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
} else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
console.log(element.specificCityList1,element.specificCityList2)
zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
} else if ((element.specificStateList1.length >0 || element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 || element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] ;
} else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
}

}
let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist

        }
        this.fxfeApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            console.log(element.specificCityList1,element.specificCityList2)
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfeArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'FEDEX PRIORITY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'YRC') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
           console.log(element.specificCityList1, element.specificCityList1[0]);
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'REDDAWAY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayArArray.push(fxfeObject);
        length = length + 1;
      }
    
    }
    if (length === this.companyRulesArray.length) {
      break;
    }
  // }
  }


  this.fedexRowspan = this.fxfeApArray.length +  this.fxfeArArray.length;
  this.priorityrowspan = this.fxfpApArray.length + this.fxfpArArray.length;
  this.yrcrowspan = this.yrcApArray.length + this.yrcArArray.length;
  this.reddawayrowspan = this.reddawayApArray.length + this.reddawayArArray.length;
  console.log('ECO',this.fxfeApArray,this.fxfeArArray);
  console.log('PRI',this.fxfpApArray,this.fxfpArArray);
  console.log('yrc',this.yrcApArray,this.yrcArArray);
  console.log('red',this.reddawayApArray,this.reddawayArArray);
  let contractarray:any = [];
  this.territoryArray = [];
  this.additionalPricingArray = [];
  this.contractAccessorialsArray = []
  this.specialRulesAccessorialArray = [];
  let contractfilterArray = contractarray.concat(this.fxfeArArray,this.fxfpArArray,this.yrcArArray,this.reddawayArArray);
console.log(contractfilterArray);
this.territoryArray = contractfilterArray.filter((f:any) => f.rulesName !== 'SPECIAL RULES');
console.log(this.territoryArray)
 this.additionalPricingArray = contractfilterArray.filter((f:any) => f.rulesName === 'SPECIAL RULES');
 let contractfilterAccessorialsArray = contractfilterArray.filter((f:any) => f.accessorials.length > 0);
 console.log('stac',contractfilterAccessorialsArray);
 this.contractAccessorialsArray = contractfilterAccessorialsArray;
//  contractfilterAccessorialsArray.forEach((mm) => {
// console.log(mm);
// mm.accessorials.forEach((ll) => {
//   if (ll.charge !== null && ll.charge !== '' && ll.charge !== undefined) {
//     if (mm.carrier === 'FEDEX ECONOMY') {
//       if (mm.rulesName === 'REGIONAL') {
//   this.contractAccessorialsArray.push({"carrier": mm.carrier, 'rulesName':mm.rulesName,'name':ll.name,'charge':ll.charge,'zip':mm.zipstate});
//   }
//   if (mm.carrier === 'SPECIAL RULES') {
//     this.specialRulesAccessorialArray.push({"carrier": mm.carrier, 'rulesName':mm.rulesName,'name':ll.name,'charge':ll.charge,'zip':mm.zipstate})
//   }
// }
// }
// })
//  });
 console.log(this.contractAccessorialsArray);
 this.costplusArray = [];
 if (this.companyInformation.costPlusFactor !== null) {
  this.costplusArray = this.companyInformation.costPlusFactor 

 }
 console.log(this.costplusArray);

})
    console.log(this.companyRulesArray);
  console.log(this.fedexRowspan);

 
    $('#ContractModal').modal('show');
  }
  sharecontract(){

  }

  getCompanyExistingRules() {
    this.customerService.getAllCompanyDataByIdWorkbook(this.accessToken, this.companyInformation.id).subscribe((res:any) => {
      console.log(res);
      if (res.length > 0) {
      this.existingCompanyRules = res[0].BusinessRulesNew;
      } else {
        this.existingCompanyRules = [];
      }
        });

        this.existingCompanyRules.forEach((ele:any) => {
          ele.fakRange = ele.fakRange;
          ele.fak = ele.fak;
          ele.fakValue = ele.fak;
          ele.specificStateList1 = JSON.parse(ele.specificStateList1);
          ele.specificStateList2 = JSON.parse(ele.specificStateList2);
          ele.specificCityList1 = JSON.parse(ele.specificCityList1);
          ele.specificCityList2 = JSON.parse(ele.specificCityList2);
        })
        
  }
  public pdf() {
    const doc:any = new jsPDF();
    const specialElementHandlers = {
        '#editor': function (element:any, renderer:any) {
            return true;
        }
    };
    // let content = this.content.nativeElement;
    doc.fromHTML($('#content').html(), 17, 17, {
        'width': 500,
        'elementHandlers': specialElementHandlers
    });
    //doc.save('sample-file.pdf');
}


checkcontractKey(event:any,type:any) {
  if (event.keyCode === 13) {
    if (type === 'firstdate') {
      this.focusinputItem();
    } else if(type === 'name') {
      // this.next(this.shippingManagerName);
      this.focusinputItemDate1();
    } else if (type === 'post') {
      // this.next(this.shippingManagerName);
      // this.savecontractNames();
      setTimeout(() => {
        $('#shippingAddress').focus();
      }, 1000);
      
      // this.focusinputItemDate2();
    } else if (type === 'address') {
            this.focusinputItemDate2();

    }
    else if (type === 'secondDate') {
      this.saveAnalyticsusingId();
    } else if (type ==="billTo") {
        console.log(this.selectedAnalyticsCodeData);
      if(this.selectedAnalyticsCodeData !== undefined) {
        this.saveAnalyticsusingId();
            $('#ContractModalNew').modal('hide');
      }
      
    } else if (type === 'billadd1') {
      // this.next(this.shippingManagerName);
      // this.savecontractNames();
      setTimeout(() => {
        $('#billadd2').focus();
      }, 1000);
      
      // this.focusinputItemDate2();
    } else if (type === 'billadd2') {
      // this.next(this.shippingManagerName);
      // this.savecontractNames();
      setTimeout(() => {
        $('#billadd3').focus();
      }, 1000);
      
      // this.focusinputItemDate2();
    } else if (type === 'billadd3') {
      // this.next(this.shippingManagerName);
      // this.savecontractNames();
      setTimeout(() => {
        $('#billadd4').focus();
      }, 1000);
      
      // this.focusinputItemDate2();
    }
  }

}
saveAnalyticsusingId() {
  console.log(this.selectedAnalyticsCodeData);
  console.log(this.shippingManagerName, this.shippingManagerPost, this.contractAddrss,this.firstDate, this.secondDate);
  if (this.firstDate === null || this.firstDate === '') {
    this.firstDate = this.datePipe.transform(new Date(),"MM/dd/yyyy");
  }
  this.billtoAddress = this.billadd1 + '\n' + this.billadd2 + '\n' + this.billadd3 + '\n' + this.billadd4;
  let object =  
    {
      "companyId": this.companyInformation.id,
      "code": this.selectedAnalyticsCodeData.filterValue,
      "notes": this.selectedAnalyticsCodeData.notes,
      "contractPerson": this.shippingManagerName,
      "contractPosition": this.shippingManagerPost,
      "contractAddress": this.contractAddrss,
      "contractDate": this.firstDate,
      "id": this.selectedAnalyticsCodeData.analyticsId,
      "billToAddress" :this.billtoAddress
    }
    console.log(object);
    this.invoiceService.analyticscodebyId(object).subscribe((res:any) => {
      console.log(res);
    })
  
}

savecontractNames() {
  console.log(this.shippingManagerName, this.shippingManagerPost);
}

next(customerForm:any) {
  console.log('customerForm', customerForm, this.companyInformation);
  // if (customerForm !== undefined) {
    if (this.companyInformation !== null && this.companyInformation !== undefined) {
      if (this.companyInformation.id !== 0) {
        // customerForm.salesRepName = customerForm.salesRepId;
        // customerForm.salesRepId = this.loginDetails.id;
        // customerForm.createdBy = this.loginDetails.id;
        // customerForm.companyName = customerForm.companyName.toUpperCase();
        this.companyInformation.contactPersonName = customerForm;
        this.invoiceService.updateCustomerInfo( this.companyInformation).subscribe((response:any) => {
          console.log('response', response);
          this.companyInformation = response;
          this.setCustomerObject();
          // let passingObject = undefined;
          // this.invoiceService.setAnalyticsCode(passingObject);
          // this.router.navigate(['/uploadWorksheet']);
        }, (err:any) => {
          // customerForm.salesRepName = customerForm.salesRepId;
          // customerForm.salesRepId = this.loginDetails.id;
          // customerForm.createdBy = this.loginDetails.id;
          // customerForm.companyName = customerForm.companyName.toUpperCase();
          // this.companyInformation = customerForm;

          // this.setCustomerObject();
          // let passingObject = undefined;
          // this.invoiceService.setAnalyticsCode(passingObject);
          // this.router.navigate(['/uploadWorksheet']);
        });
      } 
      // else {
      //   this.setCustomerObject();
      //   let passingObject = undefined;
      //   this.invoiceService.setAnalyticsCode(passingObject);
      //   this.router.navigate(['/uploadWorksheet']);
      // }
    } 
    // else {
    //   customerForm.salesRepName = customerForm.salesRepId;
    //     customerForm.salesRepId = this.loginDetails.id;
    //     customerForm.createdBy = this.loginDetails.id;
    //     customerForm.companyName = customerForm.companyName.toUpperCase();
    //     this.invoiceService.saveCustomerInfo(customerForm).subscribe(response => {
    //       console.log('response', response);
    //       this.companyInformation = response;
    //       this.setCustomerObject();
    //       let passingObject = undefined;
    //       this.invoiceService.setAnalyticsCode(passingObject);
    //       // this.router.navigate(['/uploadWorksheet']);
    //     }, err => {
    //       customerForm.salesRepName = customerForm.salesRepId;
    //       customerForm.salesRepId = this.loginDetails.id;
    //       customerForm.createdBy = this.loginDetails.id;
    //       customerForm.companyName = customerForm.companyName.toUpperCase();
    //       this.companyInformation = customerForm;

    //       this.setCustomerObject();
    //       let passingObject = undefined;
    //       this.invoiceService.setAnalyticsCode(passingObject);
    //       this.router.navigate(['/uploadWorksheet']);
    //     });
    //   // this.setCustomerObject();
    //   // this.router.navigate(['/Invoice']);
    // }
  // } 
  // else {
  //   let passingObject = undefined;
  //   this.invoiceService.setAnalyticsCode(passingObject);
  //   this.router.navigate(['/uploadWorksheet']);
  // }
}
  exportContract1() {
    let temporaryArray = [];
    let pushArray:any = [];
    let datadirections, discountData, discountValue;
    this.fxfeApArray = [];
this.fxfeArArray = [];
this.fxfpApArray = [];
this.fxfpArArray = [];
this.yrcApArray = [];
this.yrcArArray = [];
this.reddawayApArray = [];
this.reddawayArArray = [];
this.fedexRowspan = 0;
this.priorityrowspan = 0;
this.yrcrowspan = 0;
this.reddawayrowspan = 0;
console.log(this.companyInformation);
if (this.selectedAnalyticsCodeData !== undefined) {
  console.log(this.selectedAnalyticsCodeData);
  if (this.selectedAnalyticsCodeData.billToAddress !== undefined && this.selectedAnalyticsCodeData.billToAddress !== null) {
    console.log('test1')
    let splitt = this.selectedAnalyticsCodeData.billToAddress.split('\n');
    console.log(splitt);
    if (splitt.length > 0) {
      this.billadd1 = splitt[0];
      this.billadd2 = splitt[1];
      this.billadd3 = splitt[2];
      this.billadd4 = splitt[3];
    } else {
      this.billadd1 = this.companyInformation.companyName;
      this.billadd2 = 'C/O Forte,';
      this.billadd3 = '301 54th Ave East,';
      this.billadd4 = 'Suite 200,Fife, WA 98424';
    }
// this.billtoAddress = this.selectedAnalyticsCodeData.billToAddress
  } else {
    console.log('test2');
    this.billadd1 = this.companyInformation.companyName;
    this.billadd2 = 'C/O Forte,';
    this.billadd3 = '301 54th Ave East,';
    this.billadd4 = 'Suite 200,Fife, WA 98424';
    // this.billtoAddress = this.companyInformation.companyName + " \nC/O Forte, \n301 54th Ave East, \nSuite 200,Fife, WA 98424";
  }
  if (this.selectedAnalyticsCodeData.contractPerson !== null && this.selectedAnalyticsCodeData.contractPerson !== undefined) {
    this.shippingManagerName = this.selectedAnalyticsCodeData.contractPerson;
  } else {
    this.shippingManagerName = this.companyInformation.contactPersonName;
  }
  if (this.selectedAnalyticsCodeData.contractPosition !== null && this.selectedAnalyticsCodeData.contractPosition !== undefined) {
    this.shippingManagerPost = this.selectedAnalyticsCodeData.contractPosition;
  } else if(this.companyInformation.contactPersonDesignation !== null && this.companyInformation.contactPersonDesignation !== '' && this.companyInformation.contactPersonDesignation !== undefined){
    this.shippingManagerPost = this.companyInformation.contactPersonDesignation
  } else {
    this.shippingManagerPost = 'Shipping Manager';
  }
  if (this.selectedAnalyticsCodeData.contractAddress !== null && this.selectedAnalyticsCodeData.contractAddress !== undefined) {
    this.contractAddrss = this.selectedAnalyticsCodeData.contractAddress;
  } else {
    this.contractAddrss = this.companyInformation.companyName
  }
  if (this.selectedAnalyticsCodeData.contractDate !== null && this.selectedAnalyticsCodeData.contractDate !== undefined) {
    this.firstDate = this.datePipe.transform(this.selectedAnalyticsCodeData.contractDate,"MM/dd/yyyy");
    this.secondDate = this.datePipe.transform(this.selectedAnalyticsCodeData.contractDate,"MM/dd/yyyy");

  } else {
    this.firstDate = '';
    this.secondDate = '';  }
   
} else {
  this.shippingManagerName = this.companyInformation.contactPersonName
  this.shippingManagerPost = 'Shipping Manager'
  this.firstDate = '';
  this.secondDate = '';
}
this.displayShipmentName = undefined;
this.focusbilltoadd();
// this.focusinputItemDate();
if (this.companyInformation.paymentTerms === null) {
  this.companyInformation.paymentTerms = '20';
}
if (this.companyInformation.specificPricing === false) {
  this.showSecondAddress = true;
} else {
  if (this.companyInformation.specificPricingList !== undefined){
    if (this.companyInformation.specificPricingList.length > 0) {
      if (this.companyInformation.specificPricingList.length >1) {
        this.showSecondAddress = false;
        this.showFirstAddress = true;
       this.companyInformation.specificPricingList.forEach((element:any) => {
         if (element === 'YRC') {
           if (this.displayShipmentName === undefined) {
            this.displayShipmentName = 'YRC';
  
           } else {
             this.displayShipmentName = this.displayShipmentName + ' and YRC';
  
           }
         } else if (element === 'FEDEX ECONOMY' || element === 'FEDEX PRIORITY') {
          if (this.displayShipmentName === undefined) {
            this.displayShipmentName = 'Fedex';
  
           } else {
             this.displayShipmentName = this.displayShipmentName + ' and Fedex';
  
           }
         }
       })
  
      } else {
        // this.showSecondAddress = true;
        this.showFirstAddress = true;
        this.companyInformation.specificPricingList.forEach((element:any) => {
          if (element === 'YRC') {
            if (this.displayShipmentName === undefined) {
             this.displayShipmentName = 'YRC';
   
            } else {
              this.displayShipmentName = this.displayShipmentName + ' and YRC';
   
            }
          } else if (element === 'FEDEX ECONOMY' || element === 'FEDEX PRIORITY') {
           if (this.displayShipmentName === undefined) {
             this.displayShipmentName = 'Fedex';
   
            } else {
              this.displayShipmentName = this.displayShipmentName + ' and Fedex';
   
            }
          }
        })
      }
    }
  }
 
}
this.invoiceService.getWorkBookRule(this.selectedAnalyticsCodeData.analyticsId, 'apicarrier').subscribe((elem: any) => {
  console.log(elem);
  console.log(this.temporaryArray);
  let datarules;
  let object = {
    companyName: this.companyInformation.companyName,
    BusinessRulesNew: []
  }
  console.log(object)
  pushArray.push(object);
  this.companyResponse = pushArray;
  console.log('carrier', this.invoiceDetails['carrier'], this.temporaryArray);
  if (this.companyRulesArray.length > 0) {
    console.log(this.companyRulesArray);
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      // ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      // ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      // ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      // ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    // this.companyRulesArray =  this.companyRulesArray.filter(e => e.toggleEnabled === true);

  } else {
  if (this.temporaryArray.length > 0) {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      console.log(ele);
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    });
    this.companyRulesArray = this.companyRulesArray.concat(this.temporaryArray)
  } else {
    this.companyRulesArray = elem;
    this.companyRulesArray.forEach((ele:any) => {
      ele.fakRange = ele.fakRange;
      ele.fak = ele.fak;
      ele.fakValue = ele.fak;
      ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      ele.specificCityList2 = JSON.parse(ele.specificCityList2);
    })
  }
}
  console.log('companyrulesArray', this.companyRulesArray);
  this.companyRulesArray.forEach((el:any, index:any) => {
    el.tempId = index + 1;
  })
  // this.filterArrayValues(this.companyRulesArray);
  let length = 0;
  for (let i =0; i<this.companyRulesArray.length;i++) {
    
    let element = this.companyRulesArray[i];
    // if (element.ruleExist === true){
if (element.ruleExist !== false) {
    
    let  zipState;
    if (element.type === 'FEDEX ECONOMY') {
      console.log(element);
      if (element.category === 'AP') {
    
        console.log(element);
if (element.specificStateFlag ==='true') {

if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
} else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
console.log(element.specificCityList1,element.specificCityList2)
zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
} else if ((element.specificStateList1.length >0 || element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 || element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] ;
} else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
}

}
let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist

        }
        this.fxfeApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            console.log(element.specificCityList1,element.specificCityList2)
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '' && element.deliveryAppointmentRequired !== null ) {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfeArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'FEDEX PRIORITY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '' && element.deliveryAppointmentRequired !== null) {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.fxfpArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'YRC') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          // if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
          //   zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          // } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
          //   zipState = element.specificStateList1[0] ;
          // } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
          //   zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          // }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
          //  console.log(element.specificCityList1, element.specificCityList1[0]);
          //   zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          // }
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList2.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificStateList1.length >0 &&  element.specificCityList2.length > 0) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList2[0];
          }else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
           console.log(element.specificCityList1, element.specificCityList2[0]);
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.yrcArArray.push(fxfeObject);
        length = length + 1;
      }
    
    } else if (element.type === 'REDDAWAY') {
      console.log(element);
      if (element.category === 'AP') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '') {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayApArray.push(fxfeObject);
        length = length + 1;
      } else if (element.category === 'AR') {
        console.log(element);
        if (element.specificStateFlag ==='true') {
          if (element.specificStateList1.length>0 && element.specificStateList2.length>0) {
            zipState = element.specificStateList1[0] + '-' + element.specificStateList2[0];
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length === 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] ;
          } else if ((element.specificStateList1.length >0 && element.specificStateList2.length === 0) && (element.specificCityList1.length > 0 && element.specificCityList1.length === 0)) {
            zipState = element.specificStateList1[0] + '-' + element.specificCityList1[0];
          } else if (element.specificCityList1.length>0 && element.specificCityList2.length>0) {
            zipState = element.specificCityList1[0] + '-' + element.specificCityList2[0];
          }
        }
        let contractAccess = [];
if (element.liftGate === '' && element.limitedAccessDelivery === '' && element.deliveryAppointmentRequired === '' &&
     element.notify === '' && element.insideDelivery ==='' && element.residential === '' && element.singleShipment === '') {
      contractAccess = [];
     } 
      if (element.liftGate !== '') {
       contractAccess.push({'name':'LiftGate','charge':element.liftGate});
     } 
      if (element.limitedAccessDelivery !== '') {
      contractAccess.push({'name':'LimitedAccessDelivery','charge':element.limitedAccessDelivery});
    } 
     if (element.deliveryAppointmentRequired !== '' && element.deliveryAppointmentRequired !== null) {
      contractAccess.push({'name':'DeliveryAppointmentRequired','charge':element.deliveryAppointmentRequired});
    } 
     if (element.notify !== '') {
      contractAccess.push({'name':'Notify','charge':element.notify});
    } 
     if (element.insideDelivery !== '') {
      contractAccess.push({'name':'InsideDelivery','charge':element.insideDelivery});
    } 
     if (element.residential !== '') {
      contractAccess.push({'name':'Residential','charge':element.residential});
    } 
     if (element.singleShipment !== '') {
      contractAccess.push({'name':'SingleShipment','charge':element.singleShipment});
    }
        let fxfeObject = {
          'rulesName': element.directions,
          'zipstate': zipState,
          'discount': element.discount,
          'amc': element.minCharge,
          'accessorials': contractAccess,
          'carrier': element.type,
          'ruleExist': element.ruleExist
        }
        this.reddawayArArray.push(fxfeObject);
        length = length + 1;
      }
    
    }
  }
    if (length === this.companyRulesArray.length) {
      break;
    }
  // }
  }


  this.fedexRowspan = this.fxfeApArray.length +  this.fxfeArArray.length;
  this.priorityrowspan = this.fxfpApArray.length + this.fxfpArArray.length;
  this.yrcrowspan = this.yrcApArray.length + this.yrcArArray.length;
  this.reddawayrowspan = this.reddawayApArray.length + this.reddawayArArray.length;
  console.log('ECO',this.fxfeApArray,this.fxfeArArray);
  console.log('PRI',this.fxfpApArray,this.fxfpArArray);
  console.log('yrc',this.yrcApArray,this.yrcArArray);
  console.log('red',this.reddawayApArray,this.reddawayArArray);
  let contractarray:any = [];
  this.territoryArray = [];
  this.passingArray = [];
  this.additionalPricingArray = [];
  this.contractAccessorialsArray = []
  this.specialRulesAccessorialArray = [];
  let contractfilterArray = contractarray.concat(this.fxfeArArray,this.fxfpArArray,this.yrcArArray,this.reddawayArArray);
console.log(contractfilterArray);
this.passingArray = contractfilterArray
this.territoryArray = contractfilterArray.filter((f:any) => f.rulesName !== 'SPECIAL RULES');
console.log(this.territoryArray)
 this.additionalPricingArray = contractfilterArray.filter((f:any) => f.rulesName === 'SPECIAL RULES');
 let contractfilterAccessorialsArray = contractfilterArray.filter((f:any) => f.accessorials.length > 0);
 console.log(contractfilterAccessorialsArray);
 this.contractAccessorialsArray = contractfilterAccessorialsArray;

 console.log(this.contractAccessorialsArray);

})
    $('#ContractModal').modal('hide');

    $('#ContractModalNew').modal('show');
    // setTimeout(() => {
    // this.exportContract();

    // },10000)
  }
  focusbilltoadd() {
    setTimeout(() => {
      $('#billadd1').focus();
    }, 1000);
  }
  focusinputItem() {
    setTimeout(() => {
      $('#shippingmanager1').focus();
    }, 1000);
  }

  focusinputItemDate() {
    setTimeout(() => {
      $('#shippingmanager1').focus();
    }, 1000);
  }

focusinputItemDate1() {
  setTimeout(() => {
    $('#shippingmanager2').focus();
  }, 1000);
  
}

focusinputItemDate2() {
  setTimeout(() => {
    $('#secondeditdate').focus();
  }, 1000);
  
}
  exportContract() {
    this.showeditContract = false;
    setTimeout(() =>{
      var data = document.getElementById('capture');
          html2canvas($('#bolContainerNew')[0] ).then((canvas:any) => {
              // Few necessary setting options 
              // var imgWidth = 720;
              // var pageHeight = 1000;
              var imgWidth = 210; 
              var pageHeight = 290;  
              // var pageHeight = 295;
              var imgHeight = canvas.height * imgWidth / canvas.width;
              var heightLeft = imgHeight;
              // alert(canvas.height +'-' + canvas.width);
              const contentDataURL = canvas.toDataURL('image/png');
              let pdf = new jsPDF('p', 'mm'); // A4 size page of PDF 
              var position = 1;
              pdf.addImage(contentDataURL, 'PNG', 1, position, imgWidth, imgHeight)
              heightLeft -= pageHeight;

while (heightLeft >= 0) {
  position = heightLeft - imgHeight;
  pdf.addPage();
  pdf.addImage(contentDataURL, 'PNG', 1, position, imgWidth, imgHeight)
  heightLeft -= pageHeight;
}
              pdf.save(this.selectedAnalyticsCodeData.filterValue + ".pdf"); // Generated PDF 

          });
          setTimeout(() => {
            $('#ContractModal1').modal('hide');

          },40000)
    })
  }
  createContractrules() {
    $('#ContractModal').modal('hide');
    console.log(this.companyRulesArray);
    let api = [];
          let apiArray:any = [];
          let newApiArray:any = [];
     let newRule = [];
     let newRuleNew = [];
     let proposedRule = [];
     let proposedRuleFilter = [];
     let existingPropoed:any = [];
     if (this.firstDate === null || this.firstDate === '') {
      this.firstDate = this.datePipe.transform(new Date(),"MM/dd/yyyy");
    }
     console.log(this.companyRulesArray);
     if (this.companyRulesArray.length > 0) {

     
     newRuleNew  = this.companyRulesArray.filter((f:any) => f.status === 'Existing');
     proposedRule = this.companyRulesArray.filter((f:any) => f.status === 'Proposed');
     existingPropoed = proposedRule.filter((f:any) => f.ruleExist === true);
     proposedRuleFilter = proposedRule.filter((e:any) => e.ruleExist === false);
     proposedRuleFilter.forEach((ele:any) => {
       if (ele.ruleExist === false) {
        ele.id = 0;

       }
     })
     newRule = proposedRule.filter((e:any) =>  e.ruleExist === true);
     console.log(existingPropoed);
    //  newRule = this.companyRulesArray.filter(e => e.ruleExist === true);
     api = this.companyRulesArray.filter((e:any) => e.ruleExist === false);
    console.log(api);
  
    console.log(newRuleNew, newRule);
  
    existingPropoed.forEach((ele:any) => {
     
      if (typeof ele.specificCityList1 === 'string') {
        ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      }
      if (typeof ele.specificCityList2 === 'string') {
        ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      }
      if (typeof ele.specificStateList1 === 'string') {
        ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      }
      if (typeof ele.specificStateList2 === 'string') {
        ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      }
    })

    if (newRule.length >0) {
      newRule.forEach((obj:any,index:any) => {
        existingPropoed.forEach((res:any,i:any) => {
          if (res.directions === obj.directions){
            if (res.type === obj.type) {
            //  if (i + 1 === api.length) {
              if (res.category === obj.category) {
                if (obj.directions==='INTERSTATE' || obj.directions === 'REGIONAL' || obj.directions === 'INTER REGIONAL' || obj.directions === 'REGIONAL INDIRECT') {
                obj.id = res.id;
                newApiArray.push(obj);
              } else if (obj.directions === 'INTRASTATE') {
                console.log(obj,res);
                if ((obj.specificStateList1[0] === res.specificStateList1[0]) && (obj.specificStateList1.length > 0 && res.specificStateList1[0].length > 0)) {
                  obj.id = res.id;
                  newApiArray.push(obj);
                } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificCityList1.length > 0 && res.specificCityList1.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
                }
              } else if (obj.directions === 'SPECIAL RULES') {
                if ((obj.specificStateList1[0] === res.specificStateList1[0]) && (obj.specificStateList2[0] === res.specificStateList2[0]) && (obj.specificStateList1.length > 0 && obj.specificStateList2.length > 0)
                && (res.specificStateList1.length > 0 && res.specificStateList2.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);

              } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificCityList2[0] === res.specificCityList2[0])) {
                obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificStateList2[0] === res.specificStateList2[0]) &&
                (obj.specificCityList1.length > 0 && obj.specificStateList2.length > 0) && (res.specificCityList1.length > 0 && res.specificStateList2.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              } else if ((obj.specificCityList2[0] === res.specificCityList2[0]) && (obj.specificStateList1[0] === res.specificStateList1[0]) &&
                (obj.specificCityList2.length > 0 && obj.specificStateList1.length > 0) && (res.specificCityList2.length > 0 && res.specificStateList1.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              }
              }
              }
              
            //  }
            }
          }
        })
      })
      newRuleNew.forEach((elll:any) => {
        newApiArray.push(elll)
      })
      // newApiArray.push()
    } else {

      newApiArray = newRuleNew;
    }
    console.log(apiArray, newApiArray);
    

    console.log(api,apiArray);
    console.log('proposed',proposedRuleFilter);
    let apiCallArray = [];
    if (proposedRuleFilter.length > 0) {
      apiCallArray = newApiArray.concat(proposedRuleFilter);
    } else {
      console.log(newApiArray);
      apiCallArray = newApiArray;

    }
    // apiCallArray = newApiArray;
    let finalData;
    if (apiCallArray.length > 0) {
      let Sone = 0;
      for (let s = 0; s < apiCallArray.length; s++) {
        Sone = Sone + 1;
        if (apiCallArray[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          apiCallArray[s].type = 'FEDEX ECONOMY';
        } else if (apiCallArray[s].type === 'FEDEX_FREIGHT_PRORITY') {
          apiCallArray[s].type = 'FEDEX PRIORITY';
        } else {
          apiCallArray[s].type = apiCallArray[s].type;
        }
        finalData = {
          directions: apiCallArray[s].directions,
          fakRange: apiCallArray[s].fakRange.length > 0 ? apiCallArray[s].fakRange : [],
          fakValue: apiCallArray[s].fakValue.length > 0 ? apiCallArray[s].fakValue : [],
          fak: apiCallArray[s].fakValue.length > 0 ? apiCallArray[s].fakValue : [],

          classRange: '',
          customerId: this.companyInformation.id,
          category: apiCallArray[s].category,
          type: apiCallArray[s].type,
          classification: [],
          specificStateList1: JSON.stringify(apiCallArray[s].specificStateList1.length > 0 ? apiCallArray[s].specificStateList1 : []),
          specificStateList2: JSON.stringify(apiCallArray[s].specificStateList2.length > 0 ? apiCallArray[s].specificStateList2 : []),
          specificCityList1: JSON.stringify(apiCallArray[s].specificCityList1.length > 0 ? apiCallArray[s].specificCityList1 : []),
          specificCityList2: JSON.stringify(apiCallArray[s].specificCityList2.length > 0 ? apiCallArray[s].specificCityList2 : []),
          specificStateFlag: apiCallArray[s].specificStateFlag,
          specificZipFlag: apiCallArray[s].specificZipFlag,
          liftGate: apiCallArray[s].liftGate,
          residential: apiCallArray[s].residential,
          limitedAccessDelivery: apiCallArray[s].limitedAccessDelivery,
          insideDelivery: apiCallArray[s].insideDelivery,
          notify: apiCallArray[s].notify,
          singleShipment: apiCallArray[s].singleShipment,
          deliveryAppointmentRequired: apiCallArray[s].deliveryAppointmentRequired,
          discount: apiCallArray[s].discount,
          minCharge: apiCallArray[s].minCharge,
          createdOn: new Date(),
          toggleEnabled: apiCallArray[s].toggleEnabled,
          ruleExist: apiCallArray[s].ruleExist,
          companyId: this.companyInformation.id,
          id: apiCallArray[s].id
        };
        this.beforefinalArray.push(finalData);
        console.log(this.beforefinalArray);
        

        console.log(this.beforefinalArray.length, apiCallArray.length, s);

      }
      let responseValue, responseValueAfter;

      if (this.beforefinalArray.length === apiCallArray.length) {
        let apiArrayData = this.beforefinalArray.filter((e:any) => e.toggleEnabled === true);
        console.log(apiArrayData);
        let arrayCostplus = [];
        if (this.invoiceDetails['values'][0].yrcCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'YRC', 'factor': this.invoiceDetails['values'][0].yrcCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].reddawayCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'REDDAWAY', 'factor': this.invoiceDetails['values'][0].reddawayCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].priorityCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'FEDEX PRIORITY', 'factor': this.invoiceDetails['values'][0].priorityCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].economyCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'FEDEX ECONOMY', 'factor': this.invoiceDetails['values'][0].economyCostplusFactor })
        }
        let apiObject = {
          'companyId': this.companyInformation.id,
          'rules' : this.beforefinalArray,
          'costPlus' : this.costplusToggle,
      'costPlusFactor': arrayCostplus
        }
        if(this.selectedAnalyticsCodeData !== undefined) {
        this.invoiceService.approveCompanyRules(apiObject).subscribe((res: any)=> {
          if(res.result === true) {
            // if (this.selectedAnalyticsCodeData !==undefined) {
  
            // let name = 'LTL_' + this.companyInformation.companyName +'_' + this.firstDate;
            // let object = {
            //   "companyId": this.companyInformation.id,
            //   "contractName":name ,
            //   "contractPersion": this.shippingManagerName,
            //   "contractPosition": this.shippingManagerPost,
            //   "contractAddress": this.contractAddrss,
            //   "paymentTerms": this.companyInformation.paymentTerms,
            //   'rules' : this.beforefinalArray
            // }
            // this.invoiceService.saveContract(object).subscribe((data:any) => {
            //   console.log(data);
            //   if (data.result !== false) {
            //     this.toastr.success('Contract has been created successfully!');
                $('#ContractModalNew').modal('hide');

                // swal("Contract has been created successfully ", {
                //   icon: "success",
                // });
                // this.router.navigate(['/customerInfoworkbook'])
        
          //     } else {
          //       this.toastr.error('Contract is not created. Do it again');
        
          //       // swal("Contract is not created. Do it again", {
          //       //   icon: "error",
          //       // })
          //     }
          //   })
        
          //  }

          }
        }) 
      } else {
        alert('please save the file');
      }
    }
      console.log('Finalapi array', this.finalArray);
    }
  } else {
    this.beforefinalArray = [];
    let arraycostplus = [];
    let arrayCostplus = [];
       if (this.invoiceDetails['values'][0].yrcCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'YRC', 'factor': this.invoiceDetails['values'][0].yrcCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].reddawayCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'REDDAWAY', 'factor': this.invoiceDetails['values'][0].reddawayCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].priorityCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'FEDEX PRIORITY', 'factor': this.invoiceDetails['values'][0].priorityCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].economyCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'FEDEX ECONOMY', 'factor': this.invoiceDetails['values'][0].economyCostplusFactor })
       }
    let apiObject = {
      'companyId': this.companyInformation.id,
      'rules' : this.beforefinalArray,
      'costPlus' : this.costplusToggle,
      'costPlusFactor': arrayCostplus
    }
    if(this.selectedAnalyticsCodeData !== undefined) {
    this.invoiceService.approveCompanyRules(apiObject).subscribe((res: any)=> {
      if(res.result) {


      // let name = 'LTL_' + this.companyInformation.companyName +'_' + this.firstDate;
      // let object = {
      //   "companyId": this.companyInformation.id,
      //   "contractName":name ,
      //   "contractPersion": this.shippingManagerName,
      //   "contractPosition": this.shippingManagerPost,
      //   "contractAddress": this.contractAddrss,
      //   "paymentTerms": this.companyInformation.paymentTerms,
      //   'rules' : this.beforefinalArray
      // }
      //    this.invoiceService.saveContract(object).subscribe((data:any) => {
      // console.log(data);
      // if (data.result !== false) {
        // this.toastr.success('Contract has been created successfully!');

        // swal("Contract has been created successfully ", {
        //   icon: "success",
        // });
        $('#ContractModalNew').modal('hide');

        this.router.navigate(['/customerInfoworkbook'])

    //   } else {
    //     // this.toastr.error('Contract is not created. Do it again');

    //     // swal("Contract is not created. Do it again", {
    //     //   icon: "error",
    //     // })
    //   }
    // })
     
       }

      
    }) 
  } else {
    alert('please save the file');
  }
  }
  }


  saveContractRulesFunction() {

    console.log(this.companyRulesArray);
    let api = [];
          let apiArray:any = [];
          let newApiArray:any = [];
     let newRule = [];
     let newRuleNew = [];
     let proposedRule = [];
     let proposedRuleFilter = [];
     let existingPropoed:any = [];
     if (this.firstDate === null || this.firstDate === '') {
      this.firstDate = this.datePipe.transform(new Date(),"MM/dd/yyyy");
    }
     console.log(this.companyRulesArray);
     if (this.companyRulesArray.length > 0) {

     
     newRuleNew  = this.companyRulesArray.filter((f:any) => f.status === 'Existing');
     proposedRule = this.companyRulesArray.filter((f:any) => f.status === 'Proposed');
     existingPropoed = proposedRule.filter((f:any) => f.ruleExist === true);
     proposedRuleFilter = proposedRule.filter((e:any) => e.ruleExist === false);
     proposedRuleFilter.forEach((ele:any) => {
       if (ele.ruleExist === false) {
        ele.id = 0;

       }
     })
     newRule = proposedRule.filter((e:any) =>  e.ruleExist === true);
     console.log(existingPropoed);
    //  newRule = this.companyRulesArray.filter(e => e.ruleExist === true);
     api = this.companyRulesArray.filter((e:any) => e.ruleExist === false);
    console.log(api);
  
    console.log(newRuleNew, newRule);
  
    existingPropoed.forEach((ele:any) => {
     
      if (typeof ele.specificCityList1 === 'string') {
        ele.specificCityList1 = JSON.parse(ele.specificCityList1);
      }
      if (typeof ele.specificCityList2 === 'string') {
        ele.specificCityList2 = JSON.parse(ele.specificCityList2);
      }
      if (typeof ele.specificStateList1 === 'string') {
        ele.specificStateList1 = JSON.parse(ele.specificStateList1);
      }
      if (typeof ele.specificStateList2 === 'string') {
        ele.specificStateList2 = JSON.parse(ele.specificStateList2);
      }
    })

    if (newRule.length >0) {
      newRule.forEach((obj:any,index:any) => {
        existingPropoed.forEach((res:any,i:any) => {
          if (res.directions === obj.directions){
            if (res.type === obj.type) {
            //  if (i + 1 === api.length) {
              if (res.category === obj.category) {
                if (obj.directions==='INTERSTATE' || obj.directions === 'REGIONAL' || obj.directions === 'INTER REGIONAL' || obj.directions === 'REGIONAL INDIRECT') {
                obj.id = res.id;
                newApiArray.push(obj);
              } else if (obj.directions === 'INTRASTATE') {
                console.log(obj,res);
                if ((obj.specificStateList1[0] === res.specificStateList1[0]) && (obj.specificStateList1.length > 0 && res.specificStateList1[0].length > 0)) {
                  obj.id = res.id;
                  newApiArray.push(obj);
                } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificCityList1.length > 0 && res.specificCityList1.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
                }
              } else if (obj.directions === 'SPECIAL RULES') {
                if ((obj.specificStateList1[0] === res.specificStateList1[0]) && (obj.specificStateList2[0] === res.specificStateList2[0]) && (obj.specificStateList1.length > 0 && obj.specificStateList2.length > 0)
                && (res.specificStateList1.length > 0 && res.specificStateList2.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);

              } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificCityList2[0] === res.specificCityList2[0])) {
                obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              } else if ((obj.specificCityList1[0] === res.specificCityList1[0]) && (obj.specificStateList2[0] === res.specificStateList2[0]) &&
                (obj.specificCityList1.length > 0 && obj.specificStateList2.length > 0) && (res.specificCityList1.length > 0 && res.specificStateList2.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              } else if ((obj.specificCityList2[0] === res.specificCityList2[0]) && (obj.specificStateList1[0] === res.specificStateList1[0]) &&
                (obj.specificCityList2.length > 0 && obj.specificStateList1.length > 0) && (res.specificCityList2.length > 0 && res.specificStateList1.length > 0)) {
                  obj.id = res.id;
                  console.log(obj,res);
                  newApiArray.push(obj);
              }
              }
              }
              
            //  }
            }
          }
        })
      })
      newRuleNew.forEach((elll:any) => {
        newApiArray.push(elll)
      })
      // newApiArray.push()
    } else {

      newApiArray = newRuleNew;
    }
    console.log(apiArray, newApiArray);
    

    console.log(api,apiArray);
    console.log('proposed',proposedRuleFilter);
    let apiCallArray = [];
    if (proposedRuleFilter.length > 0) {
      apiCallArray = newApiArray.concat(proposedRuleFilter);
    } else {
      console.log(newApiArray);
      apiCallArray = newApiArray;

    }
    // apiCallArray = newApiArray;
    let finalData;
    if (apiCallArray.length > 0) {
      let Sone = 0;
      for (let s = 0; s < apiCallArray.length; s++) {
        Sone = Sone + 1;
        if (apiCallArray[s].type === 'FEDEX_FREIGHT_ECONOMY') {
          apiCallArray[s].type = 'FEDEX ECONOMY';
        } else if (apiCallArray[s].type === 'FEDEX_FREIGHT_PRORITY') {
          apiCallArray[s].type = 'FEDEX PRIORITY';
        } else {
          apiCallArray[s].type = apiCallArray[s].type;
        }
        finalData = {
          directions: apiCallArray[s].directions,
          fakRange: apiCallArray[s].fakRange.length > 0 ? apiCallArray[s].fakRange : [],
          fakValue: apiCallArray[s].fakValue.length > 0 ? apiCallArray[s].fakValue : [],
          fak: apiCallArray[s].fakValue.length > 0 ? apiCallArray[s].fakValue : [],

          classRange: '',
          customerId: this.companyInformation.id,
          category: apiCallArray[s].category,
          type: apiCallArray[s].type,
          classification: [],
          specificStateList1: JSON.stringify(apiCallArray[s].specificStateList1.length > 0 ? apiCallArray[s].specificStateList1 : []),
          specificStateList2: JSON.stringify(apiCallArray[s].specificStateList2.length > 0 ? apiCallArray[s].specificStateList2 : []),
          specificCityList1: JSON.stringify(apiCallArray[s].specificCityList1.length > 0 ? apiCallArray[s].specificCityList1 : []),
          specificCityList2: JSON.stringify(apiCallArray[s].specificCityList2.length > 0 ? apiCallArray[s].specificCityList2 : []),
          specificStateFlag: apiCallArray[s].specificStateFlag,
          specificZipFlag: apiCallArray[s].specificZipFlag,
          liftGate: apiCallArray[s].liftGate,
          residential: apiCallArray[s].residential,
          limitedAccessDelivery: apiCallArray[s].limitedAccessDelivery,
          insideDelivery: apiCallArray[s].insideDelivery,
          notify: apiCallArray[s].notify,
          singleShipment: apiCallArray[s].singleShipment,
          deliveryAppointmentRequired: apiCallArray[s].deliveryAppointmentRequired,
          discount: apiCallArray[s].discount,
          minCharge: apiCallArray[s].minCharge,
          createdOn: new Date(),
          toggleEnabled: apiCallArray[s].toggleEnabled,
          ruleExist: apiCallArray[s].ruleExist,
          companyId: this.companyInformation.id,
          id: apiCallArray[s].id
        };
        this.beforefinalArray.push(finalData);
        console.log(this.beforefinalArray);
        

        console.log(this.beforefinalArray.length, apiCallArray.length, s);

      }
      let responseValue, responseValueAfter;

      if (this.beforefinalArray.length === apiCallArray.length) {
        let apiArrayData = this.beforefinalArray.filter((e:any) => e.toggleEnabled === true);
        console.log(apiArrayData);
        let arrayCostplus = [];
        if (this.invoiceDetails['values'][0].yrcCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'YRC', 'factor': this.invoiceDetails['values'][0].yrcCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].reddawayCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'REDDAWAY', 'factor': this.invoiceDetails['values'][0].reddawayCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].priorityCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'FEDEX PRIORITY', 'factor': this.invoiceDetails['values'][0].priorityCostplusFactor })
        }
        if (this.invoiceDetails['values'][0].economyCostplusFactor !== undefined) {
          arrayCostplus.push({ 'carrier': 'FEDEX ECONOMY', 'factor': this.invoiceDetails['values'][0].economyCostplusFactor })
        }
    
    }
      console.log('Finalapi array', this.finalArray);
    }
  } else {
    this.beforefinalArray = [];
    let arraycostplus = [];
    let arrayCostplus = [];
       if (this.invoiceDetails['values'][0].yrcCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'YRC', 'factor': this.invoiceDetails['values'][0].yrcCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].reddawayCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'REDDAWAY', 'factor': this.invoiceDetails['values'][0].reddawayCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].priorityCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'FEDEX PRIORITY', 'factor': this.invoiceDetails['values'][0].priorityCostplusFactor })
       }
       if (this.invoiceDetails['values'][0].economyCostplusFactor !== undefined) {
         arrayCostplus.push({ 'carrier': 'FEDEX ECONOMY', 'factor': this.invoiceDetails['values'][0].economyCostplusFactor })
       }
   
  }




    
    if (this.firstDate === null || this.firstDate === '') {
      this.firstDate = this.datePipe.transform(new Date(),"MM/dd/yyyy");
    }
    let name = 'LTL_' + this.companyInformation.companyName +'_' + this.firstDate;
    let object = {
      "companyId": this.companyInformation.id,
      "contractName":name ,
      "contractPersion": this.shippingManagerName,
      "contractPosition": this.shippingManagerPost,
      "contractAddress": this.contractAddrss,
      "paymentTerms": this.companyInformation.paymentTerms,
      'rules' : this.beforefinalArray
    }
       this.invoiceService.saveContract(object).subscribe((data:any) => {
    console.log(data);
    if (data.result !== false) {
      // this.toastr.success('Contract has been created successfully!');

      // swal("Contract has been created successfully ", {
      //   icon: "success",
      // });
      $('#ContractModalNew').modal('hide');

      this.router.navigate(['/customerInfoworkbook'])

    }
  })
  }

  CostplusEnabling(event:any) {
    console.log(event);
    if (event.target.checked === true) {
      this.costplusToggle = true;
      if (this.costplusFactor !== '' ) {
        this.checkCostplus1();
      }
    } else if (event.target.checked === false) {
      this.costplusToggle = false;
      this.costplusValueEnabled = false;
      if (this.invoiceDetails['carrier'] === 'YRC') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.yrcCostplusFactor = null;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.reddawayCostplusFactor = null;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.priorityCostplusFactor = null;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }  else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.economyCostplusFactor = null;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }
      this.tableVables();

    }
  }

  checkCostplus(event:any) {
    console.log(event);
    if(event.code === 'Enter') {
      console.log(this.costplusFactor, this.invoiceDetails);
      this.costplusValueEnabled = true;
      if (this.invoiceDetails['carrier'] === 'YRC') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.yrcCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.reddawayCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.priorityCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }  else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.economyCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }
      this.tableVables();
    }
  }

  checkCostplus1() {
    // console.log(event);
    // if(event.code === 'Enter') {
      console.log(this.costplusFactor, this.invoiceDetails);
      this.costplusValueEnabled = true;
      if (this.invoiceDetails['carrier'] === 'YRC') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.yrcCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'REDDAWAY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.reddawayCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      } else if (this.invoiceDetails['carrier'] === 'FEDEX PRIORITY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_PRIORITY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.priorityCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }  else if (this.invoiceDetails['carrier'] === 'FEDEX ECONOMY' || this.invoiceDetails['carrier'] === 'FEDEX_FREIGHT_ECONOMY') {
        this.invoiceDetails['values'].forEach((element:any) => {
          element.economyCostplusFactor = this.costplusFactor;
        });
        //  this.yrcCostplusFactor = this.costplusFactor;
      }
      this.tableVables();
    // }
  }
  deleteAssessorial(assessorial:any, i:any) {
    console.log(assessorial,i);
  }
}
